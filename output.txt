Initiating test run...

⚡ This is a turbo test run. https://codecrafters.io/turbo

Running tests. Logs should appear shortly...

[compile] Moved ./.codecrafters/run.sh → ./your_program.sh
[compile] Compilation successful.

Debug = true

[tester::#RY8] Running tests for Stage #RY8 (Scanning: Empty file)
[tester::#RY8] Writing contents to ./test.lox:
[tester::#RY8] [test.lox] 
[tester::#RY8] $ ./your_program.sh tokenize test.lox
[your_program] EOF  null
[tester::#RY8] ✓ 1 line(s) match on stdout
[tester::#RY8] ✓ Received exit code 0.
[tester::#RY8] Test passed.

[tester::#OL4] Running tests for Stage #OL4 (Scanning: Parentheses)
[tester::#OL4] [test-1] Running test case: 1
[tester::#OL4] [test-1] Writing contents to ./test.lox:
[tester::#OL4] [test-1] [test.lox] (
[tester::#OL4] [test-1] $ ./your_program.sh tokenize test.lox
[your_program] LEFT_PAREN ( null
[your_program] EOF  null
[tester::#OL4] [test-1] ✓ 2 line(s) match on stdout
[tester::#OL4] [test-1] ✓ Received exit code 0.
[tester::#OL4] [test-2] Running test case: 2
[tester::#OL4] [test-2] Writing contents to ./test.lox:
[tester::#OL4] [test-2] [test.lox] ))
[tester::#OL4] [test-2] $ ./your_program.sh tokenize test.lox
[your_program] RIGHT_PAREN ) null
[your_program] RIGHT_PAREN ) null
[your_program] EOF  null
[tester::#OL4] [test-2] ✓ 3 line(s) match on stdout
[tester::#OL4] [test-2] ✓ Received exit code 0.
[tester::#OL4] [test-3] Running test case: 3
[tester::#OL4] [test-3] Writing contents to ./test.lox:
[tester::#OL4] [test-3] [test.lox] ((()(
[tester::#OL4] [test-3] $ ./your_program.sh tokenize test.lox
[your_program] LEFT_PAREN ( null
[your_program] LEFT_PAREN ( null
[your_program] LEFT_PAREN ( null
[your_program] RIGHT_PAREN ) null
[your_program] LEFT_PAREN ( null
[your_program] EOF  null
[tester::#OL4] [test-3] ✓ 6 line(s) match on stdout
[tester::#OL4] [test-3] ✓ Received exit code 0.
[tester::#OL4] [test-4] Running test case: 4
[tester::#OL4] [test-4] Writing contents to ./test.lox:
[tester::#OL4] [test-4] [test.lox] )(()))(
[tester::#OL4] [test-4] $ ./your_program.sh tokenize test.lox
[your_program] RIGHT_PAREN ) null
[your_program] LEFT_PAREN ( null
[your_program] LEFT_PAREN ( null
[your_program] RIGHT_PAREN ) null
[your_program] RIGHT_PAREN ) null
[your_program] RIGHT_PAREN ) null
[your_program] LEFT_PAREN ( null
[your_program] EOF  null
[tester::#OL4] [test-4] ✓ 8 line(s) match on stdout
[tester::#OL4] [test-4] ✓ Received exit code 0.
[tester::#OL4] Test passed.

[tester::#OE8] Running tests for Stage #OE8 (Scanning: Braces)
[tester::#OE8] [test-1] Running test case: 1
[tester::#OE8] [test-1] Writing contents to ./test.lox:
[tester::#OE8] [test-1] [test.lox] }
[tester::#OE8] [test-1] $ ./your_program.sh tokenize test.lox
[your_program] RIGHT_BRACE } null
[your_program] EOF  null
[tester::#OE8] [test-1] ✓ 2 line(s) match on stdout
[tester::#OE8] [test-1] ✓ Received exit code 0.
[tester::#OE8] [test-2] Running test case: 2
[tester::#OE8] [test-2] Writing contents to ./test.lox:
[tester::#OE8] [test-2] [test.lox] {{}}
[tester::#OE8] [test-2] $ ./your_program.sh tokenize test.lox
[your_program] LEFT_BRACE { null
[your_program] LEFT_BRACE { null
[your_program] RIGHT_BRACE } null
[your_program] RIGHT_BRACE } null
[your_program] EOF  null
[tester::#OE8] [test-2] ✓ 5 line(s) match on stdout
[tester::#OE8] [test-2] ✓ Received exit code 0.
[tester::#OE8] [test-3] Running test case: 3
[tester::#OE8] [test-3] Writing contents to ./test.lox:
[tester::#OE8] [test-3] [test.lox] {}{}{
[tester::#OE8] [test-3] $ ./your_program.sh tokenize test.lox
[your_program] LEFT_BRACE { null
[your_program] RIGHT_BRACE } null
[your_program] LEFT_BRACE { null
[your_program] RIGHT_BRACE } null
[your_program] LEFT_BRACE { null
[your_program] EOF  null
[tester::#OE8] [test-3] ✓ 6 line(s) match on stdout
[tester::#OE8] [test-3] ✓ Received exit code 0.
[tester::#OE8] [test-4] Running test case: 4
[tester::#OE8] [test-4] Writing contents to ./test.lox:
[tester::#OE8] [test-4] [test.lox] {(}{))(
[tester::#OE8] [test-4] $ ./your_program.sh tokenize test.lox
[your_program] LEFT_BRACE { null
[your_program] LEFT_PAREN ( null
[your_program] RIGHT_BRACE } null
[your_program] LEFT_BRACE { null
[your_program] RIGHT_PAREN ) null
[your_program] RIGHT_PAREN ) null
[your_program] LEFT_PAREN ( null
[your_program] EOF  null
[tester::#OE8] [test-4] ✓ 8 line(s) match on stdout
[tester::#OE8] [test-4] ✓ Received exit code 0.
[tester::#OE8] Test passed.

[tester::#XC5] Running tests for Stage #XC5 (Scanning: Other single-character tokens)
[tester::#XC5] [test-1] Running test case: 1
[tester::#XC5] [test-1] Writing contents to ./test.lox:
[tester::#XC5] [test-1] [test.lox] +-
[tester::#XC5] [test-1] $ ./your_program.sh tokenize test.lox
[your_program] PLUS + null
[your_program] MINUS - null
[your_program] EOF  null
[tester::#XC5] [test-1] ✓ 3 line(s) match on stdout
[tester::#XC5] [test-1] ✓ Received exit code 0.
[tester::#XC5] [test-2] Running test case: 2
[tester::#XC5] [test-2] Writing contents to ./test.lox:
[tester::#XC5] [test-2] [test.lox] ++--**..,,;;
[tester::#XC5] [test-2] $ ./your_program.sh tokenize test.lox
[your_program] PLUS + null
[your_program] PLUS + null
[your_program] MINUS - null
[your_program] MINUS - null
[your_program] STAR * null
[your_program] STAR * null
[your_program] DOT . null
[your_program] DOT . null
[your_program] COMMA , null
[your_program] COMMA , null
[your_program] SEMICOLON ; null
[your_program] SEMICOLON ; null
[your_program] EOF  null
[tester::#XC5] [test-2] ✓ 13 line(s) match on stdout
[tester::#XC5] [test-2] ✓ Received exit code 0.
[tester::#XC5] [test-3] Running test case: 3
[tester::#XC5] [test-3] Writing contents to ./test.lox:
[tester::#XC5] [test-3] [test.lox] +-;.-,;
[tester::#XC5] [test-3] $ ./your_program.sh tokenize test.lox
[your_program] PLUS + null
[your_program] MINUS - null
[your_program] SEMICOLON ; null
[your_program] DOT . null
[your_program] MINUS - null
[your_program] COMMA , null
[your_program] SEMICOLON ; null
[your_program] EOF  null
[tester::#XC5] [test-3] ✓ 8 line(s) match on stdout
[tester::#XC5] [test-3] ✓ Received exit code 0.
[tester::#XC5] [test-4] Running test case: 4
[tester::#XC5] [test-4] Writing contents to ./test.lox:
[tester::#XC5] [test-4] [test.lox] ({-;.+,})
[tester::#XC5] [test-4] $ ./your_program.sh tokenize test.lox
[your_program] LEFT_PAREN ( null
[your_program] LEFT_BRACE { null
[your_program] MINUS - null
[your_program] SEMICOLON ; null
[your_program] DOT . null
[your_program] PLUS + null
[your_program] COMMA , null
[your_program] RIGHT_BRACE } null
[your_program] RIGHT_PAREN ) null
[your_program] EOF  null
[tester::#XC5] [test-4] ✓ 10 line(s) match on stdout
[tester::#XC5] [test-4] ✓ Received exit code 0.
[tester::#XC5] Test passed.

[tester::#EA6] Running tests for Stage #EA6 (Scanning: Lexical errors)
[tester::#EA6] [test-1] Running test case: 1
[tester::#EA6] [test-1] Writing contents to ./test.lox:
[tester::#EA6] [test-1] [test.lox] @
[tester::#EA6] [test-1] $ ./your_program.sh tokenize test.lox
[your_program] [line 1] Error: Unexpected character: @
[your_program] EOF  null
[tester::#EA6] [test-1] ✓ 1 line(s) match on stderr
[tester::#EA6] [test-1] ✓ 1 line(s) match on stdout
[tester::#EA6] [test-1] ✓ Received exit code 65.
[tester::#EA6] [test-2] Running test case: 2
[tester::#EA6] [test-2] Writing contents to ./test.lox:
[tester::#EA6] [test-2] [test.lox] ,.$(#
[tester::#EA6] [test-2] $ ./your_program.sh tokenize test.lox
[your_program] [line 1] Error: Unexpected character: $
[your_program] [line 1] Error: Unexpected character: #
[your_program] COMMA , null
[your_program] DOT . null
[your_program] LEFT_PAREN ( null
[your_program] EOF  null
[tester::#EA6] [test-2] ✓ 2 line(s) match on stderr
[tester::#EA6] [test-2] ✓ 4 line(s) match on stdout
[tester::#EA6] [test-2] ✓ Received exit code 65.
[tester::#EA6] [test-3] Running test case: 3
[tester::#EA6] [test-3] Writing contents to ./test.lox:
[tester::#EA6] [test-3] [test.lox] %$#@%
[tester::#EA6] [test-3] $ ./your_program.sh tokenize test.lox
[your_program] [line 1] Error: Unexpected character: %
[your_program] [line 1] Error: Unexpected character: $
[your_program] [line 1] Error: Unexpected character: #
[your_program] [line 1] Error: Unexpected character: @
[your_program] [line 1] Error: Unexpected character: %
[your_program] EOF  null
[tester::#EA6] [test-3] ✓ 5 line(s) match on stderr
[tester::#EA6] [test-3] ✓ 1 line(s) match on stdout
[tester::#EA6] [test-3] ✓ Received exit code 65.
[tester::#EA6] [test-4] Running test case: 4
[tester::#EA6] [test-4] Writing contents to ./test.lox:
[tester::#EA6] [test-4] [test.lox] {(+.,$;#%)}
[tester::#EA6] [test-4] $ ./your_program.sh tokenize test.lox
[your_program] [line 1] Error: Unexpected character: $
[your_program] [line 1] Error: Unexpected character: #
[your_program] [line 1] Error: Unexpected character: %
[your_program] LEFT_BRACE { null
[your_program] LEFT_PAREN ( null
[your_program] PLUS + null
[your_program] DOT . null
[your_program] COMMA , null
[your_program] SEMICOLON ; null
[your_program] RIGHT_PAREN ) null
[your_program] RIGHT_BRACE } null
[your_program] EOF  null
[tester::#EA6] [test-4] ✓ 3 line(s) match on stderr
[tester::#EA6] [test-4] ✓ 9 line(s) match on stdout
[tester::#EA6] [test-4] ✓ Received exit code 65.
[tester::#EA6] Test passed.

[tester::#MP7] Running tests for Stage #MP7 (Scanning: Assignment & equality Operators)
[tester::#MP7] [test-1] Running test case: 1
[tester::#MP7] [test-1] Writing contents to ./test.lox:
[tester::#MP7] [test-1] [test.lox] =
[tester::#MP7] [test-1] $ ./your_program.sh tokenize test.lox
[your_program] EQUAL = null
[your_program] EOF  null
[tester::#MP7] [test-1] ✓ 2 line(s) match on stdout
[tester::#MP7] [test-1] ✓ Received exit code 0.
[tester::#MP7] [test-2] Running test case: 2
[tester::#MP7] [test-2] Writing contents to ./test.lox:
[tester::#MP7] [test-2] [test.lox] ==
[tester::#MP7] [test-2] $ ./your_program.sh tokenize test.lox
[your_program] EQUAL_EQUAL == null
[your_program] EOF  null
[tester::#MP7] [test-2] ✓ 2 line(s) match on stdout
[tester::#MP7] [test-2] ✓ Received exit code 0.
[tester::#MP7] [test-3] Running test case: 3
[tester::#MP7] [test-3] Writing contents to ./test.lox:
[tester::#MP7] [test-3] [test.lox] ({=}){==}
[tester::#MP7] [test-3] $ ./your_program.sh tokenize test.lox
[your_program] LEFT_PAREN ( null
[your_program] LEFT_BRACE { null
[your_program] EQUAL = null
[your_program] RIGHT_BRACE } null
[your_program] RIGHT_PAREN ) null
[your_program] LEFT_BRACE { null
[your_program] EQUAL_EQUAL == null
[your_program] RIGHT_BRACE } null
[your_program] EOF  null
[tester::#MP7] [test-3] ✓ 9 line(s) match on stdout
[tester::#MP7] [test-3] ✓ Received exit code 0.
[tester::#MP7] [test-4] Running test case: 4
[tester::#MP7] [test-4] Writing contents to ./test.lox:
[tester::#MP7] [test-4] [test.lox] (($%===@))
[tester::#MP7] [test-4] $ ./your_program.sh tokenize test.lox
[your_program] [line 1] Error: Unexpected character: $
[your_program] [line 1] Error: Unexpected character: %
[your_program] [line 1] Error: Unexpected character: @
[your_program] LEFT_PAREN ( null
[your_program] LEFT_PAREN ( null
[your_program] EQUAL_EQUAL == null
[your_program] EQUAL = null
[your_program] RIGHT_PAREN ) null
[your_program] RIGHT_PAREN ) null
[your_program] EOF  null
[tester::#MP7] [test-4] ✓ 3 line(s) match on stderr
[tester::#MP7] [test-4] ✓ 7 line(s) match on stdout
[tester::#MP7] [test-4] ✓ Received exit code 65.
[tester::#MP7] Test passed.

[tester::#BU3] Running tests for Stage #BU3 (Scanning: Negation & inequality operators)
[tester::#BU3] [test-1] Running test case: 1
[tester::#BU3] [test-1] Writing contents to ./test.lox:
[tester::#BU3] [test-1] [test.lox] !=
[tester::#BU3] [test-1] $ ./your_program.sh tokenize test.lox
[your_program] BANG_EQUAL != null
[your_program] EOF  null
[tester::#BU3] [test-1] ✓ 2 line(s) match on stdout
[tester::#BU3] [test-1] ✓ Received exit code 0.
[tester::#BU3] [test-2] Running test case: 2
[tester::#BU3] [test-2] Writing contents to ./test.lox:
[tester::#BU3] [test-2] [test.lox] !!===
[tester::#BU3] [test-2] $ ./your_program.sh tokenize test.lox
[your_program] BANG ! null
[your_program] BANG_EQUAL != null
[your_program] EQUAL_EQUAL == null
[your_program] EOF  null
[tester::#BU3] [test-2] ✓ 4 line(s) match on stdout
[tester::#BU3] [test-2] ✓ Received exit code 0.
[tester::#BU3] [test-3] Running test case: 3
[tester::#BU3] [test-3] Writing contents to ./test.lox:
[tester::#BU3] [test-3] [test.lox] !{!}(!===)=
[tester::#BU3] [test-3] $ ./your_program.sh tokenize test.lox
[your_program] BANG ! null
[your_program] LEFT_BRACE { null
[your_program] BANG ! null
[your_program] RIGHT_BRACE } null
[your_program] LEFT_PAREN ( null
[your_program] BANG_EQUAL != null
[your_program] EQUAL_EQUAL == null
[your_program] RIGHT_PAREN ) null
[your_program] EQUAL = null
[your_program] EOF  null
[tester::#BU3] [test-3] ✓ 10 line(s) match on stdout
[tester::#BU3] [test-3] ✓ Received exit code 0.
[tester::#BU3] [test-4] Running test case: 4
[tester::#BU3] [test-4] Writing contents to ./test.lox:
[tester::#BU3] [test-4] [test.lox] {(@$!!==)}
[tester::#BU3] [test-4] $ ./your_program.sh tokenize test.lox
[your_program] [line 1] Error: Unexpected character: @
[your_program] [line 1] Error: Unexpected character: $
[your_program] LEFT_BRACE { null
[your_program] LEFT_PAREN ( null
[your_program] BANG ! null
[your_program] BANG_EQUAL != null
[your_program] EQUAL = null
[your_program] RIGHT_PAREN ) null
[your_program] RIGHT_BRACE } null
[your_program] EOF  null
[tester::#BU3] [test-4] ✓ 2 line(s) match on stderr
[tester::#BU3] [test-4] ✓ 8 line(s) match on stdout
[tester::#BU3] [test-4] ✓ Received exit code 65.
[tester::#BU3] Test passed.

[tester::#ET2] Running tests for Stage #ET2 (Scanning: Relational operators)
[tester::#ET2] [test-1] Running test case: 1
[tester::#ET2] [test-1] Writing contents to ./test.lox:
[tester::#ET2] [test-1] [test.lox] >=
[tester::#ET2] [test-1] $ ./your_program.sh tokenize test.lox
[your_program] GREATER_EQUAL >= null
[your_program] EOF  null
[tester::#ET2] [test-1] ✓ 2 line(s) match on stdout
[tester::#ET2] [test-1] ✓ Received exit code 0.
[tester::#ET2] [test-2] Running test case: 2
[tester::#ET2] [test-2] Writing contents to ./test.lox:
[tester::#ET2] [test-2] [test.lox] <<<=>>>=
[tester::#ET2] [test-2] $ ./your_program.sh tokenize test.lox
[your_program] LESS < null
[your_program] LESS < null
[your_program] LESS_EQUAL <= null
[your_program] GREATER > null
[your_program] GREATER > null
[your_program] GREATER_EQUAL >= null
[your_program] EOF  null
[tester::#ET2] [test-2] ✓ 7 line(s) match on stdout
[tester::#ET2] [test-2] ✓ Received exit code 0.
[tester::#ET2] [test-3] Running test case: 3
[tester::#ET2] [test-3] Writing contents to ./test.lox:
[tester::#ET2] [test-3] [test.lox] >><=>=<
[tester::#ET2] [test-3] $ ./your_program.sh tokenize test.lox
[your_program] GREATER > null
[your_program] GREATER > null
[your_program] LESS_EQUAL <= null
[your_program] GREATER_EQUAL >= null
[your_program] LESS < null
[your_program] EOF  null
[tester::#ET2] [test-3] ✓ 6 line(s) match on stdout
[tester::#ET2] [test-3] ✓ Received exit code 0.
[tester::#ET2] [test-4] Running test case: 4
[tester::#ET2] [test-4] Writing contents to ./test.lox:
[tester::#ET2] [test-4] [test.lox] (){>===>}
[tester::#ET2] [test-4] $ ./your_program.sh tokenize test.lox
[your_program] LEFT_PAREN ( null
[your_program] RIGHT_PAREN ) null
[your_program] LEFT_BRACE { null
[your_program] GREATER_EQUAL >= null
[your_program] EQUAL_EQUAL == null
[your_program] GREATER > null
[your_program] RIGHT_BRACE } null
[your_program] EOF  null
[tester::#ET2] [test-4] ✓ 8 line(s) match on stdout
[tester::#ET2] [test-4] ✓ Received exit code 0.
[tester::#ET2] Test passed.

[tester::#ML2] Running tests for Stage #ML2 (Scanning: Division operator & comments)
[tester::#ML2] [test-1] Running test case: 1
[tester::#ML2] [test-1] Writing contents to ./test.lox:
[tester::#ML2] [test-1] [test.lox] //Comment
[tester::#ML2] [test-1] $ ./your_program.sh tokenize test.lox
[your_program] EOF  null
[your_program] comment: //Comment
[tester::#ML2] [test-1] ✓ 1 line(s) match on stdout
[tester::#ML2] [test-1] ✓ Received exit code 0.
[tester::#ML2] [test-2] Running test case: 2
[tester::#ML2] [test-2] Writing contents to ./test.lox:
[tester::#ML2] [test-2] [test.lox] (///Unicode:£§᯽☺♣)
[tester::#ML2] [test-2] $ ./your_program.sh tokenize test.lox
[your_program] LEFT_PAREN ( null
[your_program] EOF  null
[your_program] comment: ///Unicode:£§᯽☺♣)
[tester::#ML2] [test-2] ✓ 2 line(s) match on stdout
[tester::#ML2] [test-2] ✓ Received exit code 0.
[tester::#ML2] [test-3] Running test case: 3
[tester::#ML2] [test-3] Writing contents to ./test.lox:
[tester::#ML2] [test-3] [test.lox] /
[tester::#ML2] [test-3] $ ./your_program.sh tokenize test.lox
[your_program] SLASH / null
[your_program] EOF  null
[tester::#ML2] [test-3] ✓ 2 line(s) match on stdout
[tester::#ML2] [test-3] ✓ Received exit code 0.
[tester::#ML2] [test-4] Running test case: 4
[tester::#ML2] [test-4] Writing contents to ./test.lox:
[tester::#ML2] [test-4] [test.lox] ({(==!=.)})//Comment
[tester::#ML2] [test-4] $ ./your_program.sh tokenize test.lox
[your_program] LEFT_PAREN ( null
[your_program] LEFT_BRACE { null
[your_program] LEFT_PAREN ( null
[your_program] EQUAL_EQUAL == null
[your_program] BANG_EQUAL != null
[your_program] DOT . null
[your_program] RIGHT_PAREN ) null
[your_program] RIGHT_BRACE } null
[your_program] RIGHT_PAREN ) null
[your_program] EOF  null
[your_program] comment: //Comment
[tester::#ML2] [test-4] ✓ 10 line(s) match on stdout
[tester::#ML2] [test-4] ✓ Received exit code 0.
[tester::#ML2] Test passed.

[tester::#ER2] Running tests for Stage #ER2 (Scanning: Whitespace)
[tester::#ER2] [test-1] Running test case: 1
[tester::#ER2] [test-1] Writing contents to ./test.lox:
[tester::#ER2] [test-1] [test.lox] <|SPACE|>
[tester::#ER2] [test-1] $ ./your_program.sh tokenize test.lox
[your_program] EOF  null
[tester::#ER2] [test-1] ✓ 1 line(s) match on stdout
[tester::#ER2] [test-1] ✓ Received exit code 0.
[tester::#ER2] [test-2] Running test case: 2
[tester::#ER2] [test-2] Writing contents to ./test.lox:
[tester::#ER2] [test-2] [test.lox]  <|TAB|>
[tester::#ER2] [test-2] [test.lox] <|SPACE|>
[tester::#ER2] [test-2] $ ./your_program.sh tokenize test.lox
[your_program] EOF  null
[tester::#ER2] [test-2] ✓ 1 line(s) match on stdout
[tester::#ER2] [test-2] ✓ Received exit code 0.
[tester::#ER2] [test-3] Running test case: 3
[tester::#ER2] [test-3] Writing contents to ./test.lox:
[tester::#ER2] [test-3] [test.lox] {
[tester::#ER2] [test-3] [test.lox] <|TAB|>}
[tester::#ER2] [test-3] [test.lox] (( ;*,.))
[tester::#ER2] [test-3] $ ./your_program.sh tokenize test.lox
[your_program] LEFT_BRACE { null
[your_program] RIGHT_BRACE } null
[your_program] LEFT_PAREN ( null
[your_program] LEFT_PAREN ( null
[your_program] SEMICOLON ; null
[your_program] STAR * null
[your_program] COMMA , null
[your_program] DOT . null
[your_program] RIGHT_PAREN ) null
[your_program] RIGHT_PAREN ) null
[your_program] EOF  null
[tester::#ER2] [test-3] ✓ 11 line(s) match on stdout
[tester::#ER2] [test-3] ✓ Received exit code 0.
[tester::#ER2] [test-4] Running test case: 4
[tester::#ER2] [test-4] Writing contents to ./test.lox:
[tester::#ER2] [test-4] [test.lox] {
[tester::#ER2] [test-4] [test.lox] <|TAB|> <|TAB|>
[tester::#ER2] [test-4] [test.lox] }
[tester::#ER2] [test-4] [test.lox] ((;<>=*
[tester::#ER2] [test-4] [test.lox] ))
[tester::#ER2] [test-4] $ ./your_program.sh tokenize test.lox
[your_program] LEFT_BRACE { null
[your_program] RIGHT_BRACE } null
[your_program] LEFT_PAREN ( null
[your_program] LEFT_PAREN ( null
[your_program] SEMICOLON ; null
[your_program] LESS < null
[your_program] GREATER_EQUAL >= null
[your_program] STAR * null
[your_program] RIGHT_PAREN ) null
[your_program] RIGHT_PAREN ) null
[your_program] EOF  null
[tester::#ER2] [test-4] ✓ 11 line(s) match on stdout
[tester::#ER2] [test-4] ✓ Received exit code 0.
[tester::#ER2] Test passed.

[tester::#TZ7] Running tests for Stage #TZ7 (Scanning: Multi-line errors)
[tester::#TZ7] [test-1] Running test case: 1
[tester::#TZ7] [test-1] Writing contents to ./test.lox:
[tester::#TZ7] [test-1] [test.lox] ()<|SPACE|><|TAB|>@
[tester::#TZ7] [test-1] $ ./your_program.sh tokenize test.lox
[your_program] LEFT_PAREN ( null
[your_program] RIGHT_PAREN ) null
[your_program] EOF  null
[your_program] [line 2] Error: Unexpected character: @
[tester::#TZ7] [test-1] ✓ 1 line(s) match on stderr
[tester::#TZ7] [test-1] ✓ 3 line(s) match on stdout
[tester::#TZ7] [test-1] ✓ Received exit code 65.
[tester::#TZ7] [test-2] Running test case: 2
[tester::#TZ7] [test-2] Writing contents to ./test.lox:
[tester::#TZ7] [test-2] [test.lox]  #$
[tester::#TZ7] [test-2] [test.lox] 
[tester::#TZ7] [test-2] $ ./your_program.sh tokenize test.lox
[your_program] EOF  null
[your_program] [line 1] Error: Unexpected character: #
[your_program] [line 1] Error: Unexpected character: $
[tester::#TZ7] [test-2] ✓ 2 line(s) match on stderr
[tester::#TZ7] [test-2] ✓ 1 line(s) match on stdout
[tester::#TZ7] [test-2] ✓ Received exit code 65.
[tester::#TZ7] [test-3] Running test case: 3
[tester::#TZ7] [test-3] Writing contents to ./test.lox:
[tester::#TZ7] [test-3] [test.lox] ()  #<|TAB|>{}
[tester::#TZ7] [test-3] [test.lox] @
[tester::#TZ7] [test-3] [test.lox] $
[tester::#TZ7] [test-3] [test.lox] +++
[tester::#TZ7] [test-3] [test.lox] // Let's Go!
[tester::#TZ7] [test-3] [test.lox] +++
[tester::#TZ7] [test-3] [test.lox] #
[tester::#TZ7] [test-3] $ ./your_program.sh tokenize test.lox
[your_program] [line 1] Error: Unexpected character: #
[your_program] [line 2] Error: Unexpected character: @
[your_program] [line 3] Error: Unexpected character: $
[your_program] comment: //Let's Go!
[your_program] [line 7] Error: Unexpected character: #
[your_program] LEFT_PAREN ( null
[your_program] RIGHT_PAREN ) null
[your_program] LEFT_BRACE { null
[your_program] RIGHT_BRACE } null
[your_program] PLUS + null
[your_program] PLUS + null
[your_program] PLUS + null
[your_program] PLUS + null
[your_program] PLUS + null
[your_program] PLUS + null
[your_program] EOF  null
[tester::#TZ7] [test-3] ✓ 4 line(s) match on stderr
[tester::#TZ7] [test-3] ✓ 11 line(s) match on stdout
[tester::#TZ7] [test-3] ✓ Received exit code 65.
[tester::#TZ7] [test-4] Running test case: 4
[tester::#TZ7] [test-4] Writing contents to ./test.lox:
[tester::#TZ7] [test-4] [test.lox] ({; %})
[tester::#TZ7] [test-4] $ ./your_program.sh tokenize test.lox
[your_program] LEFT_PAREN ( null
[your_program] LEFT_BRACE { null
[your_program] SEMICOLON ; null
[your_program] RIGHT_BRACE } null
[your_program] RIGHT_PAREN ) null
[your_program] EOF  null
[your_program] [line 1] Error: Unexpected character: %
[tester::#TZ7] [test-4] ✓ 1 line(s) match on stderr
[tester::#TZ7] [test-4] ✓ 6 line(s) match on stdout
[tester::#TZ7] [test-4] ✓ Received exit code 65.
[tester::#TZ7] Test passed.

[tester::#UE7] Running tests for Stage #UE7 (Scanning: String literals)
[tester::#UE7] [test-1] Running test case: 1
[tester::#UE7] [test-1] Writing contents to ./test.lox:
[tester::#UE7] [test-1] [test.lox] "hello"
[tester::#UE7] [test-1] $ ./your_program.sh tokenize test.lox
[your_program] STRING "hello" hello
[your_program] EOF  null
[tester::#UE7] [test-1] ✓ 2 line(s) match on stdout
[tester::#UE7] [test-1] ✓ Received exit code 0.
[tester::#UE7] [test-2] Running test case: 2
[tester::#UE7] [test-2] Writing contents to ./test.lox:
[tester::#UE7] [test-2] [test.lox] "bar" "unterminated
[tester::#UE7] [test-2] $ ./your_program.sh tokenize test.lox
[your_program] STRING "bar" bar
[your_program] EOF  null
[your_program] [line 1] Error: Unterminated string.
[tester::#UE7] [test-2] ✓ 1 line(s) match on stderr
[tester::#UE7] [test-2] ✓ 2 line(s) match on stdout
[tester::#UE7] [test-2] ✓ Received exit code 65.
[tester::#UE7] [test-3] Running test case: 3
[tester::#UE7] [test-3] Writing contents to ./test.lox:
[tester::#UE7] [test-3] [test.lox] "foo <|TAB|>bar 123 // hello world!"
[tester::#UE7] [test-3] $ ./your_program.sh tokenize test.lox
[your_program] STRING "foo 	bar 123 // hello world!" foo 	bar 123 // hello world!
[your_program] EOF  null
[tester::#UE7] [test-3] ✓ 2 line(s) match on stdout
[tester::#UE7] [test-3] ✓ Received exit code 0.
[tester::#UE7] [test-4] Running test case: 4
[tester::#UE7] [test-4] Writing contents to ./test.lox:
[tester::#UE7] [test-4] [test.lox] ("baz"+"foo") != "other_string"
[tester::#UE7] [test-4] $ ./your_program.sh tokenize test.lox
[your_program] LEFT_PAREN ( null
[your_program] STRING "baz" baz
[your_program] PLUS + null
[your_program] STRING "foo" foo
[your_program] RIGHT_PAREN ) null
[your_program] BANG_EQUAL != null
[your_program] STRING "other_string" other_string
[your_program] EOF  null
[tester::#UE7] [test-4] ✓ 8 line(s) match on stdout
[tester::#UE7] [test-4] ✓ Received exit code 0.
[tester::#UE7] Test passed.

[tester::#KJ0] Running tests for Stage #KJ0 (Scanning: Number literals)
[tester::#KJ0] [test-1] Running test case: 1
[tester::#KJ0] [test-1] Writing contents to ./test.lox:
[tester::#KJ0] [test-1] [test.lox] 25
[tester::#KJ0] [test-1] $ ./your_program.sh tokenize test.lox
[your_program] NUMBER 25 25.0
[your_program] EOF  null
[tester::#KJ0] [test-1] ✓ 2 line(s) match on stdout
[tester::#KJ0] [test-1] ✓ Received exit code 0.
[tester::#KJ0] [test-2] Running test case: 2
[tester::#KJ0] [test-2] Writing contents to ./test.lox:
[tester::#KJ0] [test-2] [test.lox] 61.75
[tester::#KJ0] [test-2] $ ./your_program.sh tokenize test.lox
[your_program] NUMBER 61.75 61.75
[your_program] EOF  null
[tester::#KJ0] [test-2] ✓ 2 line(s) match on stdout
[tester::#KJ0] [test-2] ✓ Received exit code 0.
[tester::#KJ0] [test-3] Running test case: 3
[tester::#KJ0] [test-3] Writing contents to ./test.lox:
[tester::#KJ0] [test-3] [test.lox] 18.0000
[tester::#KJ0] [test-3] $ ./your_program.sh tokenize test.lox
[your_program] NUMBER 18.0000 18.0
[your_program] EOF  null
[tester::#KJ0] [test-3] ✓ 2 line(s) match on stdout
[tester::#KJ0] [test-3] ✓ Received exit code 0.
[tester::#KJ0] [test-4] Running test case: 4
[tester::#KJ0] [test-4] Writing contents to ./test.lox:
[tester::#KJ0] [test-4] [test.lox] (26+14) > 27 != ("Success" != "Failure") != (46 >= 99)
[tester::#KJ0] [test-4] $ ./your_program.sh tokenize test.lox
[your_program] LEFT_PAREN ( null
[your_program] NUMBER 26 26.0
[your_program] PLUS + null
[your_program] NUMBER 14 14.0
[your_program] RIGHT_PAREN ) null
[your_program] GREATER > null
[your_program] NUMBER 27 27.0
[your_program] BANG_EQUAL != null
[your_program] LEFT_PAREN ( null
[your_program] STRING "Success" Success
[your_program] BANG_EQUAL != null
[your_program] STRING "Failure" Failure
[your_program] RIGHT_PAREN ) null
[your_program] BANG_EQUAL != null
[your_program] LEFT_PAREN ( null
[your_program] NUMBER 46 46.0
[your_program] GREATER_EQUAL >= null
[your_program] NUMBER 99 99.0
[your_program] RIGHT_PAREN ) null
[your_program] EOF  null
[tester::#KJ0] [test-4] ✓ 20 line(s) match on stdout
[tester::#KJ0] [test-4] ✓ Received exit code 0.
[tester::#KJ0] Test passed.

[tester::#EY7] Running tests for Stage #EY7 (Scanning: Identifiers)
[tester::#EY7] [test-1] Running test case: 1
[tester::#EY7] [test-1] Writing contents to ./test.lox:
[tester::#EY7] [test-1] [test.lox] bar baz
[tester::#EY7] [test-1] $ ./your_program.sh tokenize test.lox
[your_program] IDENTIFIER bar null
[your_program] IDENTIFIER baz null
[your_program] EOF  null
[tester::#EY7] [test-1] ✓ 3 line(s) match on stdout
[tester::#EY7] [test-1] ✓ Received exit code 0.
[tester::#EY7] [test-2] Running test case: 2
[tester::#EY7] [test-2] Writing contents to ./test.lox:
[tester::#EY7] [test-2] [test.lox] _1236az f00 world_ foo bar
[tester::#EY7] [test-2] $ ./your_program.sh tokenize test.lox
[your_program] IDENTIFIER _1236az null
[your_program] IDENTIFIER f00 null
[your_program] IDENTIFIER world_ null
[your_program] IDENTIFIER foo null
[your_program] IDENTIFIER bar null
[your_program] EOF  null
[tester::#EY7] [test-2] ✓ 6 line(s) match on stdout
[tester::#EY7] [test-2] ✓ Received exit code 0.
[tester::#EY7] [test-3] Running test case: 3
[tester::#EY7] [test-3] Writing contents to ./test.lox:
[tester::#EY7] [test-3] [test.lox] message = "Hello, World!"
[tester::#EY7] [test-3] [test.lox] number = 123
[tester::#EY7] [test-3] $ ./your_program.sh tokenize test.lox
[your_program] IDENTIFIER message null
[your_program] EQUAL = null
[your_program] STRING "Hello, World!" Hello, World!
[your_program] IDENTIFIER number null
[your_program] EQUAL = null
[your_program] NUMBER 123 123.0
[your_program] EOF  null
[tester::#EY7] [test-3] ✓ 7 line(s) match on stdout
[tester::#EY7] [test-3] ✓ Received exit code 0.
[tester::#EY7] [test-4] Running test case: 4
[tester::#EY7] [test-4] Writing contents to ./test.lox:
[tester::#EY7] [test-4] [test.lox] {
[tester::#EY7] [test-4] [test.lox] // This is a complex test case
[tester::#EY7] [test-4] [test.lox] str1 = "Test"
[tester::#EY7] [test-4] [test.lox] str2 = "Case"
[tester::#EY7] [test-4] [test.lox] num1 = 100
[tester::#EY7] [test-4] [test.lox] num2 = 200.00
[tester::#EY7] [test-4] [test.lox] result = (str1 == str2) != ((num1 + num2) >= 300)
[tester::#EY7] [test-4] [test.lox] }
[tester::#EY7] [test-4] $ ./your_program.sh tokenize test.lox
[your_program] LEFT_BRACE { null
[your_program] IDENTIFIER str1 null
[your_program] EQUAL = null
[your_program] STRING "Test" Test
[your_program] IDENTIFIER str2 null
[your_program] EQUAL = null
[your_program] STRING "Case" Case
[your_program] IDENTIFIER num1 null
[your_program] EQUAL = null
[your_program] NUMBER 100 100.0
[your_program] IDENTIFIER num2 null
[your_program] EQUAL = null
[your_program] NUMBER 200.00 200.0
[your_program] IDENTIFIER result null
[your_program] EQUAL = null
[your_program] LEFT_PAREN ( null
[your_program] IDENTIFIER str1 null
[your_program] EQUAL_EQUAL == null
[your_program] IDENTIFIER str2 null
[your_program] RIGHT_PAREN ) null
[your_program] BANG_EQUAL != null
[your_program] LEFT_PAREN ( null
[your_program] LEFT_PAREN ( null
[your_program] IDENTIFIER num1 null
[your_program] PLUS + null
[your_program] IDENTIFIER num2 null
[your_program] RIGHT_PAREN ) null
[your_program] GREATER_EQUAL >= null
[your_program] NUMBER 300 300.0
[your_program] RIGHT_PAREN ) null
[your_program] RIGHT_BRACE } null
[your_program] EOF  null
[your_program] comment: //This is a complex test case
[tester::#EY7] [test-4] ✓ 32 line(s) match on stdout
[tester::#EY7] [test-4] ✓ Received exit code 0.
[tester::#EY7] Test passed.

[tester::#PQ5] Running tests for Stage #PQ5 (Scanning: Reserved words)
[tester::#PQ5] [test-1] Running test case: 1
[tester::#PQ5] [test-1] Writing contents to ./test.lox:
[tester::#PQ5] [test-1] [test.lox] class
[tester::#PQ5] [test-1] $ ./your_program.sh tokenize test.lox
[your_program] CLASS class null
[your_program] EOF  null
[tester::#PQ5] [test-1] ✓ 2 line(s) match on stdout
[tester::#PQ5] [test-1] ✓ Received exit code 0.
[tester::#PQ5] [test-2] Running test case: 2
[tester::#PQ5] [test-2] Writing contents to ./test.lox:
[tester::#PQ5] [test-2] [test.lox] or class nil IF PRINT FOR CLASS fun if THIS OR true WHILE var TRUE print this VAR false for RETURN return AND else ELSE SUPER NIL FALSE while and super FUN
[tester::#PQ5] [test-2] $ ./your_program.sh tokenize test.lox
[your_program] OR or null
[your_program] CLASS class null
[your_program] NIL nil null
[your_program] IDENTIFIER IF null
[your_program] IDENTIFIER PRINT null
[your_program] IDENTIFIER FOR null
[your_program] IDENTIFIER CLASS null
[your_program] FUN fun null
[your_program] IF if null
[your_program] IDENTIFIER THIS null
[your_program] IDENTIFIER OR null
[your_program] TRUE true null
[your_program] IDENTIFIER WHILE null
[your_program] VAR var null
[your_program] IDENTIFIER TRUE null
[your_program] PRINT print null
[your_program] THIS this null
[your_program] IDENTIFIER VAR null
[your_program] FALSE false null
[your_program] FOR for null
[your_program] IDENTIFIER RETURN null
[your_program] RETURN return null
[your_program] IDENTIFIER AND null
[your_program] ELSE else null
[your_program] IDENTIFIER ELSE null
[your_program] IDENTIFIER SUPER null
[your_program] IDENTIFIER NIL null
[your_program] IDENTIFIER FALSE null
[your_program] WHILE while null
[your_program] AND and null
[your_program] SUPER super null
[your_program] IDENTIFIER FUN null
[your_program] EOF  null
[tester::#PQ5] [test-2] ✓ 33 line(s) match on stdout
[tester::#PQ5] [test-2] ✓ Received exit code 0.
[tester::#PQ5] [test-3] Running test case: 3
[tester::#PQ5] [test-3] Writing contents to ./test.lox:
[tester::#PQ5] [test-3] [test.lox] var greeting = "Hello"
[tester::#PQ5] [test-3] [test.lox] if (greeting == "Hello") {
[tester::#PQ5] [test-3] [test.lox]     return true
[tester::#PQ5] [test-3] [test.lox] } else {
[tester::#PQ5] [test-3] [test.lox]     return false
[tester::#PQ5] [test-3] [test.lox] }
[tester::#PQ5] [test-3] $ ./your_program.sh tokenize test.lox
[your_program] VAR var null
[your_program] IDENTIFIER greeting null
[your_program] EQUAL = null
[your_program] STRING "Hello" Hello
[your_program] IF if null
[your_program] LEFT_PAREN ( null
[your_program] IDENTIFIER greeting null
[your_program] EQUAL_EQUAL == null
[your_program] STRING "Hello" Hello
[your_program] RIGHT_PAREN ) null
[your_program] LEFT_BRACE { null
[your_program] RETURN return null
[your_program] TRUE true null
[your_program] RIGHT_BRACE } null
[your_program] ELSE else null
[your_program] LEFT_BRACE { null
[your_program] RETURN return null
[your_program] FALSE false null
[your_program] RIGHT_BRACE } null
[your_program] EOF  null
[tester::#PQ5] [test-3] ✓ 20 line(s) match on stdout
[tester::#PQ5] [test-3] ✓ Received exit code 0.
[tester::#PQ5] [test-4] Running test case: 4
[tester::#PQ5] [test-4] Writing contents to ./test.lox:
[tester::#PQ5] [test-4] [test.lox] var result = (a + b) > 7 or "Success" != "Failure" or x >= 5
[tester::#PQ5] [test-4] [test.lox] while (result) {
[tester::#PQ5] [test-4] [test.lox]     var counter = 0
[tester::#PQ5] [test-4] [test.lox]     counter = counter + 1
[tester::#PQ5] [test-4] [test.lox]     if (counter == 10) {
[tester::#PQ5] [test-4] [test.lox]         return nil
[tester::#PQ5] [test-4] [test.lox]     }
[tester::#PQ5] [test-4] [test.lox] }
[tester::#PQ5] [test-4] $ ./your_program.sh tokenize test.lox
[your_program] VAR var null
[your_program] IDENTIFIER result null
[your_program] EQUAL = null
[your_program] LEFT_PAREN ( null
[your_program] IDENTIFIER a null
[your_program] PLUS + null
[your_program] IDENTIFIER b null
[your_program] RIGHT_PAREN ) null
[your_program] GREATER > null
[your_program] NUMBER 7 7.0
[your_program] OR or null
[your_program] STRING "Success" Success
[your_program] BANG_EQUAL != null
[your_program] STRING "Failure" Failure
[your_program] OR or null
[your_program] IDENTIFIER x null
[your_program] GREATER_EQUAL >= null
[your_program] NUMBER 5 5.0
[your_program] WHILE while null
[your_program] LEFT_PAREN ( null
[your_program] IDENTIFIER result null
[your_program] RIGHT_PAREN ) null
[your_program] LEFT_BRACE { null
[your_program] VAR var null
[your_program] IDENTIFIER counter null
[your_program] EQUAL = null
[your_program] NUMBER 0 0.0
[your_program] IDENTIFIER counter null
[your_program] EQUAL = null
[your_program] IDENTIFIER counter null
[your_program] PLUS + null
[your_program] NUMBER 1 1.0
[your_program] IF if null
[your_program] LEFT_PAREN ( null
[your_program] IDENTIFIER counter null
[your_program] EQUAL_EQUAL == null
[your_program] NUMBER 10 10.0
[your_program] RIGHT_PAREN ) null
[your_program] LEFT_BRACE { null
[your_program] RETURN return null
[your_program] NIL nil null
[your_program] RIGHT_BRACE } null
[your_program] RIGHT_BRACE } null
[your_program] EOF  null
[tester::#PQ5] [test-4] ✓ 44 line(s) match on stdout
[tester::#PQ5] [test-4] ✓ Received exit code 0.
[tester::#PQ5] Test passed.

[tester::#SC2] Running tests for Stage #SC2 (Parsing Expressions - Booleans & Nil)
[tester::#SC2] [test-1] Running test case: 1
[tester::#SC2] [test-1] Writing contents to ./test.lox:
[tester::#SC2] [test-1] [test.lox] true
[tester::#SC2] [test-1] $ ./your_program.sh parse test.lox
[your_program] true
[tester::#SC2] [test-1] ✓ 1 line(s) match on stdout
[tester::#SC2] [test-1] ✓ Received exit code 0.
[tester::#SC2] [test-2] Running test case: 2
[tester::#SC2] [test-2] Writing contents to ./test.lox:
[tester::#SC2] [test-2] [test.lox] false
[tester::#SC2] [test-2] $ ./your_program.sh parse test.lox
[your_program] false
[tester::#SC2] [test-2] ✓ 1 line(s) match on stdout
[tester::#SC2] [test-2] ✓ Received exit code 0.
[tester::#SC2] [test-3] Running test case: 3
[tester::#SC2] [test-3] Writing contents to ./test.lox:
[tester::#SC2] [test-3] [test.lox] nil
[tester::#SC2] [test-3] $ ./your_program.sh parse test.lox
[your_program] nil
[tester::#SC2] [test-3] ✓ 1 line(s) match on stdout
[tester::#SC2] [test-3] ✓ Received exit code 0.
[tester::#SC2] Test passed.

[tester::#RA8] Running tests for Stage #RA8 (Parsing Expressions - Number literals)
[tester::#RA8] [test-1] Running test case: 1
[tester::#RA8] [test-1] Writing contents to ./test.lox:
[tester::#RA8] [test-1] [test.lox] 29
[tester::#RA8] [test-1] $ ./your_program.sh parse test.lox
[your_program] 29.0
[tester::#RA8] [test-1] ✓ 1 line(s) match on stdout
[tester::#RA8] [test-1] ✓ Received exit code 0.
[tester::#RA8] [test-2] Running test case: 2
[tester::#RA8] [test-2] Writing contents to ./test.lox:
[tester::#RA8] [test-2] [test.lox] 0.0
[tester::#RA8] [test-2] $ ./your_program.sh parse test.lox
[your_program] 0.0
[tester::#RA8] [test-2] ✓ 1 line(s) match on stdout
[tester::#RA8] [test-2] ✓ Received exit code 0.
[tester::#RA8] [test-3] Running test case: 3
[tester::#RA8] [test-3] Writing contents to ./test.lox:
[tester::#RA8] [test-3] [test.lox] 61.37
[tester::#RA8] [test-3] $ ./your_program.sh parse test.lox
[your_program] 61.37
[tester::#RA8] [test-3] ✓ 1 line(s) match on stdout
[tester::#RA8] [test-3] ✓ Received exit code 0.
[tester::#RA8] Test passed.

[tester::#TH5] Running tests for Stage #TH5 (Parsing Expressions - String literals)
[tester::#TH5] [test-1] Running test case: 1
[tester::#TH5] [test-1] Writing contents to ./test.lox:
[tester::#TH5] [test-1] [test.lox] "world hello"
[tester::#TH5] [test-1] $ ./your_program.sh parse test.lox
[your_program] world hello
[tester::#TH5] [test-1] ✓ 1 line(s) match on stdout
[tester::#TH5] [test-1] ✓ Received exit code 0.
[tester::#TH5] [test-2] Running test case: 2
[tester::#TH5] [test-2] Writing contents to ./test.lox:
[tester::#TH5] [test-2] [test.lox] "'hello'"
[tester::#TH5] [test-2] $ ./your_program.sh parse test.lox
[your_program] 'hello'
[tester::#TH5] [test-2] ✓ 1 line(s) match on stdout
[tester::#TH5] [test-2] ✓ Received exit code 0.
[tester::#TH5] [test-3] Running test case: 3
[tester::#TH5] [test-3] Writing contents to ./test.lox:
[tester::#TH5] [test-3] [test.lox] "// bar"
[tester::#TH5] [test-3] $ ./your_program.sh parse test.lox
[your_program] // bar
[tester::#TH5] [test-3] ✓ 1 line(s) match on stdout
[tester::#TH5] [test-3] ✓ Received exit code 0.
[tester::#TH5] [test-4] Running test case: 4
[tester::#TH5] [test-4] Writing contents to ./test.lox:
[tester::#TH5] [test-4] [test.lox] "25"
[tester::#TH5] [test-4] $ ./your_program.sh parse test.lox
[your_program] 25
[tester::#TH5] [test-4] ✓ 1 line(s) match on stdout
[tester::#TH5] [test-4] ✓ Received exit code 0.
[tester::#TH5] Test passed.

[tester::#XE6] Running tests for Stage #XE6 (Parsing Expressions - Parentheses)
[tester::#XE6] [test-1] Running test case: 1
[tester::#XE6] [test-1] Writing contents to ./test.lox:
[tester::#XE6] [test-1] [test.lox] ("foo")
[tester::#XE6] [test-1] $ ./your_program.sh parse test.lox
[your_program] (group foo)
[tester::#XE6] [test-1] ✓ 1 line(s) match on stdout
[tester::#XE6] [test-1] ✓ Received exit code 0.
[tester::#XE6] [test-2] Running test case: 2
[tester::#XE6] [test-2] Writing contents to ./test.lox:
[tester::#XE6] [test-2] [test.lox] ((true))
[tester::#XE6] [test-2] $ ./your_program.sh parse test.lox
[your_program] (group (group true))
[tester::#XE6] [test-2] ✓ 1 line(s) match on stdout
[tester::#XE6] [test-2] ✓ Received exit code 0.
[tester::#XE6] [test-3] Running test case: 3
[tester::#XE6] [test-3] Writing contents to ./test.lox:
[tester::#XE6] [test-3] [test.lox] (nil)
[tester::#XE6] [test-3] $ ./your_program.sh parse test.lox
[your_program] (group nil)
[tester::#XE6] [test-3] ✓ 1 line(s) match on stdout
[tester::#XE6] [test-3] ✓ Received exit code 0.
[tester::#XE6] [test-4] Running test case: 4
[tester::#XE6] [test-4] Writing contents to ./test.lox:
[tester::#XE6] [test-4] [test.lox] (17.91)
[tester::#XE6] [test-4] $ ./your_program.sh parse test.lox
[your_program] (group 17.91)
[tester::#XE6] [test-4] ✓ 1 line(s) match on stdout
[tester::#XE6] [test-4] ✓ Received exit code 0.
[tester::#XE6] Test passed.

[tester::#MQ1] Running tests for Stage #MQ1 (Parsing Expressions - Unary Operators)
[tester::#MQ1] [test-1] Running test case: 1
[tester::#MQ1] [test-1] Writing contents to ./test.lox:
[tester::#MQ1] [test-1] [test.lox] !true
[tester::#MQ1] [test-1] $ ./your_program.sh parse test.lox
[your_program] (! true)
[tester::#MQ1] [test-1] ✓ 1 line(s) match on stdout
[tester::#MQ1] [test-1] ✓ Received exit code 0.
[tester::#MQ1] [test-2] Running test case: 2
[tester::#MQ1] [test-2] Writing contents to ./test.lox:
[tester::#MQ1] [test-2] [test.lox] -48
[tester::#MQ1] [test-2] $ ./your_program.sh parse test.lox
[your_program] (- 48.0)
[tester::#MQ1] [test-2] ✓ 1 line(s) match on stdout
[tester::#MQ1] [test-2] ✓ Received exit code 0.
[tester::#MQ1] [test-3] Running test case: 3
[tester::#MQ1] [test-3] Writing contents to ./test.lox:
[tester::#MQ1] [test-3] [test.lox] !!true
[tester::#MQ1] [test-3] $ ./your_program.sh parse test.lox
[your_program] (! (! true))
[tester::#MQ1] [test-3] ✓ 1 line(s) match on stdout
[tester::#MQ1] [test-3] ✓ Received exit code 0.
[tester::#MQ1] [test-4] Running test case: 4
[tester::#MQ1] [test-4] Writing contents to ./test.lox:
[tester::#MQ1] [test-4] [test.lox] (!!(true))
[tester::#MQ1] [test-4] $ ./your_program.sh parse test.lox
[your_program] (group (! (! (group true))))
[tester::#MQ1] [test-4] ✓ 1 line(s) match on stdout
[tester::#MQ1] [test-4] ✓ Received exit code 0.
[tester::#MQ1] Test passed.

[tester::#WA9] Running tests for Stage #WA9 (Parsing Expressions - Arithmetic operators (1/2))
[tester::#WA9] [test-1] Running test case: 1
[tester::#WA9] [test-1] Writing contents to ./test.lox:
[tester::#WA9] [test-1] [test.lox] 96 * 12 / 94
[tester::#WA9] [test-1] $ ./your_program.sh parse test.lox
[your_program] (/ (* 96.0 12.0) 94.0)
[tester::#WA9] [test-1] ✓ 1 line(s) match on stdout
[tester::#WA9] [test-1] ✓ Received exit code 0.
[tester::#WA9] [test-2] Running test case: 2
[tester::#WA9] [test-2] Writing contents to ./test.lox:
[tester::#WA9] [test-2] [test.lox] 33 / 32 / 12
[tester::#WA9] [test-2] $ ./your_program.sh parse test.lox
[your_program] (/ (/ 33.0 32.0) 12.0)
[tester::#WA9] [test-2] ✓ 1 line(s) match on stdout
[tester::#WA9] [test-2] ✓ Received exit code 0.
[tester::#WA9] [test-3] Running test case: 3
[tester::#WA9] [test-3] Writing contents to ./test.lox:
[tester::#WA9] [test-3] [test.lox] 56 * 55 * 81 / 15
[tester::#WA9] [test-3] $ ./your_program.sh parse test.lox
[your_program] (/ (* (* 56.0 55.0) 81.0) 15.0)
[tester::#WA9] [test-3] ✓ 1 line(s) match on stdout
[tester::#WA9] [test-3] ✓ Received exit code 0.
[tester::#WA9] [test-4] Running test case: 4
[tester::#WA9] [test-4] Writing contents to ./test.lox:
[tester::#WA9] [test-4] [test.lox] (54 * -46 / (54 * 46))
[tester::#WA9] [test-4] $ ./your_program.sh parse test.lox
[your_program] (group (/ (* 54.0 (- 46.0)) (group (* 54.0 46.0))))
[tester::#WA9] [test-4] ✓ 1 line(s) match on stdout
[tester::#WA9] [test-4] ✓ Received exit code 0.
[tester::#WA9] Test passed.

[tester::#YF2] Running tests for Stage #YF2 (Parsing Expressions - Arithmetic operators (2/2))
[tester::#YF2] [test-1] Running test case: 1
[tester::#YF2] [test-1] Writing contents to ./test.lox:
[tester::#YF2] [test-1] [test.lox] "hello" + "world"
[tester::#YF2] [test-1] $ ./your_program.sh parse test.lox
[your_program] (+ hello world)
[tester::#YF2] [test-1] ✓ 1 line(s) match on stdout
[tester::#YF2] [test-1] ✓ Received exit code 0.
[tester::#YF2] [test-2] Running test case: 2
[tester::#YF2] [test-2] Writing contents to ./test.lox:
[tester::#YF2] [test-2] [test.lox] 85 - 83 * 58 - 89
[tester::#YF2] [test-2] $ ./your_program.sh parse test.lox
[your_program] (- (- 85.0 (* 83.0 58.0)) 89.0)
[tester::#YF2] [test-2] ✓ 1 line(s) match on stdout
[tester::#YF2] [test-2] ✓ Received exit code 0.
[tester::#YF2] [test-3] Running test case: 3
[tester::#YF2] [test-3] Writing contents to ./test.lox:
[tester::#YF2] [test-3] [test.lox] 63 + 92 - 93 / 61
[tester::#YF2] [test-3] $ ./your_program.sh parse test.lox
[your_program] (- (+ 63.0 92.0) (/ 93.0 61.0))
[tester::#YF2] [test-3] ✓ 1 line(s) match on stdout
[tester::#YF2] [test-3] ✓ Received exit code 0.
[tester::#YF2] [test-4] Running test case: 4
[tester::#YF2] [test-4] Writing contents to ./test.lox:
[tester::#YF2] [test-4] [test.lox] (-27 + 88) * (20 * 62) / (80 + 11)
[tester::#YF2] [test-4] $ ./your_program.sh parse test.lox
[your_program] (/ (* (group (+ (- 27.0) 88.0)) (group (* 20.0 62.0))) (group (+ 80.0 11.0)))
[tester::#YF2] [test-4] ✓ 1 line(s) match on stdout
[tester::#YF2] [test-4] ✓ Received exit code 0.
[tester::#YF2] Test passed.

[tester::#UH4] Running tests for Stage #UH4 (Parsing Expressions - Comparison operators)
[tester::#UH4] [test-1] Running test case: 1
[tester::#UH4] [test-1] Writing contents to ./test.lox:
[tester::#UH4] [test-1] [test.lox] 42 > 18
[tester::#UH4] [test-1] $ ./your_program.sh parse test.lox
[your_program] (> 42.0 18.0)
[tester::#UH4] [test-1] ✓ 1 line(s) match on stdout
[tester::#UH4] [test-1] ✓ Received exit code 0.
[tester::#UH4] [test-2] Running test case: 2
[tester::#UH4] [test-2] Writing contents to ./test.lox:
[tester::#UH4] [test-2] [test.lox] 24 <= 66
[tester::#UH4] [test-2] $ ./your_program.sh parse test.lox
[your_program] (<= 24.0 66.0)
[tester::#UH4] [test-2] ✓ 1 line(s) match on stdout
[tester::#UH4] [test-2] ✓ Received exit code 0.
[tester::#UH4] [test-3] Running test case: 3
[tester::#UH4] [test-3] Writing contents to ./test.lox:
[tester::#UH4] [test-3] [test.lox] 42 < 66 < 90
[tester::#UH4] [test-3] $ ./your_program.sh parse test.lox
[your_program] (< (< 42.0 66.0) 90.0)
[tester::#UH4] [test-3] ✓ 1 line(s) match on stdout
[tester::#UH4] [test-3] ✓ Received exit code 0.
[tester::#UH4] [test-4] Running test case: 4
[tester::#UH4] [test-4] Writing contents to ./test.lox:
[tester::#UH4] [test-4] [test.lox] (48 - 72) >= -(74 / 86 + 13)
[tester::#UH4] [test-4] $ ./your_program.sh parse test.lox
[your_program] (>= (group (- 48.0 72.0)) (- (group (+ (/ 74.0 86.0) 13.0))))
[tester::#UH4] [test-4] ✓ 1 line(s) match on stdout
[tester::#UH4] [test-4] ✓ Received exit code 0.
[tester::#UH4] Test passed.

[tester::#HT8] Running tests for Stage #HT8 (Parsing Expressions - Equality operators)
[tester::#HT8] [test-1] Running test case: 1
[tester::#HT8] [test-1] Writing contents to ./test.lox:
[tester::#HT8] [test-1] [test.lox] "bar"!="foo"
[tester::#HT8] [test-1] $ ./your_program.sh parse test.lox
[your_program] (!= bar foo)
[tester::#HT8] [test-1] ✓ 1 line(s) match on stdout
[tester::#HT8] [test-1] ✓ Received exit code 0.
[tester::#HT8] [test-2] Running test case: 2
[tester::#HT8] [test-2] Writing contents to ./test.lox:
[tester::#HT8] [test-2] [test.lox] "world" == "world"
[tester::#HT8] [test-2] $ ./your_program.sh parse test.lox
[your_program] (== world world)
[tester::#HT8] [test-2] ✓ 1 line(s) match on stdout
[tester::#HT8] [test-2] ✓ Received exit code 0.
[tester::#HT8] [test-3] Running test case: 3
[tester::#HT8] [test-3] Writing contents to ./test.lox:
[tester::#HT8] [test-3] [test.lox] 18 == 92
[tester::#HT8] [test-3] $ ./your_program.sh parse test.lox
[your_program] (== 18.0 92.0)
[tester::#HT8] [test-3] ✓ 1 line(s) match on stdout
[tester::#HT8] [test-3] ✓ Received exit code 0.
[tester::#HT8] [test-4] Running test case: 4
[tester::#HT8] [test-4] Writing contents to ./test.lox:
[tester::#HT8] [test-4] [test.lox] (40 != 16) == ((-21 + 35) >= (18 * 92))
[tester::#HT8] [test-4] $ ./your_program.sh parse test.lox
[your_program] (== (group (!= 40.0 16.0)) (group (>= (group (+ (- 21.0) 35.0)) (group (* 18.0 92.0)))))
[tester::#HT8] [test-4] ✓ 1 line(s) match on stdout
[tester::#HT8] [test-4] ✓ Received exit code 0.
[tester::#HT8] Test passed.

[tester::#WZ8] Running tests for Stage #WZ8 (Parsing Expressions - Syntactic errors)
[tester::#WZ8] [test-1] Running test case: 1
[tester::#WZ8] [test-1] Writing contents to ./test.lox:
[tester::#WZ8] [test-1] [test.lox] "world
[tester::#WZ8] [test-1] $ ./your_program.sh parse test.lox
[your_program] [line 1] Error: Unterminated string.
[tester::#WZ8] [test-1] ✓ 1 line(s) match on stdout
[tester::#WZ8] [test-1] ✓ Received exit code 65.
[tester::#WZ8] [test-2] Running test case: 2
[tester::#WZ8] [test-2] Writing contents to ./test.lox:
[tester::#WZ8] [test-2] [test.lox] (foo
[tester::#WZ8] [test-2] $ ./your_program.sh parse test.lox
[your_program] unclosed group expression
[tester::#WZ8] [test-2] ✓ 1 line(s) match on stdout
[tester::#WZ8] [test-2] ✓ Received exit code 65.
[tester::#WZ8] [test-3] Running test case: 3
[tester::#WZ8] [test-3] Writing contents to ./test.lox:
[tester::#WZ8] [test-3] [test.lox] (43 +)
[tester::#WZ8] [test-3] $ ./your_program.sh parse test.lox
[your_program] unexpected token RIGHT_PAREN
[tester::#WZ8] [test-3] ✓ 1 line(s) match on stdout
[tester::#WZ8] [test-3] ✓ Received exit code 65.
[tester::#WZ8] [test-4] Running test case: 4
[tester::#WZ8] [test-4] Writing contents to ./test.lox:
[tester::#WZ8] [test-4] [test.lox] +
[tester::#WZ8] [test-4] $ ./your_program.sh parse test.lox
[your_program] unexpected token PLUS
[tester::#WZ8] [test-4] ✓ 1 line(s) match on stdout
[tester::#WZ8] [test-4] ✓ Received exit code 65.
[tester::#WZ8] Test passed.

[tester::#IZ6] Running tests for Stage #IZ6 (Evaluating Expressions - Literals: Booleans & Nil)
[tester::#IZ6] [test-1] Running test case: 1
[tester::#IZ6] [test-1] Writing contents to ./test.lox:
[tester::#IZ6] [test-1] [test.lox] true
[tester::#IZ6] [test-1] $ ./your_program.sh evaluate test.lox
[your_program] true
[tester::#IZ6] [test-1] ✓ 1 line(s) match on stdout
[tester::#IZ6] [test-1] ✓ Received exit code 0.
[tester::#IZ6] [test-2] Running test case: 2
[tester::#IZ6] [test-2] Writing contents to ./test.lox:
[tester::#IZ6] [test-2] [test.lox] false
[tester::#IZ6] [test-2] $ ./your_program.sh evaluate test.lox
[your_program] false
[tester::#IZ6] [test-2] ✓ 1 line(s) match on stdout
[tester::#IZ6] [test-2] ✓ Received exit code 0.
[tester::#IZ6] [test-3] Running test case: 3
[tester::#IZ6] [test-3] Writing contents to ./test.lox:
[tester::#IZ6] [test-3] [test.lox] nil
[tester::#IZ6] [test-3] $ ./your_program.sh evaluate test.lox
[your_program] nil
[tester::#IZ6] [test-3] ✓ 1 line(s) match on stdout
[tester::#IZ6] [test-3] ✓ Received exit code 0.
[tester::#IZ6] Test passed.

[tester::#LV1] Running tests for Stage #LV1 (Evaluating Expressions - Literals: Strings & Numbers)
[tester::#LV1] [test-1] Running test case: 1
[tester::#LV1] [test-1] Writing contents to ./test.lox:
[tester::#LV1] [test-1] [test.lox] 21
[tester::#LV1] [test-1] $ ./your_program.sh evaluate test.lox
[your_program] 21
[tester::#LV1] [test-1] ✓ 1 line(s) match on stdout
[tester::#LV1] [test-1] ✓ Received exit code 0.
[tester::#LV1] [test-2] Running test case: 2
[tester::#LV1] [test-2] Writing contents to ./test.lox:
[tester::#LV1] [test-2] [test.lox] 24.77
[tester::#LV1] [test-2] $ ./your_program.sh evaluate test.lox
[your_program] 24.77
[tester::#LV1] [test-2] ✓ 1 line(s) match on stdout
[tester::#LV1] [test-2] ✓ Received exit code 0.
[tester::#LV1] [test-3] Running test case: 3
[tester::#LV1] [test-3] Writing contents to ./test.lox:
[tester::#LV1] [test-3] [test.lox] "foo quz"
[tester::#LV1] [test-3] $ ./your_program.sh evaluate test.lox
[your_program] foo quz
[tester::#LV1] [test-3] ✓ 1 line(s) match on stdout
[tester::#LV1] [test-3] ✓ Received exit code 0.
[tester::#LV1] [test-4] Running test case: 4
[tester::#LV1] [test-4] Writing contents to ./test.lox:
[tester::#LV1] [test-4] [test.lox] "92"
[tester::#LV1] [test-4] $ ./your_program.sh evaluate test.lox
[your_program] 92
[tester::#LV1] [test-4] ✓ 1 line(s) match on stdout
[tester::#LV1] [test-4] ✓ Received exit code 0.
[tester::#LV1] Test passed.

[tester::#OQ9] Running tests for Stage #OQ9 (Evaluating Expressions - Parentheses)
[tester::#OQ9] [test-1] Running test case: 1
[tester::#OQ9] [test-1] Writing contents to ./test.lox:
[tester::#OQ9] [test-1] [test.lox] (true)
[tester::#OQ9] [test-1] $ ./your_program.sh evaluate test.lox
[your_program] true
[tester::#OQ9] [test-1] ✓ 1 line(s) match on stdout
[tester::#OQ9] [test-1] ✓ Received exit code 0.
[tester::#OQ9] [test-2] Running test case: 2
[tester::#OQ9] [test-2] Writing contents to ./test.lox:
[tester::#OQ9] [test-2] [test.lox] (92)
[tester::#OQ9] [test-2] $ ./your_program.sh evaluate test.lox
[your_program] 92
[tester::#OQ9] [test-2] ✓ 1 line(s) match on stdout
[tester::#OQ9] [test-2] ✓ Received exit code 0.
[tester::#OQ9] [test-3] Running test case: 3
[tester::#OQ9] [test-3] Writing contents to ./test.lox:
[tester::#OQ9] [test-3] [test.lox] ("hello world")
[tester::#OQ9] [test-3] $ ./your_program.sh evaluate test.lox
[your_program] hello world
[tester::#OQ9] [test-3] ✓ 1 line(s) match on stdout
[tester::#OQ9] [test-3] ✓ Received exit code 0.
[tester::#OQ9] [test-4] Running test case: 4
[tester::#OQ9] [test-4] Writing contents to ./test.lox:
[tester::#OQ9] [test-4] [test.lox] ((false))
[tester::#OQ9] [test-4] $ ./your_program.sh evaluate test.lox
[your_program] false
[tester::#OQ9] [test-4] ✓ 1 line(s) match on stdout
[tester::#OQ9] [test-4] ✓ Received exit code 0.
[tester::#OQ9] Test passed.

[tester::#DC1] Running tests for Stage #DC1 (Evaluating Expressions - Unary Operators: Negation & Not)
[tester::#DC1] [test-1] Running test case: 1
[tester::#DC1] [test-1] Writing contents to ./test.lox:
[tester::#DC1] [test-1] [test.lox] -79
[tester::#DC1] [test-1] $ ./your_program.sh evaluate test.lox
[your_program] -79
[tester::#DC1] [test-1] ✓ 1 line(s) match on stdout
[tester::#DC1] [test-1] ✓ Received exit code 0.
[tester::#DC1] [test-2] Running test case: 2
[tester::#DC1] [test-2] Writing contents to ./test.lox:
[tester::#DC1] [test-2] [test.lox] !false
[tester::#DC1] [test-2] $ ./your_program.sh evaluate test.lox
[your_program] true
[tester::#DC1] [test-2] ✓ 1 line(s) match on stdout
[tester::#DC1] [test-2] ✓ Received exit code 0.
[tester::#DC1] [test-3] Running test case: 3
[tester::#DC1] [test-3] Writing contents to ./test.lox:
[tester::#DC1] [test-3] [test.lox] !nil
[tester::#DC1] [test-3] $ ./your_program.sh evaluate test.lox
[your_program] true
[tester::#DC1] [test-3] ✓ 1 line(s) match on stdout
[tester::#DC1] [test-3] ✓ Received exit code 0.
[tester::#DC1] [test-4] Running test case: 4
[tester::#DC1] [test-4] Writing contents to ./test.lox:
[tester::#DC1] [test-4] [test.lox] (!!18)
[tester::#DC1] [test-4] $ ./your_program.sh evaluate test.lox
[your_program] true
[tester::#DC1] [test-4] ✓ 1 line(s) match on stdout
[tester::#DC1] [test-4] ✓ Received exit code 0.
[tester::#DC1] Test passed.

[tester::#BP3] Running tests for Stage #BP3 (Evaluating Expressions - Arithmetic Operators (1/2))
[tester::#BP3] [test-1] Running test case: 1
[tester::#BP3] [test-1] Writing contents to ./test.lox:
[tester::#BP3] [test-1] [test.lox] 15 * 42
[tester::#BP3] [test-1] $ ./your_program.sh evaluate test.lox
[your_program] 630
[tester::#BP3] [test-1] ✓ 1 line(s) match on stdout
[tester::#BP3] [test-1] ✓ Received exit code 0.
[tester::#BP3] [test-2] Running test case: 2
[tester::#BP3] [test-2] Writing contents to ./test.lox:
[tester::#BP3] [test-2] [test.lox] 52 / 5
[tester::#BP3] [test-2] $ ./your_program.sh evaluate test.lox
[your_program] 10.4
[tester::#BP3] [test-2] ✓ 1 line(s) match on stdout
[tester::#BP3] [test-2] ✓ Received exit code 0.
[tester::#BP3] [test-3] Running test case: 3
[tester::#BP3] [test-3] Writing contents to ./test.lox:
[tester::#BP3] [test-3] [test.lox] 7 * 4 / 7 / 1
[tester::#BP3] [test-3] $ ./your_program.sh evaluate test.lox
[your_program] 4
[tester::#BP3] [test-3] ✓ 1 line(s) match on stdout
[tester::#BP3] [test-3] ✓ Received exit code 0.
[tester::#BP3] [test-4] Running test case: 4
[tester::#BP3] [test-4] Writing contents to ./test.lox:
[tester::#BP3] [test-4] [test.lox] (18 * 4 / (3 * 6))
[tester::#BP3] [test-4] $ ./your_program.sh evaluate test.lox
[your_program] 4
[tester::#BP3] [test-4] ✓ 1 line(s) match on stdout
[tester::#BP3] [test-4] ✓ Received exit code 0.
[tester::#BP3] Test passed.

[tester::#JY2] Running tests for Stage #JY2 (Evaluating Expressions - Arithmetic Operators (2/2))
[tester::#JY2] [test-1] Running test case: 1
[tester::#JY2] [test-1] Writing contents to ./test.lox:
[tester::#JY2] [test-1] [test.lox] 39 - 46
[tester::#JY2] [test-1] $ ./your_program.sh evaluate test.lox
[your_program] -7
[tester::#JY2] [test-1] ✓ 1 line(s) match on stdout
[tester::#JY2] [test-1] ✓ Received exit code 0.
[tester::#JY2] [test-2] Running test case: 2
[tester::#JY2] [test-2] Writing contents to ./test.lox:
[tester::#JY2] [test-2] [test.lox] 86 + 96 - 63
[tester::#JY2] [test-2] $ ./your_program.sh evaluate test.lox
[your_program] 119
[tester::#JY2] [test-2] ✓ 1 line(s) match on stdout
[tester::#JY2] [test-2] ✓ Received exit code 0.
[tester::#JY2] [test-3] Running test case: 3
[tester::#JY2] [test-3] Writing contents to ./test.lox:
[tester::#JY2] [test-3] [test.lox] 81 + 62 - (-(68 - 63))
[tester::#JY2] [test-3] $ ./your_program.sh evaluate test.lox
[your_program] 148
[tester::#JY2] [test-3] ✓ 1 line(s) match on stdout
[tester::#JY2] [test-3] ✓ Received exit code 0.
[tester::#JY2] [test-4] Running test case: 4
[tester::#JY2] [test-4] Writing contents to ./test.lox:
[tester::#JY2] [test-4] [test.lox] (-94 + 94) * (16 * 39) / (1 + 4)
[tester::#JY2] [test-4] $ ./your_program.sh evaluate test.lox
[your_program] 0
[tester::#JY2] [test-4] ✓ 1 line(s) match on stdout
[tester::#JY2] [test-4] ✓ Received exit code 0.
[tester::#JY2] Test passed.

[tester::#JX8] Running tests for Stage #JX8 (Evaluating Expressions - String Concatenation)
[tester::#JX8] [test-1] Running test case: 1
[tester::#JX8] [test-1] Writing contents to ./test.lox:
[tester::#JX8] [test-1] [test.lox] "quz" + "hello"
[tester::#JX8] [test-1] $ ./your_program.sh evaluate test.lox
[your_program] quzhello
[tester::#JX8] [test-1] ✓ 1 line(s) match on stdout
[tester::#JX8] [test-1] ✓ Received exit code 0.
[tester::#JX8] [test-2] Running test case: 2
[tester::#JX8] [test-2] Writing contents to ./test.lox:
[tester::#JX8] [test-2] [test.lox] "quz" + "92"
[tester::#JX8] [test-2] $ ./your_program.sh evaluate test.lox
[your_program] quz92
[tester::#JX8] [test-2] ✓ 1 line(s) match on stdout
[tester::#JX8] [test-2] ✓ Received exit code 0.
[tester::#JX8] [test-3] Running test case: 3
[tester::#JX8] [test-3] Writing contents to ./test.lox:
[tester::#JX8] [test-3] [test.lox] "foo" + "foo" + "foo"
[tester::#JX8] [test-3] $ ./your_program.sh evaluate test.lox
[your_program] foofoofoo
[tester::#JX8] [test-3] ✓ 1 line(s) match on stdout
[tester::#JX8] [test-3] ✓ Received exit code 0.
[tester::#JX8] [test-4] Running test case: 4
[tester::#JX8] [test-4] Writing contents to ./test.lox:
[tester::#JX8] [test-4] [test.lox] ("hello" + "bar") + ("hello" + "quz")
[tester::#JX8] [test-4] $ ./your_program.sh evaluate test.lox
[your_program] hellobarhelloquz
[tester::#JX8] [test-4] ✓ 1 line(s) match on stdout
[tester::#JX8] [test-4] ✓ Received exit code 0.
[tester::#JX8] Test passed.

[tester::#ET4] Running tests for Stage #ET4 (Evaluating Expressions - Relational Operators)
[tester::#ET4] [test-1] Running test case: 1
[tester::#ET4] [test-1] Writing contents to ./test.lox:
[tester::#ET4] [test-1] [test.lox] 70 > -147
[tester::#ET4] [test-1] $ ./your_program.sh evaluate test.lox
[your_program] true
[tester::#ET4] [test-1] ✓ 1 line(s) match on stdout
[tester::#ET4] [test-1] ✓ Received exit code 0.
[tester::#ET4] [test-2] Running test case: 2
[tester::#ET4] [test-2] Writing contents to ./test.lox:
[tester::#ET4] [test-2] [test.lox] 70 <= 245
[tester::#ET4] [test-2] $ ./your_program.sh evaluate test.lox
[your_program] true
[tester::#ET4] [test-2] ✓ 1 line(s) match on stdout
[tester::#ET4] [test-2] ✓ Received exit code 0.
[tester::#ET4] [test-3] Running test case: 3
[tester::#ET4] [test-3] Writing contents to ./test.lox:
[tester::#ET4] [test-3] [test.lox] 98 >= 98
[tester::#ET4] [test-3] $ ./your_program.sh evaluate test.lox
[your_program] true
[tester::#ET4] [test-3] ✓ 1 line(s) match on stdout
[tester::#ET4] [test-3] ✓ Received exit code 0.
[tester::#ET4] [test-4] Running test case: 4
[tester::#ET4] [test-4] Writing contents to ./test.lox:
[tester::#ET4] [test-4] [test.lox] (77 - 53) >= -(140 / 70 + 12)
[tester::#ET4] [test-4] $ ./your_program.sh evaluate test.lox
[your_program] true
[tester::#ET4] [test-4] ✓ 1 line(s) match on stdout
[tester::#ET4] [test-4] ✓ Received exit code 0.
[tester::#ET4] Test passed.

[tester::#HW7] Running tests for Stage #HW7 (Evaluating Expressions - Equality Operators)
[tester::#HW7] [test-1] Running test case: 1
[tester::#HW7] [test-1] Writing contents to ./test.lox:
[tester::#HW7] [test-1] [test.lox] "foo" != "bar"
[tester::#HW7] [test-1] $ ./your_program.sh evaluate test.lox
[your_program] true
[tester::#HW7] [test-1] ✓ 1 line(s) match on stdout
[tester::#HW7] [test-1] ✓ Received exit code 0.
[tester::#HW7] [test-2] Running test case: 2
[tester::#HW7] [test-2] Writing contents to ./test.lox:
[tester::#HW7] [test-2] [test.lox] "foo" == "foo"
[tester::#HW7] [test-2] $ ./your_program.sh evaluate test.lox
[your_program] true
[tester::#HW7] [test-2] ✓ 1 line(s) match on stdout
[tester::#HW7] [test-2] ✓ Received exit code 0.
[tester::#HW7] [test-3] Running test case: 3
[tester::#HW7] [test-3] Writing contents to ./test.lox:
[tester::#HW7] [test-3] [test.lox] 19 == "19"
[tester::#HW7] [test-3] $ ./your_program.sh evaluate test.lox
[your_program] false
[tester::#HW7] [test-3] ✓ 1 line(s) match on stdout
[tester::#HW7] [test-3] ✓ Received exit code 0.
[tester::#HW7] [test-4] Running test case: 4
[tester::#HW7] [test-4] Writing contents to ./test.lox:
[tester::#HW7] [test-4] [test.lox] 111 == (81 + 30)
[tester::#HW7] [test-4] $ ./your_program.sh evaluate test.lox
[your_program] true
[tester::#HW7] [test-4] ✓ 1 line(s) match on stdout
[tester::#HW7] [test-4] ✓ Received exit code 0.
[tester::#HW7] Test passed.

[tester::#GJ9] Running tests for Stage #GJ9 (Evaluating Expressions - Runtime Errors: Unary Operators)
[tester::#GJ9] [test-1] Running test case: 1
[tester::#GJ9] [test-1] Writing contents to ./test.lox:
[tester::#GJ9] [test-1] [test.lox] -"baz"
[tester::#GJ9] [test-1] $ ./your_program.sh evaluate test.lox
[tester::#GJ9] [test-1] ✓ 1 line(s) match on stdout
[tester::#GJ9] [test-1] ✓ Received exit code 70.
[tester::#GJ9] [test-2] Running test case: 2
[tester::#GJ9] [test-2] Writing contents to ./test.lox:
[tester::#GJ9] [test-2] [test.lox] -true
[tester::#GJ9] [test-2] $ ./your_program.sh evaluate test.lox
[tester::#GJ9] [test-2] ✓ 1 line(s) match on stdout
[tester::#GJ9] [test-2] ✓ Received exit code 70.
[tester::#GJ9] [test-3] Running test case: 3
[tester::#GJ9] [test-3] Writing contents to ./test.lox:
[tester::#GJ9] [test-3] [test.lox] -false
[tester::#GJ9] [test-3] $ ./your_program.sh evaluate test.lox
[tester::#GJ9] [test-3] ✓ 1 line(s) match on stdout
[tester::#GJ9] [test-3] ✓ Received exit code 70.
[tester::#GJ9] [test-4] Running test case: 4
[tester::#GJ9] [test-4] Writing contents to ./test.lox:
[tester::#GJ9] [test-4] [test.lox] -("quz" + "foo")
[tester::#GJ9] [test-4] $ ./your_program.sh evaluate test.lox
[tester::#GJ9] [test-4] ✓ 1 line(s) match on stdout
[tester::#GJ9] [test-4] ✓ Received exit code 70.
[tester::#GJ9] Test passed.

[tester::#YU6] Running tests for Stage #YU6 (Evaluating Expressions - Runtime Errors: Binary Operators (1/2))
[tester::#YU6] [test-1] Running test case: 1
[tester::#YU6] [test-1] Writing contents to ./test.lox:
[tester::#YU6] [test-1] [test.lox] 37 * "world"
[tester::#YU6] [test-1] $ ./your_program.sh evaluate test.lox
[tester::#YU6] [test-1] ✓ 1 line(s) match on stdout
[tester::#YU6] [test-1] ✓ Received exit code 70.
[tester::#YU6] [test-2] Running test case: 2
[tester::#YU6] [test-2] Writing contents to ./test.lox:
[tester::#YU6] [test-2] [test.lox] "baz" / 75
[tester::#YU6] [test-2] $ ./your_program.sh evaluate test.lox
[tester::#YU6] [test-2] ✓ 1 line(s) match on stdout
[tester::#YU6] [test-2] ✓ Received exit code 70.
[tester::#YU6] [test-3] Running test case: 3
[tester::#YU6] [test-3] Writing contents to ./test.lox:
[tester::#YU6] [test-3] [test.lox] true / false
[tester::#YU6] [test-3] $ ./your_program.sh evaluate test.lox
[tester::#YU6] [test-3] ✓ 1 line(s) match on stdout
[tester::#YU6] [test-3] ✓ Received exit code 70.
[tester::#YU6] [test-4] Running test case: 4
[tester::#YU6] [test-4] Writing contents to ./test.lox:
[tester::#YU6] [test-4] [test.lox] ("world" + "hello") * ("bar" + "quz")
[tester::#YU6] [test-4] $ ./your_program.sh evaluate test.lox
[tester::#YU6] [test-4] ✓ 1 line(s) match on stdout
[tester::#YU6] [test-4] ✓ Received exit code 70.
[tester::#YU6] Test passed.

[tester::#CQ1] Running tests for Stage #CQ1 (Evaluating Expressions - Runtime Errors: Binary Operators (2/2))
[tester::#CQ1] [test-1] Running test case: 1
[tester::#CQ1] [test-1] Writing contents to ./test.lox:
[tester::#CQ1] [test-1] [test.lox] "world" + false
[tester::#CQ1] [test-1] $ ./your_program.sh evaluate test.lox
[tester::#CQ1] [test-1] ✓ 1 line(s) match on stdout
[tester::#CQ1] [test-1] ✓ Received exit code 70.
[tester::#CQ1] [test-2] Running test case: 2
[tester::#CQ1] [test-2] Writing contents to ./test.lox:
[tester::#CQ1] [test-2] [test.lox] 97 + "bar" + 13
[tester::#CQ1] [test-2] $ ./your_program.sh evaluate test.lox
[tester::#CQ1] [test-2] ✓ 1 line(s) match on stdout
[tester::#CQ1] [test-2] ✓ Received exit code 70.
[tester::#CQ1] [test-3] Running test case: 3
[tester::#CQ1] [test-3] Writing contents to ./test.lox:
[tester::#CQ1] [test-3] [test.lox] 61 - false
[tester::#CQ1] [test-3] $ ./your_program.sh evaluate test.lox
[tester::#CQ1] [test-3] ✓ 1 line(s) match on stdout
[tester::#CQ1] [test-3] ✓ Received exit code 70.
[tester::#CQ1] [test-4] Running test case: 4
[tester::#CQ1] [test-4] Writing contents to ./test.lox:
[tester::#CQ1] [test-4] [test.lox] false - ("quz" + "hello")
[tester::#CQ1] [test-4] $ ./your_program.sh evaluate test.lox
[tester::#CQ1] [test-4] ✓ 1 line(s) match on stdout
[tester::#CQ1] [test-4] ✓ Received exit code 70.
[tester::#CQ1] Test passed.

[tester::#IB5] Running tests for Stage #IB5 (Evaluating Expressions - Runtime Errors: Relational Operators)
[tester::#IB5] [test-1] Running test case: 1
[tester::#IB5] [test-1] Writing contents to ./test.lox:
[tester::#IB5] [test-1] [test.lox] "quz" < true
[tester::#IB5] [test-1] $ ./your_program.sh evaluate test.lox
[tester::#IB5] [test-1] ✓ 1 line(s) match on stdout
[tester::#IB5] [test-1] ✓ Received exit code 70.
[tester::#IB5] [test-2] Running test case: 2
[tester::#IB5] [test-2] Writing contents to ./test.lox:
[tester::#IB5] [test-2] [test.lox] true <= (75 + 16)
[tester::#IB5] [test-2] $ ./your_program.sh evaluate test.lox
[tester::#IB5] [test-2] ✓ 1 line(s) match on stdout
[tester::#IB5] [test-2] ✓ Received exit code 70.
[tester::#IB5] [test-3] Running test case: 3
[tester::#IB5] [test-3] Writing contents to ./test.lox:
[tester::#IB5] [test-3] [test.lox] 93 > ("hello" + "bar")
[tester::#IB5] [test-3] $ ./your_program.sh evaluate test.lox
[tester::#IB5] [test-3] ✓ 1 line(s) match on stdout
[tester::#IB5] [test-3] ✓ Received exit code 70.
[tester::#IB5] [test-4] Running test case: 4
[tester::#IB5] [test-4] Writing contents to ./test.lox:
[tester::#IB5] [test-4] [test.lox] true >= true
[tester::#IB5] [test-4] $ ./your_program.sh evaluate test.lox
[tester::#IB5] [test-4] ✓ 1 line(s) match on stdout
[tester::#IB5] [test-4] ✓ Received exit code 70.
[tester::#IB5] Test passed.

[tester::#XY1] Running tests for Stage #XY1 (Statements & State - Print: Generate output)
[tester::#XY1] [test-1] Running test case: 1
[tester::#XY1] [test-1] Writing contents to ./test.lox:
[tester::#XY1] [test-1] [test.lox] print false;
[tester::#XY1] [test-1] $ ./your_program.sh run test.lox
[your_program] false
[your_program] evaluating print false
[tester::#XY1] [test-1] ✓ 1 line(s) match on stdout
[tester::#XY1] [test-1] ✓ Received exit code 0.
[tester::#XY1] [test-2] Running test case: 2
[tester::#XY1] [test-2] Writing contents to ./test.lox:
[tester::#XY1] [test-2] [test.lox] print "bar" + "hello" + "quz";
[tester::#XY1] [test-2] $ ./your_program.sh run test.lox
[your_program] barhelloquz
[your_program] evaluating print (+ (+ bar hello) quz)
[tester::#XY1] [test-2] ✓ 1 line(s) match on stdout
[tester::#XY1] [test-2] ✓ Received exit code 0.
[tester::#XY1] [test-3] Running test case: 3
[tester::#XY1] [test-3] Writing contents to ./test.lox:
[tester::#XY1] [test-3] [test.lox] print (67 * 2 + 76 * 2) / (2);
[tester::#XY1] [test-3] $ ./your_program.sh run test.lox
[your_program] evaluating print (/ (group (+ (* 67.0 2.0) (* 76.0 2.0))) (group 2.0))
[your_program] 143
[tester::#XY1] [test-3] ✓ 1 line(s) match on stdout
[tester::#XY1] [test-3] ✓ Received exit code 0.
[tester::#XY1] [test-4] Running test case: 4
[tester::#XY1] [test-4] Writing contents to ./test.lox:
[tester::#XY1] [test-4] [test.lox] print;
[tester::#XY1] [test-4] $ ./your_program.sh run test.lox
[tester::#XY1] [test-4] ✓ 1 line(s) match on stdout
[tester::#XY1] [test-4] ✓ Received exit code 65.
[tester::#XY1] Test passed.

[tester::#OE4] Running tests for Stage #OE4 (Statements & State - Print: Multiple statements)
[tester::#OE4] [test-1] Running test case: 1
[tester::#OE4] [test-1] Writing contents to ./test.lox:
[tester::#OE4] [test-1] [test.lox] print "bar" + "hello" + "baz";
[tester::#OE4] [test-1] [test.lox] print 58 - 38;
[tester::#OE4] [test-1] [test.lox] print "baz" == "foo";
[tester::#OE4] [test-1] $ ./your_program.sh run test.lox
[your_program] barhellobaz
[your_program] 20
[your_program] false
[your_program] evaluating print (+ (+ bar hello) baz)
[your_program] evaluating print (- 58.0 38.0)
[your_program] evaluating print (== baz foo)
[tester::#OE4] [test-1] ✓ 3 line(s) match on stdout
[tester::#OE4] [test-1] ✓ Received exit code 0.
[tester::#OE4] [test-2] Running test case: 2
[tester::#OE4] [test-2] Writing contents to ./test.lox:
[tester::#OE4] [test-2] [test.lox] print "quz"; print false;
[tester::#OE4] [test-2] [test.lox] print false;
[tester::#OE4] [test-2] [test.lox] print "baz"; print 46;
[tester::#OE4] [test-2] $ ./your_program.sh run test.lox
[your_program] quz
[your_program] false
[your_program] false
[your_program] baz
[your_program] 46
[your_program] evaluating print quz
[your_program] evaluating print false
[your_program] evaluating print false
[your_program] evaluating print baz
[your_program] evaluating print 46.0
[tester::#OE4] [test-2] ✓ 5 line(s) match on stdout
[tester::#OE4] [test-2] ✓ Received exit code 0.
[tester::#OE4] [test-3] Running test case: 3
[tester::#OE4] [test-3] Writing contents to ./test.lox:
[tester::#OE4] [test-3] [test.lox] print 57;
[tester::#OE4] [test-3] [test.lox]     print 57 + 79;
[tester::#OE4] [test-3] [test.lox]         print 57 + 79 + 19;
[tester::#OE4] [test-3] $ ./your_program.sh run test.lox
[your_program] 57
[your_program] 136
[your_program] 155
[your_program] evaluating print 57.0
[your_program] evaluating print (+ 57.0 79.0)
[your_program] evaluating print (+ (+ 57.0 79.0) 19.0)
[tester::#OE4] [test-3] ✓ 3 line(s) match on stdout
[tester::#OE4] [test-3] ✓ Received exit code 0.
[tester::#OE4] [test-4] Running test case: 4
[tester::#OE4] [test-4] Writing contents to ./test.lox:
[tester::#OE4] [test-4] [test.lox] print false != true;
[tester::#OE4] [test-4] [test.lox] 
[tester::#OE4] [test-4] [test.lox] print "70
[tester::#OE4] [test-4] [test.lox] 11
[tester::#OE4] [test-4] [test.lox] 56
[tester::#OE4] [test-4] [test.lox] ";
[tester::#OE4] [test-4] [test.lox] 
[tester::#OE4] [test-4] [test.lox] print "There should be an empty line above this.";
[tester::#OE4] [test-4] [test.lox] 
[tester::#OE4] [test-4] [test.lox] print "(" + "" + ")";
[tester::#OE4] [test-4] [test.lox] 
[tester::#OE4] [test-4] [test.lox] print "non-ascii: ॐ";
[tester::#OE4] [test-4] [test.lox] 
[tester::#OE4] [test-4] $ ./your_program.sh run test.lox
[your_program] true
[your_program] 70
[your_program] 11
[your_program] 56
[your_program] 
[your_program] There should be an empty line above this.
[your_program] ()
[your_program] non-ascii: ॐ
[your_program] evaluating print (!= false true)
[your_program] evaluating print 70
[your_program] 11
[your_program] 56
[your_program] 
[your_program] evaluating print There should be an empty line above this.
[your_program] evaluating print (+ (+ ( ) ))
[your_program] evaluating print non-ascii: ॐ
[tester::#OE4] [test-4] ✓ 8 line(s) match on stdout
[tester::#OE4] [test-4] ✓ Received exit code 0.
[tester::#OE4] Test passed.

[tester::#FI3] Running tests for Stage #FI3 (Statements & State - Expression statements)
[tester::#FI3] [test-1] Running test case: 1
[tester::#FI3] [test-1] Writing contents to ./test.lox:
[tester::#FI3] [test-1] [test.lox] (46 + 36 - 68) > (17 - 46) * 2;
[tester::#FI3] [test-1] [test.lox] print !false;
[tester::#FI3] [test-1] [test.lox] "world" + "bar" + "hello" + "foo" == "worldbarhellofoo";
[tester::#FI3] [test-1] [test.lox] print !false;
[tester::#FI3] [test-1] $ ./your_program.sh run test.lox
[your_program] true
[your_program] true
[your_program] evaluating (> (group (- (+ 46.0 36.0) 68.0)) (* (group (- 17.0 46.0)) 2.0))
[your_program] evaluating print (! false)
[your_program] evaluating (== (+ (+ (+ world bar) hello) foo) worldbarhellofoo)
[your_program] evaluating print (! false)
[tester::#FI3] [test-1] ✓ 2 line(s) match on stdout
[tester::#FI3] [test-1] ✓ Received exit code 0.
[tester::#FI3] [test-2] Running test case: 2
[tester::#FI3] [test-2] Writing contents to ./test.lox:
[tester::#FI3] [test-2] [test.lox] 31 - 26 >= -70 * 2 / 70 + 36;
[tester::#FI3] [test-2] [test.lox] false == false;
[tester::#FI3] [test-2] [test.lox] ("hello" == "baz") == ("world" != "foo");
[tester::#FI3] [test-2] [test.lox] print false;
[tester::#FI3] [test-2] $ ./your_program.sh run test.lox
[your_program] false
[your_program] evaluating (>= (- 31.0 26.0) (+ (/ (* (- 70.0) 2.0) 70.0) 36.0))
[your_program] evaluating (== false false)
[your_program] evaluating (== (group (== hello baz)) (group (!= world foo)))
[your_program] evaluating print false
[tester::#FI3] [test-2] ✓ 1 line(s) match on stdout
[tester::#FI3] [test-2] ✓ Received exit code 0.
[tester::#FI3] [test-3] Running test case: 3
[tester::#FI3] [test-3] Writing contents to ./test.lox:
[tester::#FI3] [test-3] [test.lox] print "the expression below is invalid";
[tester::#FI3] [test-3] [test.lox] 20 + "baz";
[tester::#FI3] [test-3] [test.lox] print "this should not be printed";
[tester::#FI3] [test-3] $ ./your_program.sh run test.lox
[your_program] the expression below is invalid
[your_program] evaluating print the expression below is invalid
[your_program] evaluating (+ 20.0 baz)
[your_program] Cannot apply PLUS expression to 20 and baz
[tester::#FI3] [test-3] ✓ 1 line(s) match on stdout
[tester::#FI3] [test-3] ✓ Received exit code 70.
[tester::#FI3] [test-4] Running test case: 4
[tester::#FI3] [test-4] Writing contents to ./test.lox:
[tester::#FI3] [test-4] [test.lox] print "65" + "quz";
[tester::#FI3] [test-4] [test.lox] print false * (98 + 48);
[tester::#FI3] [test-4] $ ./your_program.sh run test.lox
[your_program] 65quz
[your_program] evaluating print (+ 65 quz)
[your_program] evaluating print (* false (group (+ 98.0 48.0)))
[your_program] Cannot apply STAR expression to false and 146
[tester::#FI3] [test-4] ✓ 1 line(s) match on stdout
[tester::#FI3] [test-4] ✓ Received exit code 70.
[tester::#FI3] Test passed.

[tester::#YG2] Running tests for Stage #YG2 (Statements & State - Variables: Declare variables)
[tester::#YG2] [test-1] Running test case: 1
[tester::#YG2] [test-1] Writing contents to ./test.lox:
[tester::#YG2] [test-1] [test.lox] var foo = 10;
[tester::#YG2] [test-1] [test.lox] print foo;
[tester::#YG2] [test-1] $ ./your_program.sh run test.lox
[your_program] evaluating var foo = 10.0
[your_program] evaluating print var foo
[your_program] 10
[tester::#YG2] [test-1] ✓ 1 line(s) match on stdout
[tester::#YG2] [test-1] ✓ Received exit code 0.
[tester::#YG2] [test-2] Running test case: 2
[tester::#YG2] [test-2] Writing contents to ./test.lox:
[tester::#YG2] [test-2] [test.lox] var world = 96;
[tester::#YG2] [test-2] [test.lox] var baz = 96;
[tester::#YG2] [test-2] [test.lox] print world + baz;
[tester::#YG2] [test-2] [test.lox] var bar = 96;
[tester::#YG2] [test-2] [test.lox] print world + baz + bar;
[tester::#YG2] [test-2] $ ./your_program.sh run test.lox
[your_program] 192
[your_program] 288
[your_program] evaluating var world = 96.0
[your_program] evaluating var baz = 96.0
[your_program] evaluating print (+ var world var baz)
[your_program] evaluating var bar = 96.0
[your_program] evaluating print (+ (+ var world var baz) var bar)
[tester::#YG2] [test-2] ✓ 2 line(s) match on stdout
[tester::#YG2] [test-2] ✓ Received exit code 0.
[tester::#YG2] [test-3] Running test case: 3
[tester::#YG2] [test-3] Writing contents to ./test.lox:
[tester::#YG2] [test-3] [test.lox] var quz = (8 * (53 + 53)) / 4 + 53;
[tester::#YG2] [test-3] [test.lox] print quz;
[tester::#YG2] [test-3] $ ./your_program.sh run test.lox
[your_program] 265
[your_program] evaluating var quz = (+ (/ (group (* 8.0 (group (+ 53.0 53.0)))) 4.0) 53.0)
[your_program] evaluating print var quz
[tester::#YG2] [test-3] ✓ 1 line(s) match on stdout
[tester::#YG2] [test-3] ✓ Received exit code 0.
[tester::#YG2] [test-4] Running test case: 4
[tester::#YG2] [test-4] Writing contents to ./test.lox:
[tester::#YG2] [test-4] [test.lox] var baz = 47;
[tester::#YG2] [test-4] [test.lox] var hello = baz;
[tester::#YG2] [test-4] [test.lox] print hello + baz;
[tester::#YG2] [test-4] $ ./your_program.sh run test.lox
[your_program] 94
[your_program] evaluating var baz = 47.0
[your_program] evaluating var hello = var baz
[your_program] evaluating print (+ var hello var baz)
[tester::#YG2] [test-4] ✓ 1 line(s) match on stdout
[tester::#YG2] [test-4] ✓ Received exit code 0.
[tester::#YG2] Test passed.

[tester::#SV7] Running tests for Stage #SV7 (Statements & State - Variables: Runtime Errors)
[tester::#SV7] [test-1] Running test case: 1
[tester::#SV7] [test-1] Writing contents to ./test.lox:
[tester::#SV7] [test-1] [test.lox] print 13;
[tester::#SV7] [test-1] [test.lox] print x;
[tester::#SV7] [test-1] $ ./your_program.sh run test.lox
[your_program] 13
[your_program] evaluating print 13.0
[your_program] evaluating print var x
[your_program] Variable x not found
[tester::#SV7] [test-1] ✓ 1 line(s) match on stdout
[tester::#SV7] [test-1] ✓ Received exit code 70.
[tester::#SV7] [test-2] Running test case: 2
[tester::#SV7] [test-2] Writing contents to ./test.lox:
[tester::#SV7] [test-2] [test.lox] var baz = 78;
[tester::#SV7] [test-2] [test.lox] print world;
[tester::#SV7] [test-2] $ ./your_program.sh run test.lox
[your_program] evaluating var baz = 78.0
[your_program] evaluating print var world
[your_program] Variable world not found
[tester::#SV7] [test-2] ✓ 1 line(s) match on stdout
[tester::#SV7] [test-2] ✓ Received exit code 70.
[tester::#SV7] [test-3] Running test case: 3
[tester::#SV7] [test-3] Writing contents to ./test.lox:
[tester::#SV7] [test-3] [test.lox] var foo = 24;
[tester::#SV7] [test-3] [test.lox] var result = (foo + quz) / baz;
[tester::#SV7] [test-3] [test.lox] print result;
[tester::#SV7] [test-3] $ ./your_program.sh run test.lox
[your_program] evaluating var foo = 24.0
[your_program] evaluating var result = (/ (group (+ var foo var quz)) var baz)
[your_program] Variable quz not found
[tester::#SV7] [test-3] ✓ 1 line(s) match on stdout
[tester::#SV7] [test-3] ✓ Received exit code 70.
[tester::#SV7] [test-4] Running test case: 4
[tester::#SV7] [test-4] Writing contents to ./test.lox:
[tester::#SV7] [test-4] [test.lox] var bar = 97;
[tester::#SV7] [test-4] [test.lox] var world = 46;
[tester::#SV7] [test-4] [test.lox] var hello = 20;
[tester::#SV7] [test-4] [test.lox] print bar + world + hello + foo; print 24;
[tester::#SV7] [test-4] $ ./your_program.sh run test.lox
[your_program] evaluating var bar = 97.0
[your_program] evaluating var world = 46.0
[your_program] evaluating var hello = 20.0
[your_program] evaluating print (+ (+ (+ var bar var world) var hello) var foo)
[your_program] Variable foo not found
[tester::#SV7] [test-4] ✓ 1 line(s) match on stdout
[tester::#SV7] [test-4] ✓ Received exit code 70.
[tester::#SV7] Test passed.

[tester::#BC1] Running tests for Stage #BC1 (Statements & State - Variables: Initialize variables)
[tester::#BC1] [test-1] Running test case: 1
[tester::#BC1] [test-1] Writing contents to ./test.lox:
[tester::#BC1] [test-1] [test.lox] var hello;
[tester::#BC1] [test-1] [test.lox] print hello;
[tester::#BC1] [test-1] $ ./your_program.sh run test.lox
[your_program] nil
[your_program] evaluating var hello = noop
[your_program] evaluating print var hello
[tester::#BC1] [test-1] ✓ 1 line(s) match on stdout
[tester::#BC1] [test-1] ✓ Received exit code 0.
[tester::#BC1] [test-2] Running test case: 2
[tester::#BC1] [test-2] Writing contents to ./test.lox:
[tester::#BC1] [test-2] [test.lox] var hello = "quz";
[tester::#BC1] [test-2] [test.lox] var bar;
[tester::#BC1] [test-2] [test.lox] print bar;
[tester::#BC1] [test-2] $ ./your_program.sh run test.lox
[your_program] nil
[your_program] evaluating var hello = quz
[your_program] evaluating var bar = noop
[your_program] evaluating print var bar
[tester::#BC1] [test-2] ✓ 1 line(s) match on stdout
[tester::#BC1] [test-2] ✓ Received exit code 0.
[tester::#BC1] [test-3] Running test case: 3
[tester::#BC1] [test-3] Writing contents to ./test.lox:
[tester::#BC1] [test-3] [test.lox] var foo = 70;
[tester::#BC1] [test-3] [test.lox] var world;
[tester::#BC1] [test-3] [test.lox] var baz;
[tester::#BC1] [test-3] [test.lox] print world;
[tester::#BC1] [test-3] $ ./your_program.sh run test.lox
[your_program] nil
[your_program] evaluating var foo = 70.0
[your_program] evaluating var world = noop
[your_program] evaluating var baz = noop
[your_program] evaluating print var world
[tester::#BC1] [test-3] ✓ 1 line(s) match on stdout
[tester::#BC1] [test-3] ✓ Received exit code 0.
[tester::#BC1] [test-4] Running test case: 4
[tester::#BC1] [test-4] Writing contents to ./test.lox:
[tester::#BC1] [test-4] [test.lox] var foo = 44 + 17 * 83;
[tester::#BC1] [test-4] [test.lox] print foo;
[tester::#BC1] [test-4] [test.lox] var bar = 17 * 83;
[tester::#BC1] [test-4] [test.lox] print foo + bar;
[tester::#BC1] [test-4] [test.lox] var hello;
[tester::#BC1] [test-4] [test.lox] print hello;
[tester::#BC1] [test-4] $ ./your_program.sh run test.lox
[your_program] 1455
[your_program] 2866
[your_program] nil
[your_program] evaluating var foo = (+ 44.0 (* 17.0 83.0))
[your_program] evaluating print var foo
[your_program] evaluating var bar = (* 17.0 83.0)
[your_program] evaluating print (+ var foo var bar)
[your_program] evaluating var hello = noop
[your_program] evaluating print var hello
[tester::#BC1] [test-4] ✓ 3 line(s) match on stdout
[tester::#BC1] [test-4] ✓ Received exit code 0.
[tester::#BC1] Test passed.

[tester::#DW9] Running tests for Stage #DW9 (Statements & State - Variables: Redeclare variables)
[tester::#DW9] [test-1] Running test case: 1
[tester::#DW9] [test-1] Writing contents to ./test.lox:
[tester::#DW9] [test-1] [test.lox] var world = "before";
[tester::#DW9] [test-1] [test.lox] print world;
[tester::#DW9] [test-1] [test.lox] var world = "after";
[tester::#DW9] [test-1] [test.lox] print world;
[tester::#DW9] [test-1] $ ./your_program.sh run test.lox
[your_program] before
[your_program] after
[your_program] evaluating var world = before
[your_program] evaluating print var world
[your_program] evaluating var world = after
[your_program] evaluating print var world
[tester::#DW9] [test-1] ✓ 2 line(s) match on stdout
[tester::#DW9] [test-1] ✓ Received exit code 0.
[tester::#DW9] [test-2] Running test case: 2
[tester::#DW9] [test-2] Writing contents to ./test.lox:
[tester::#DW9] [test-2] [test.lox] var world = "after";
[tester::#DW9] [test-2] [test.lox] var world = "before";
[tester::#DW9] [test-2] [test.lox] var world = world;
[tester::#DW9] [test-2] [test.lox] print world;
[tester::#DW9] [test-2] $ ./your_program.sh run test.lox
[your_program] before
[your_program] evaluating var world = after
[your_program] evaluating var world = before
[your_program] evaluating var world = var world
[your_program] evaluating print var world
[tester::#DW9] [test-2] ✓ 1 line(s) match on stdout
[tester::#DW9] [test-2] ✓ Received exit code 0.
[tester::#DW9] [test-3] Running test case: 3
[tester::#DW9] [test-3] Writing contents to ./test.lox:
[tester::#DW9] [test-3] [test.lox] var world = 2;
[tester::#DW9] [test-3] [test.lox] print world;
[tester::#DW9] [test-3] [test.lox] var world = 3;
[tester::#DW9] [test-3] [test.lox] print world;
[tester::#DW9] [test-3] [test.lox] var baz = 5;
[tester::#DW9] [test-3] [test.lox] print baz;
[tester::#DW9] [test-3] [test.lox] var world = baz;
[tester::#DW9] [test-3] [test.lox] print world;
[tester::#DW9] [test-3] [test.lox] 
[tester::#DW9] [test-3] $ ./your_program.sh run test.lox
[your_program] 2
[your_program] 3
[your_program] 5
[your_program] 5
[your_program] evaluating var world = 2.0
[your_program] evaluating print var world
[your_program] evaluating var world = 3.0
[your_program] evaluating print var world
[your_program] evaluating var baz = 5.0
[your_program] evaluating print var baz
[your_program] evaluating var world = var baz
[your_program] evaluating print var world
[tester::#DW9] [test-3] ✓ 4 line(s) match on stdout
[tester::#DW9] [test-3] ✓ Received exit code 0.
[tester::#DW9] [test-4] Running test case: 4
[tester::#DW9] [test-4] Writing contents to ./test.lox:
[tester::#DW9] [test-4] [test.lox] var bar = hello;
[tester::#DW9] [test-4] [test.lox] 
[tester::#DW9] [test-4] $ ./your_program.sh run test.lox
[your_program] evaluating var bar = var hello
[your_program] Variable hello not found
[tester::#DW9] [test-4] ✓ 1 line(s) match on stdout
[tester::#DW9] [test-4] ✓ Received exit code 70.
[tester::#DW9] Test passed.

[tester::#PL3] Running tests for Stage #PL3 (Statements & State - Assignment operation)
[tester::#PL3] [test-1] Running test case: 1
[tester::#PL3] [test-1] Writing contents to ./test.lox:
[tester::#PL3] [test-1] [test.lox] var baz;
[tester::#PL3] [test-1] [test.lox] baz = 1;
[tester::#PL3] [test-1] [test.lox] print baz;
[tester::#PL3] [test-1] [test.lox] print baz = 2;
[tester::#PL3] [test-1] [test.lox] print baz;
[tester::#PL3] [test-1] $ ./your_program.sh run test.lox
[your_program] 1
[your_program] 2
[your_program] 2
[your_program] evaluating var baz = noop
[your_program] evaluating (= var baz 1.0)
[your_program] evaluating print var baz
[your_program] evaluating print (= var baz 2.0)
[your_program] evaluating print var baz
[tester::#PL3] [test-1] ✓ 3 line(s) match on stdout
[tester::#PL3] [test-1] ✓ Received exit code 0.
[tester::#PL3] [test-2] Running test case: 2
[tester::#PL3] [test-2] Writing contents to ./test.lox:
[tester::#PL3] [test-2] [test.lox] var world = 12;
[tester::#PL3] [test-2] [test.lox] var hello = 12;
[tester::#PL3] [test-2] [test.lox] hello = world;
[tester::#PL3] [test-2] [test.lox] world = hello;
[tester::#PL3] [test-2] [test.lox] print world + hello;
[tester::#PL3] [test-2] $ ./your_program.sh run test.lox
[your_program] evaluating var world = 12.0
[your_program] evaluating var hello = 12.0
[your_program] evaluating (= var hello var world)
[your_program] evaluating (= var world var hello)
[your_program] evaluating print (+ var world var hello)
[your_program] 24
[tester::#PL3] [test-2] ✓ 1 line(s) match on stdout
[tester::#PL3] [test-2] ✓ Received exit code 0.
[tester::#PL3] [test-3] Running test case: 3
[tester::#PL3] [test-3] Writing contents to ./test.lox:
[tester::#PL3] [test-3] [test.lox] var world;
[tester::#PL3] [test-3] [test.lox] var baz;
[tester::#PL3] [test-3] [test.lox] 
[tester::#PL3] [test-3] [test.lox] world = baz = 30 + 60 * 22;
[tester::#PL3] [test-3] [test.lox] print world;
[tester::#PL3] [test-3] [test.lox] print baz;
[tester::#PL3] [test-3] $ ./your_program.sh run test.lox
[your_program] evaluating var world = noop
[your_program] evaluating var baz = noop
[your_program] evaluating (= var world (= var baz (+ 30.0 (* 60.0 22.0))))
[your_program] evaluating print var world
[your_program] evaluating print var baz
[your_program] 1350
[your_program] 1350
[tester::#PL3] [test-3] ✓ 2 line(s) match on stdout
[tester::#PL3] [test-3] ✓ Received exit code 0.
[tester::#PL3] [test-4] Running test case: 4
[tester::#PL3] [test-4] Writing contents to ./test.lox:
[tester::#PL3] [test-4] [test.lox] var bar = 18;
[tester::#PL3] [test-4] [test.lox] var baz;
[tester::#PL3] [test-4] [test.lox] var quz;
[tester::#PL3] [test-4] [test.lox] 
[tester::#PL3] [test-4] [test.lox] bar = baz = quz = bar * 2;
[tester::#PL3] [test-4] [test.lox] print bar;
[tester::#PL3] [test-4] [test.lox] print baz;
[tester::#PL3] [test-4] [test.lox] print baz;
[tester::#PL3] [test-4] $ ./your_program.sh run test.lox
[your_program] 36
[your_program] 36
[your_program] 36
[your_program] evaluating var bar = 18.0
[your_program] evaluating var baz = noop
[your_program] evaluating var quz = noop
[your_program] evaluating (= var bar (= var baz (= var quz (* var bar 2.0))))
[your_program] evaluating print var bar
[your_program] evaluating print var baz
[your_program] evaluating print var baz
[tester::#PL3] [test-4] ✓ 3 line(s) match on stdout
[tester::#PL3] [test-4] ✓ Received exit code 0.
[tester::#PL3] Test passed.

[tester::#VR5] Running tests for Stage #VR5 (Statements & State - Block syntax)
[tester::#VR5] [test-1] Running test case: 1
[tester::#VR5] [test-1] Writing contents to ./test.lox:
[tester::#VR5] [test-1] [test.lox] {
[tester::#VR5] [test-1] [test.lox]     var bar = "hello";
[tester::#VR5] [test-1] [test.lox]     print bar;
[tester::#VR5] [test-1] [test.lox] }
[tester::#VR5] [test-1] $ ./your_program.sh run test.lox
[your_program] hello
[your_program] evaluating (block var bar = hello, print var bar)
[tester::#VR5] [test-1] ✓ 1 line(s) match on stdout
[tester::#VR5] [test-1] ✓ Received exit code 0.
[tester::#VR5] [test-2] Running test case: 2
[tester::#VR5] [test-2] Writing contents to ./test.lox:
[tester::#VR5] [test-2] [test.lox] {
[tester::#VR5] [test-2] [test.lox]     var bar = "before";
[tester::#VR5] [test-2] [test.lox]     print bar;
[tester::#VR5] [test-2] [test.lox] }
[tester::#VR5] [test-2] [test.lox] {
[tester::#VR5] [test-2] [test.lox]     var bar = "after";
[tester::#VR5] [test-2] [test.lox]     print bar;
[tester::#VR5] [test-2] [test.lox] }
[tester::#VR5] [test-2] [test.lox] 
[tester::#VR5] [test-2] $ ./your_program.sh run test.lox
[your_program] before
[your_program] after
[your_program] evaluating (block var bar = before, print var bar)
[your_program] evaluating (block var bar = after, print var bar)
[tester::#VR5] [test-2] ✓ 2 line(s) match on stdout
[tester::#VR5] [test-2] ✓ Received exit code 0.
[tester::#VR5] [test-3] Running test case: 3
[tester::#VR5] [test-3] Writing contents to ./test.lox:
[tester::#VR5] [test-3] [test.lox] {
[tester::#VR5] [test-3] [test.lox]     var hello = 16;
[tester::#VR5] [test-3] [test.lox]     {
[tester::#VR5] [test-3] [test.lox]         var foo = 16;
[tester::#VR5] [test-3] [test.lox]         print foo;
[tester::#VR5] [test-3] [test.lox]     }
[tester::#VR5] [test-3] [test.lox]     print hello;
[tester::#VR5] [test-3] [test.lox] }
[tester::#VR5] [test-3] $ ./your_program.sh run test.lox
[your_program] 16
[your_program] 16
[your_program] evaluating (block var hello = 16.0, (block var foo = 16.0, print var foo), print var hello)
[tester::#VR5] [test-3] ✓ 2 line(s) match on stdout
[tester::#VR5] [test-3] ✓ Received exit code 0.
[tester::#VR5] [test-4] Running test case: 4
[tester::#VR5] [test-4] Writing contents to ./test.lox:
[tester::#VR5] [test-4] [test.lox] {
[tester::#VR5] [test-4] [test.lox]     var baz = 47;
[tester::#VR5] [test-4] [test.lox]     var foo = 47;
[tester::#VR5] [test-4] [test.lox]     {
[tester::#VR5] [test-4] [test.lox]         print baz + foo;
[tester::#VR5] [test-4] [test.lox] }
[tester::#VR5] [test-4] $ ./your_program.sh run test.lox
[your_program] unclosed block expression
[tester::#VR5] [test-4] ✓ 1 line(s) match on stdout
[tester::#VR5] [test-4] ✓ Received exit code 65.
[tester::#VR5] Test passed.

[tester::#FB4] Running tests for Stage #FB4 (Statements & State - Scopes)
[tester::#FB4] [test-1] Running test case: 1
[tester::#FB4] [test-1] Writing contents to ./test.lox:
[tester::#FB4] [test-1] [test.lox] var foo = (37 * 82) - 12;
[tester::#FB4] [test-1] [test.lox] {
[tester::#FB4] [test-1] [test.lox]     var quz = "baz" + "51";
[tester::#FB4] [test-1] [test.lox]     print quz;
[tester::#FB4] [test-1] [test.lox] }
[tester::#FB4] [test-1] [test.lox] print foo;
[tester::#FB4] [test-1] $ ./your_program.sh run test.lox
[your_program] baz51
[your_program] 3022
[your_program] evaluating var foo = (- (group (* 37.0 82.0)) 12.0)
[your_program] evaluating (block var quz = (+ baz 51), print var quz)
[your_program] evaluating print var foo
[tester::#FB4] [test-1] ✓ 2 line(s) match on stdout
[tester::#FB4] [test-1] ✓ Received exit code 0.
[tester::#FB4] [test-2] Running test case: 2
[tester::#FB4] [test-2] Writing contents to ./test.lox:
[tester::#FB4] [test-2] [test.lox] {
[tester::#FB4] [test-2] [test.lox]     var world = "before";
[tester::#FB4] [test-2] [test.lox]     {
[tester::#FB4] [test-2] [test.lox]         var world = "after";
[tester::#FB4] [test-2] [test.lox]         print world;
[tester::#FB4] [test-2] [test.lox]     }
[tester::#FB4] [test-2] [test.lox]     print world;
[tester::#FB4] [test-2] [test.lox] }
[tester::#FB4] [test-2] $ ./your_program.sh run test.lox
[your_program] after
[your_program] before
[your_program] evaluating (block var world = before, (block var world = after, print var world), print var world)
[tester::#FB4] [test-2] ✓ 2 line(s) match on stdout
[tester::#FB4] [test-2] ✓ Received exit code 0.
[tester::#FB4] [test-3] Running test case: 3
[tester::#FB4] [test-3] Writing contents to ./test.lox:
[tester::#FB4] [test-3] [test.lox] var quz = "global quz";
[tester::#FB4] [test-3] [test.lox] var hello = "global hello";
[tester::#FB4] [test-3] [test.lox] var baz = "global baz";
[tester::#FB4] [test-3] [test.lox] {
[tester::#FB4] [test-3] [test.lox]   var quz = "outer quz";
[tester::#FB4] [test-3] [test.lox]   var hello = "outer hello";
[tester::#FB4] [test-3] [test.lox]   {
[tester::#FB4] [test-3] [test.lox]     var quz = "inner quz";
[tester::#FB4] [test-3] [test.lox]     print quz;
[tester::#FB4] [test-3] [test.lox]     print hello;
[tester::#FB4] [test-3] [test.lox]     print baz;
[tester::#FB4] [test-3] [test.lox]   }
[tester::#FB4] [test-3] [test.lox]   print quz;
[tester::#FB4] [test-3] [test.lox]   print hello;
[tester::#FB4] [test-3] [test.lox]   print baz;
[tester::#FB4] [test-3] [test.lox] }
[tester::#FB4] [test-3] [test.lox] print quz;
[tester::#FB4] [test-3] [test.lox] print hello;
[tester::#FB4] [test-3] [test.lox] print baz;
[tester::#FB4] [test-3] [test.lox] 
[tester::#FB4] [test-3] $ ./your_program.sh run test.lox
[your_program] inner quz
[your_program] outer hello
[your_program] global baz
[your_program] outer quz
[your_program] outer hello
[your_program] global baz
[your_program] global quz
[your_program] global hello
[your_program] global baz
[your_program] evaluating var quz = global quz
[your_program] evaluating var hello = global hello
[your_program] evaluating var baz = global baz
[your_program] evaluating (block var quz = outer quz, var hello = outer hello, (block var quz = inner quz, print var quz, print var hello, print var baz), print var quz, print var hello, print var baz)
[your_program] evaluating print var quz
[your_program] evaluating print var hello
[your_program] evaluating print var baz
[tester::#FB4] [test-3] ✓ 9 line(s) match on stdout
[tester::#FB4] [test-3] ✓ Received exit code 0.
[tester::#FB4] [test-4] Running test case: 4
[tester::#FB4] [test-4] Writing contents to ./test.lox:
[tester::#FB4] [test-4] [test.lox] {
[tester::#FB4] [test-4] [test.lox]   var hello = "outer hello";
[tester::#FB4] [test-4] [test.lox]   var foo = "outer foo";
[tester::#FB4] [test-4] [test.lox]   {
[tester::#FB4] [test-4] [test.lox]     hello = "modified hello";
[tester::#FB4] [test-4] [test.lox]     var foo = "inner foo";
[tester::#FB4] [test-4] [test.lox]     print hello;
[tester::#FB4] [test-4] [test.lox]     print foo;
[tester::#FB4] [test-4] [test.lox]   }
[tester::#FB4] [test-4] [test.lox]   print hello;
[tester::#FB4] [test-4] [test.lox]   print foo;
[tester::#FB4] [test-4] [test.lox] }
[tester::#FB4] [test-4] [test.lox] print foo;
[tester::#FB4] [test-4] [test.lox] 
[tester::#FB4] [test-4] $ ./your_program.sh run test.lox
[your_program] modified hello
[your_program] inner foo
[your_program] modified hello
[your_program] outer foo
[your_program] evaluating (block var hello = outer hello, var foo = outer foo, (block (= var hello modified hello), var foo = inner foo, print var hello, print var foo), print var hello, print var foo)
[your_program] evaluating print var foo
[your_program] Variable foo not found
[tester::#FB4] [test-4] ✓ 4 line(s) match on stdout
[tester::#FB4] [test-4] ✓ Received exit code 70.
[tester::#FB4] Test passed.

[tester::#NE3] Running tests for Stage #NE3 (Control Flow - If statements)
[tester::#NE3] [test-1] Running test case: 1
[tester::#NE3] [test-1] Writing contents to ./test.lox:
[tester::#NE3] [test-1] [test.lox] if (false) print "bar";
[tester::#NE3] [test-1] $ ./your_program.sh run test.lox
[your_program] evaluating (if (false) print bar)
[tester::#NE3] [test-1] ✓ 1 line(s) match on stdout
[tester::#NE3] [test-1] ✓ Received exit code 0.
[tester::#NE3] [test-2] Running test case: 2
[tester::#NE3] [test-2] Writing contents to ./test.lox:
[tester::#NE3] [test-2] [test.lox] if (false) {
[tester::#NE3] [test-2] [test.lox]   print "block body";
[tester::#NE3] [test-2] [test.lox] }
[tester::#NE3] [test-2] $ ./your_program.sh run test.lox
[your_program] evaluating (if (false) (block print block body))
[tester::#NE3] [test-2] ✓ 1 line(s) match on stdout
[tester::#NE3] [test-2] ✓ Received exit code 0.
[tester::#NE3] [test-3] Running test case: 3
[tester::#NE3] [test-3] Writing contents to ./test.lox:
[tester::#NE3] [test-3] [test.lox] var a = false;
[tester::#NE3] [test-3] [test.lox] if (a = true) {
[tester::#NE3] [test-3] [test.lox]   print (a == false);
[tester::#NE3] [test-3] [test.lox] }
[tester::#NE3] [test-3] $ ./your_program.sh run test.lox
[your_program] false
[your_program] evaluating var a = false
[your_program] evaluating (if ((= var a true)) (block print (group (== var a false))))
[tester::#NE3] [test-3] ✓ 1 line(s) match on stdout
[tester::#NE3] [test-3] ✓ Received exit code 0.
[tester::#NE3] [test-4] Running test case: 4
[tester::#NE3] [test-4] Writing contents to ./test.lox:
[tester::#NE3] [test-4] [test.lox] var stage = "unknown";
[tester::#NE3] [test-4] [test.lox] var age = 92;
[tester::#NE3] [test-4] [test.lox] if (age < 18) { stage = "child"; }
[tester::#NE3] [test-4] [test.lox] if (age >= 18) { stage = "adult"; }
[tester::#NE3] [test-4] [test.lox] print stage;
[tester::#NE3] [test-4] [test.lox] 
[tester::#NE3] [test-4] [test.lox] var isAdult = age >= 18;
[tester::#NE3] [test-4] [test.lox] if (isAdult) { print "eligible for voting: true"; }
[tester::#NE3] [test-4] [test.lox] if (!isAdult) { print "eligible for voting: false"; }
[tester::#NE3] [test-4] $ ./your_program.sh run test.lox
[your_program] evaluating var stage = unknown
[your_program] evaluating var age = 92.0
[your_program] evaluating (if ((< var age 18.0)) (block (= var stage child)))
[your_program] evaluating (if ((>= var age 18.0)) (block (= var stage adult)))
[your_program] evaluating print var stage
[your_program] evaluating var isAdult = (>= var age 18.0)
[your_program] evaluating (if (var isAdult) (block print eligible for voting: true))
[your_program] evaluating (if ((! var isAdult)) (block print eligible for voting: false))
[your_program] adult
[your_program] eligible for voting: true
[tester::#NE3] [test-4] ✓ 2 line(s) match on stdout
[tester::#NE3] [test-4] ✓ Received exit code 0.
[tester::#NE3] Test passed.

[tester::#ST5] Running tests for Stage #ST5 (Control Flow - Else statements)
[tester::#ST5] [test-1] Running test case: 1
[tester::#ST5] [test-1] Writing contents to ./test.lox:
[tester::#ST5] [test-1] [test.lox] if (true) print "if branch"; else print "else branch";
[tester::#ST5] [test-1] $ ./your_program.sh run test.lox
[your_program] if branch
[your_program] evaluating (if (true) print if branch)
[tester::#ST5] [test-1] ✓ 1 line(s) match on stdout
[tester::#ST5] [test-1] ✓ Received exit code 0.
[tester::#ST5] [test-2] Running test case: 2
[tester::#ST5] [test-2] Writing contents to ./test.lox:
[tester::#ST5] [test-2] [test.lox] var age = 37;
[tester::#ST5] [test-2] [test.lox] if (age > 18) print "adult"; else print "child";
[tester::#ST5] [test-2] $ ./your_program.sh run test.lox
[your_program] evaluating var age = 37.0
[your_program] evaluating (if ((> var age 18.0)) print adult)
[your_program] adult
[tester::#ST5] [test-2] ✓ 1 line(s) match on stdout
[tester::#ST5] [test-2] ✓ Received exit code 0.
[tester::#ST5] [test-3] Running test case: 3
[tester::#ST5] [test-3] Writing contents to ./test.lox:
[tester::#ST5] [test-3] [test.lox] if (true) {
[tester::#ST5] [test-3] [test.lox]   print "if block";
[tester::#ST5] [test-3] [test.lox] } else print "else statement";
[tester::#ST5] [test-3] [test.lox] 
[tester::#ST5] [test-3] [test.lox] if (true) print "if statement"; else {
[tester::#ST5] [test-3] [test.lox]   print "else block";
[tester::#ST5] [test-3] [test.lox] }
[tester::#ST5] [test-3] $ ./your_program.sh run test.lox
[your_program] if block
[your_program] if statement
[your_program] evaluating (if (true) (block print if block))
[your_program] evaluating (if (true) print if statement)
[tester::#ST5] [test-3] ✓ 2 line(s) match on stdout
[tester::#ST5] [test-3] ✓ Received exit code 0.
[tester::#ST5] [test-4] Running test case: 4
[tester::#ST5] [test-4] Writing contents to ./test.lox:
[tester::#ST5] [test-4] [test.lox] var celsius = 15;
[tester::#ST5] [test-4] [test.lox] var fahrenheit = 0;
[tester::#ST5] [test-4] [test.lox] var isHot = false;
[tester::#ST5] [test-4] [test.lox] 
[tester::#ST5] [test-4] [test.lox] {
[tester::#ST5] [test-4] [test.lox]   fahrenheit = celsius * 9 / 5 + 32;
[tester::#ST5] [test-4] [test.lox]   print celsius; print fahrenheit;
[tester::#ST5] [test-4] [test.lox] 
[tester::#ST5] [test-4] [test.lox]   if (celsius > 30) {
[tester::#ST5] [test-4] [test.lox]     isHot = true;
[tester::#ST5] [test-4] [test.lox]     print "It's a hot day. Stay hydrated!";
[tester::#ST5] [test-4] [test.lox]   } else {
[tester::#ST5] [test-4] [test.lox]     print "It's cold today. Wear a jacket!";
[tester::#ST5] [test-4] [test.lox]   }
[tester::#ST5] [test-4] [test.lox] 
[tester::#ST5] [test-4] [test.lox]   if (isHot) { print "Remember to use sunscreen!"; }
[tester::#ST5] [test-4] [test.lox] }
[tester::#ST5] [test-4] $ ./your_program.sh run test.lox
[your_program] evaluating var celsius = 15.0
[your_program] evaluating var fahrenheit = 0.0
[your_program] evaluating var isHot = false
[your_program] evaluating (block (= var fahrenheit (+ (/ (* var celsius 9.0) 5.0) 32.0)), print var celsius, print var fahrenheit, (if ((> var celsius 30.0)) (block (= var isHot true), print It's a hot day. Stay hydrated!)), (if (var isHot) (block print Remember to use sunscreen!)))
[your_program] 15
[your_program] 59
[your_program] It's cold today. Wear a jacket!
[tester::#ST5] [test-4] ✓ 3 line(s) match on stdout
[tester::#ST5] [test-4] ✓ Received exit code 0.
[tester::#ST5] Test passed.

[tester::#FH8] Running tests for Stage #FH8 (Control Flow - Else-if statements)
[tester::#FH8] [test-1] Running test case: 1
[tester::#FH8] [test-1] Writing contents to ./test.lox:
[tester::#FH8] [test-1] [test.lox] if (true) print "if branch"; else if (true) print "else-if branch";
[tester::#FH8] [test-1] $ ./your_program.sh run test.lox
[your_program] if branch
[your_program] evaluating (if (true) print if branch)
[tester::#FH8] [test-1] ✓ 1 line(s) match on stdout
[tester::#FH8] [test-1] ✓ Received exit code 0.
[tester::#FH8] [test-2] Running test case: 2
[tester::#FH8] [test-2] Writing contents to ./test.lox:
[tester::#FH8] [test-2] [test.lox] if (false) {
[tester::#FH8] [test-2] [test.lox]   print "world";
[tester::#FH8] [test-2] [test.lox] } else if (false) print "world";
[tester::#FH8] [test-2] [test.lox] 
[tester::#FH8] [test-2] [test.lox] if (false) print "world"; else if (false) {
[tester::#FH8] [test-2] [test.lox]   print "world";
[tester::#FH8] [test-2] [test.lox] }
[tester::#FH8] [test-2] [test.lox] 
[tester::#FH8] [test-2] $ ./your_program.sh run test.lox
[your_program] evaluating (if (false) (block print world))
[your_program] evaluating (if (false) print world)
[tester::#FH8] [test-2] ✓ 1 line(s) match on stdout
[tester::#FH8] [test-2] ✓ Received exit code 0.
[tester::#FH8] [test-3] Running test case: 3
[tester::#FH8] [test-3] Writing contents to ./test.lox:
[tester::#FH8] [test-3] [test.lox] var age = 65;
[tester::#FH8] [test-3] [test.lox] var stage = "unknown";
[tester::#FH8] [test-3] [test.lox] if (age < 18) { stage = "child"; }
[tester::#FH8] [test-3] [test.lox] else if (age >= 18) { stage = "adult"; }
[tester::#FH8] [test-3] [test.lox] else if (age >= 65) { stage = "senior"; }
[tester::#FH8] [test-3] [test.lox] else if (age >= 100) { stage = "centenarian"; }
[tester::#FH8] [test-3] [test.lox] print stage;
[tester::#FH8] [test-3] $ ./your_program.sh run test.lox
[your_program] adult
[your_program] evaluating var age = 65.0
[your_program] evaluating var stage = unknown
[your_program] evaluating (if ((< var age 18.0)) (block (= var stage child)))
[your_program] evaluating print var stage
[tester::#FH8] [test-3] ✓ 1 line(s) match on stdout
[tester::#FH8] [test-3] ✓ Received exit code 0.
[tester::#FH8] [test-4] Running test case: 4
[tester::#FH8] [test-4] Writing contents to ./test.lox:
[tester::#FH8] [test-4] [test.lox] var age = 92;
[tester::#FH8] [test-4] [test.lox] 
[tester::#FH8] [test-4] [test.lox] var isAdult = age >= 18;
[tester::#FH8] [test-4] [test.lox] if (isAdult) { print "eligible for voting: true"; }
[tester::#FH8] [test-4] [test.lox] else { print "eligible for voting: false"; }
[tester::#FH8] [test-4] [test.lox] 
[tester::#FH8] [test-4] [test.lox] if (age < 16) { print "eligible for driving: false"; }
[tester::#FH8] [test-4] [test.lox] else if (age < 18) { print "eligible for driving: learner's permit"; }
[tester::#FH8] [test-4] [test.lox] else { print "eligible for driving: full license"; }
[tester::#FH8] [test-4] [test.lox] 
[tester::#FH8] [test-4] [test.lox] if (age < 21) { print "eligible for drinking (US): false"; }
[tester::#FH8] [test-4] [test.lox] else { print "eligible for drinking (US): true"; }
[tester::#FH8] [test-4] $ ./your_program.sh run test.lox
[your_program] eligible for voting: true
[your_program] evaluating var age = 92.0
[your_program] eligible for driving: full license
[your_program] eligible for drinking (US): true
[your_program] evaluating var isAdult = (>= var age 18.0)
[your_program] evaluating (if (var isAdult) (block print eligible for voting: true))
[your_program] evaluating (if ((< var age 16.0)) (block print eligible for driving: false))
[your_program] evaluating (if ((< var age 21.0)) (block print eligible for drinking (US): false))
[tester::#FH8] [test-4] ✓ 3 line(s) match on stdout
[tester::#FH8] [test-4] ✓ Received exit code 0.
[tester::#FH8] Test passed.

[tester::#XJ4] Running tests for Stage #XJ4 (Control Flow - Nested if statements)
[tester::#XJ4] [test-1] Running test case: 1
[tester::#XJ4] [test-1] Writing contents to ./test.lox:
[tester::#XJ4] [test-1] [test.lox] if (true) if (true) print "nested true";
[tester::#XJ4] [test-1] [test.lox] 
[tester::#XJ4] [test-1] $ ./your_program.sh run test.lox
[your_program] nested true
[your_program] evaluating (if (true) (if (true) print nested true))
[tester::#XJ4] [test-1] ✓ 1 line(s) match on stdout
[tester::#XJ4] [test-1] ✓ Received exit code 0.
[tester::#XJ4] [test-2] Running test case: 2
[tester::#XJ4] [test-2] Writing contents to ./test.lox:
[tester::#XJ4] [test-2] [test.lox] if (true) {
[tester::#XJ4] [test-2] [test.lox]   if (true) print "hello"; else print "hello";
[tester::#XJ4] [test-2] [test.lox] }
[tester::#XJ4] [test-2] $ ./your_program.sh run test.lox
[your_program] hello
[your_program] evaluating (if (true) (block (if (true) print hello)))
[tester::#XJ4] [test-2] ✓ 1 line(s) match on stdout
[tester::#XJ4] [test-2] ✓ Received exit code 0.
[tester::#XJ4] [test-3] Running test case: 3
[tester::#XJ4] [test-3] Writing contents to ./test.lox:
[tester::#XJ4] [test-3] [test.lox] var stage = "unknown";
[tester::#XJ4] [test-3] [test.lox] var age = 88;
[tester::#XJ4] [test-3] [test.lox] if (age < 18) {
[tester::#XJ4] [test-3] [test.lox]     if (age < 13) { stage = "child"; }
[tester::#XJ4] [test-3] [test.lox]     else if (age < 16) { stage = "young teenager"; }
[tester::#XJ4] [test-3] [test.lox]     else { stage = "teenager"; }
[tester::#XJ4] [test-3] [test.lox] }
[tester::#XJ4] [test-3] [test.lox] else if (age < 65) {
[tester::#XJ4] [test-3] [test.lox]     if (age < 30) { stage = "young adult"; }
[tester::#XJ4] [test-3] [test.lox]     else if (age < 50) { stage = "adult"; }
[tester::#XJ4] [test-3] [test.lox]     else { stage = "middle-aged adult"; }
[tester::#XJ4] [test-3] [test.lox] }
[tester::#XJ4] [test-3] [test.lox] else { stage = "senior"; }
[tester::#XJ4] [test-3] [test.lox] print stage;
[tester::#XJ4] [test-3] [test.lox] 
[tester::#XJ4] [test-3] [test.lox] var isAdult = age >= 18;
[tester::#XJ4] [test-3] [test.lox] if (isAdult) {
[tester::#XJ4] [test-3] [test.lox]     print "eligible for voting: true";
[tester::#XJ4] [test-3] [test.lox]     if (age < 25) {
[tester::#XJ4] [test-3] [test.lox]         print "first-time voter: likely";
[tester::#XJ4] [test-3] [test.lox]     }
[tester::#XJ4] [test-3] [test.lox]     else { print "first-time voter: unlikely"; }
[tester::#XJ4] [test-3] [test.lox] }
[tester::#XJ4] [test-3] [test.lox] else { print "eligible for voting: false"; }
[tester::#XJ4] [test-3] [test.lox] 
[tester::#XJ4] [test-3] [test.lox] if (age < 16) { print "eligible for driving: false"; }
[tester::#XJ4] [test-3] [test.lox] else if (age < 18) {
[tester::#XJ4] [test-3] [test.lox]     print "eligible for driving: learner's permit";
[tester::#XJ4] [test-3] [test.lox]     if (age < 17) { print "supervised driving required"; }
[tester::#XJ4] [test-3] [test.lox]     else { print "unsupervised driving allowed with restrictions"; }
[tester::#XJ4] [test-3] [test.lox] }
[tester::#XJ4] [test-3] [test.lox] else { print "eligible for driving: full license"; }
[tester::#XJ4] [test-3] [test.lox] 
[tester::#XJ4] [test-3] [test.lox] if (age < 21) { print "eligible for drinking (US): false"; }
[tester::#XJ4] [test-3] [test.lox] else {
[tester::#XJ4] [test-3] [test.lox]     print "eligible for drinking (US): true";
[tester::#XJ4] [test-3] [test.lox]     if (age < 25) { print "remember: drink responsibly!"; }
[tester::#XJ4] [test-3] [test.lox] }
[tester::#XJ4] [test-3] $ ./your_program.sh run test.lox
[your_program] senior
[your_program] eligible for voting: true
[your_program] evaluating var stage = unknown
[your_program] evaluating var age = 88.0
[your_program] first-time voter: unlikely
[your_program] eligible for driving: full license
[your_program] evaluating (if ((< var age 18.0)) (block (if ((< var age 13.0)) (block (= var stage child)))))
[your_program] eligible for drinking (US): true
[your_program] evaluating print var stage
[your_program] evaluating var isAdult = (>= var age 18.0)
[your_program] evaluating (if (var isAdult) (block print eligible for voting: true, (if ((< var age 25.0)) (block print first-time voter: likely))))
[your_program] evaluating (if ((< var age 16.0)) (block print eligible for driving: false))
[your_program] evaluating (if ((< var age 21.0)) (block print eligible for drinking (US): false))
[tester::#XJ4] [test-3] ✓ 5 line(s) match on stdout
[tester::#XJ4] [test-3] ✓ Received exit code 0.
[tester::#XJ4] [test-4] Running test case: 4
[tester::#XJ4] [test-4] Writing contents to ./test.lox:
[tester::#XJ4] [test-4] [test.lox] if (true) if (false) print "hello"; else print "world";
[tester::#XJ4] [test-4] $ ./your_program.sh run test.lox
[your_program] evaluating (if (true) (if (false) print hello))
[your_program] world
[tester::#XJ4] [test-4] ✓ 1 line(s) match on stdout
[tester::#XJ4] [test-4] ✓ Received exit code 0.
[tester::#XJ4] Test passed.

[tester::#WK8] Running tests for Stage #WK8 (Control Flow - Logical OR operator)
[tester::#WK8] [test-1] Running test case: 1
[tester::#WK8] [test-1] Writing contents to ./test.lox:
[tester::#WK8] [test-1] [test.lox] if (false or "ok") print "hello";
[tester::#WK8] [test-1] [test.lox] if (nil or "ok") print "hello";
[tester::#WK8] [test-1] [test.lox] 
[tester::#WK8] [test-1] [test.lox] if (false or false) print "foo";
[tester::#WK8] [test-1] [test.lox] if (true or "foo") print "foo";
[tester::#WK8] [test-1] [test.lox] 
[tester::#WK8] [test-1] [test.lox] if (54 or "bar") print "bar";
[tester::#WK8] [test-1] [test.lox] if ("bar" or "bar") print "bar";
[tester::#WK8] [test-1] [test.lox] 
[tester::#WK8] [test-1] $ ./your_program.sh run test.lox
[your_program] evaluating (if ((or false ok)) print hello)
[your_program] evaluating (if ((or nil ok)) print hello)
[your_program] evaluating (if ((or false false)) print foo)
[your_program] evaluating (if ((or true foo)) print foo)
[your_program] evaluating (if ((or 54.0 bar)) print bar)
[your_program] evaluating (if ((or bar bar)) print bar)
[your_program] hello
[your_program] hello
[your_program] foo
[your_program] bar
[your_program] bar
[tester::#WK8] [test-1] ✓ 5 line(s) match on stdout
[tester::#WK8] [test-1] ✓ Received exit code 0.
[tester::#WK8] [test-2] Running test case: 2
[tester::#WK8] [test-2] Writing contents to ./test.lox:
[tester::#WK8] [test-2] [test.lox] print 23 or true;
[tester::#WK8] [test-2] [test.lox] print false or 23;
[tester::#WK8] [test-2] [test.lox] print false or false or true;
[tester::#WK8] [test-2] [test.lox] 
[tester::#WK8] [test-2] [test.lox] print false or false;
[tester::#WK8] [test-2] [test.lox] print false or false or false;
[tester::#WK8] [test-2] [test.lox] print false or false or false or false;
[tester::#WK8] [test-2] $ ./your_program.sh run test.lox
[your_program] evaluating print (or 23.0 true)
[your_program] evaluating print (or false 23.0)
[your_program] evaluating print (or false (or false true))
[your_program] evaluating print (or false false)
[your_program] evaluating print (or false (or false false))
[your_program] evaluating print (or false (or false (or false false)))
[your_program] 23
[your_program] 23
[your_program] true
[your_program] false
[your_program] false
[your_program] false
[tester::#WK8] [test-2] ✓ 6 line(s) match on stdout
[tester::#WK8] [test-2] ✓ Received exit code 0.
[tester::#WK8] [test-3] Running test case: 3
[tester::#WK8] [test-3] Writing contents to ./test.lox:
[tester::#WK8] [test-3] [test.lox] var a = "hello";
[tester::#WK8] [test-3] [test.lox] var b = "hello";
[tester::#WK8] [test-3] [test.lox] (a = false) or (b = true) or (a = "hello");
[tester::#WK8] [test-3] [test.lox] print a;
[tester::#WK8] [test-3] [test.lox] print b;
[tester::#WK8] [test-3] $ ./your_program.sh run test.lox
[your_program] false
[your_program] true
[your_program] evaluating var a = hello
[your_program] evaluating var b = hello
[your_program] evaluating (or (group (= var a false)) (or (group (= var b true)) (group (= var a hello))))
[your_program] evaluating print var a
[your_program] evaluating print var b
[tester::#WK8] [test-3] ✓ 2 line(s) match on stdout
[tester::#WK8] [test-3] ✓ Received exit code 0.
[tester::#WK8] [test-4] Running test case: 4
[tester::#WK8] [test-4] Writing contents to ./test.lox:
[tester::#WK8] [test-4] [test.lox] var stage = "unknown";
[tester::#WK8] [test-4] [test.lox] var age = 41;
[tester::#WK8] [test-4] [test.lox] if (age < 18) { stage = "child"; }
[tester::#WK8] [test-4] [test.lox] if (age >= 18) { stage = "adult"; }
[tester::#WK8] [test-4] [test.lox] print stage;
[tester::#WK8] [test-4] [test.lox] 
[tester::#WK8] [test-4] [test.lox] var isAdult = age >= 18;
[tester::#WK8] [test-4] [test.lox] if (isAdult) { print "eligible for voting: true"; }
[tester::#WK8] [test-4] [test.lox] if (!isAdult) { print "eligible for voting: false"; }
[tester::#WK8] [test-4] $ ./your_program.sh run test.lox
[your_program] evaluating var stage = unknown
[your_program] evaluating var age = 41.0
[your_program] evaluating (if ((< var age 18.0)) (block (= var stage child)))
[your_program] evaluating (if ((>= var age 18.0)) (block (= var stage adult)))
[your_program] evaluating print var stage
[your_program] evaluating var isAdult = (>= var age 18.0)
[your_program] evaluating (if (var isAdult) (block print eligible for voting: true))
[your_program] evaluating (if ((! var isAdult)) (block print eligible for voting: false))
[your_program] adult
[your_program] eligible for voting: true
[tester::#WK8] [test-4] ✓ 2 line(s) match on stdout
[tester::#WK8] [test-4] ✓ Received exit code 0.
[tester::#WK8] Test passed.

[tester::#JX4] Running tests for Stage #JX4 (Control Flow - Logical AND operator)
[tester::#JX4] [test-1] Running test case: 1
[tester::#JX4] [test-1] Writing contents to ./test.lox:
[tester::#JX4] [test-1] [test.lox] if (false and "bad") print "foo";
[tester::#JX4] [test-1] [test.lox] if (nil and "bad") print "foo";
[tester::#JX4] [test-1] [test.lox] 
[tester::#JX4] [test-1] [test.lox] if (true and "quz") print "quz";
[tester::#JX4] [test-1] [test.lox] if (83 and "hello") print "hello";
[tester::#JX4] [test-1] [test.lox] if ("hello" and "hello") print "hello";
[tester::#JX4] [test-1] [test.lox] if ("" and "world") print "world";
[tester::#JX4] [test-1] $ ./your_program.sh run test.lox
[your_program] quz
[your_program] evaluating (if ((and false bad)) print foo)
[your_program] hello
[your_program] evaluating (if ((and nil bad)) print foo)
[your_program] hello
[your_program] world
[your_program] evaluating (if ((and true quz)) print quz)
[your_program] evaluating (if ((and 83.0 hello)) print hello)
[your_program] evaluating (if ((and hello hello)) print hello)
[your_program] evaluating (if ((and  world)) print world)
[tester::#JX4] [test-1] ✓ 4 line(s) match on stdout
[tester::#JX4] [test-1] ✓ Received exit code 0.
[tester::#JX4] [test-2] Running test case: 2
[tester::#JX4] [test-2] Writing contents to ./test.lox:
[tester::#JX4] [test-2] [test.lox] print false and 1;
[tester::#JX4] [test-2] [test.lox] print true and 1;
[tester::#JX4] [test-2] [test.lox] print 88 and "bar" and false;
[tester::#JX4] [test-2] [test.lox] 
[tester::#JX4] [test-2] [test.lox] print 88 and true;
[tester::#JX4] [test-2] [test.lox] print 88 and "bar" and 88;
[tester::#JX4] [test-2] $ ./your_program.sh run test.lox
[your_program] false
[your_program] 1
[your_program] false
[your_program] true
[your_program] 88
[your_program] evaluating print (and false 1.0)
[your_program] evaluating print (and true 1.0)
[your_program] evaluating print (and 88.0 (and bar false))
[your_program] evaluating print (and 88.0 true)
[your_program] evaluating print (and 88.0 (and bar 88.0))
[tester::#JX4] [test-2] ✓ 5 line(s) match on stdout
[tester::#JX4] [test-2] ✓ Received exit code 0.
[tester::#JX4] [test-3] Running test case: 3
[tester::#JX4] [test-3] Writing contents to ./test.lox:
[tester::#JX4] [test-3] [test.lox] var a = "hello";
[tester::#JX4] [test-3] [test.lox] var b = "hello";
[tester::#JX4] [test-3] [test.lox] (a = true) and (b = false) and (a = "bad");
[tester::#JX4] [test-3] [test.lox] print a;
[tester::#JX4] [test-3] [test.lox] print b;
[tester::#JX4] [test-3] $ ./your_program.sh run test.lox
[your_program] true
[your_program] false
[your_program] evaluating var a = hello
[your_program] evaluating var b = hello
[your_program] evaluating (and (group (= var a true)) (and (group (= var b false)) (group (= var a bad))))
[your_program] evaluating print var a
[your_program] evaluating print var b
[tester::#JX4] [test-3] ✓ 2 line(s) match on stdout
[tester::#JX4] [test-3] ✓ Received exit code 0.
[tester::#JX4] [test-4] Running test case: 4
[tester::#JX4] [test-4] Writing contents to ./test.lox:
[tester::#JX4] [test-4] [test.lox] var stage = "unknown";
[tester::#JX4] [test-4] [test.lox] var age = 68;
[tester::#JX4] [test-4] [test.lox] if (age < 18) { stage = "child"; }
[tester::#JX4] [test-4] [test.lox] if (age >= 18) { stage = "adult"; }
[tester::#JX4] [test-4] [test.lox] print stage;
[tester::#JX4] [test-4] [test.lox] 
[tester::#JX4] [test-4] [test.lox] var isAdult = age >= 18;
[tester::#JX4] [test-4] [test.lox] if (isAdult) { print "eligible for voting: true"; }
[tester::#JX4] [test-4] [test.lox] if (!isAdult) { print "eligible for voting: false"; }
[tester::#JX4] [test-4] $ ./your_program.sh run test.lox
[your_program] adult
[your_program] eligible for voting: true
[your_program] evaluating var stage = unknown
[your_program] evaluating var age = 68.0
[your_program] evaluating (if ((< var age 18.0)) (block (= var stage child)))
[your_program] evaluating (if ((>= var age 18.0)) (block (= var stage adult)))
[your_program] evaluating print var stage
[your_program] evaluating var isAdult = (>= var age 18.0)
[your_program] evaluating (if (var isAdult) (block print eligible for voting: true))
[your_program] evaluating (if ((! var isAdult)) (block print eligible for voting: false))
[tester::#JX4] [test-4] ✓ 2 line(s) match on stdout
[tester::#JX4] [test-4] ✓ Received exit code 0.
[tester::#JX4] Test passed.

[tester::#QY3] Running tests for Stage #QY3 (Control Flow - While statements)
[tester::#QY3] [test-1] Running test case: 1
[tester::#QY3] [test-1] Writing contents to ./test.lox:
[tester::#QY3] [test-1] [test.lox] var world = 0;
[tester::#QY3] [test-1] [test.lox] while (world < 3) print world = world + 1;
[tester::#QY3] [test-1] $ ./your_program.sh run test.lox
[your_program] 1
[your_program] 2
[your_program] 3
[your_program] evaluating var world = 0.0
[your_program] evaluating (while ((< var world 3.0)) print (= var world (+ var world 1.0)))
[tester::#QY3] [test-1] ✓ 3 line(s) match on stdout
[tester::#QY3] [test-1] ✓ Received exit code 0.
[tester::#QY3] [test-2] Running test case: 2
[tester::#QY3] [test-2] Writing contents to ./test.lox:
[tester::#QY3] [test-2] [test.lox] var quz = 0;
[tester::#QY3] [test-2] [test.lox] while (quz < 3) {
[tester::#QY3] [test-2] [test.lox]   print quz;
[tester::#QY3] [test-2] [test.lox]   quz = quz + 1;
[tester::#QY3] [test-2] [test.lox] }
[tester::#QY3] [test-2] $ ./your_program.sh run test.lox
[your_program] evaluating var quz = 0.0
[your_program] evaluating (while ((< var quz 3.0)) (block print var quz, (= var quz (+ var quz 1.0))))
[your_program] 0
[your_program] 1
[your_program] 2
[tester::#QY3] [test-2] ✓ 3 line(s) match on stdout
[tester::#QY3] [test-2] ✓ Received exit code 0.
[tester::#QY3] [test-3] Running test case: 3
[tester::#QY3] [test-3] Writing contents to ./test.lox:
[tester::#QY3] [test-3] [test.lox] while (false) { print "should not print"; }
[tester::#QY3] [test-3] [test.lox] 
[tester::#QY3] [test-3] [test.lox] var product = 1;
[tester::#QY3] [test-3] [test.lox] var i = 1;
[tester::#QY3] [test-3] [test.lox] 
[tester::#QY3] [test-3] [test.lox] while (i <= 5) {
[tester::#QY3] [test-3] [test.lox]   product = product * i;
[tester::#QY3] [test-3] [test.lox]   i = i + 1;
[tester::#QY3] [test-3] [test.lox] }
[tester::#QY3] [test-3] [test.lox] 
[tester::#QY3] [test-3] [test.lox] print "Factorial of 5: "; print product;
[tester::#QY3] [test-3] [test.lox] 
[tester::#QY3] [test-3] $ ./your_program.sh run test.lox
[your_program] evaluating (while (false) (block print should not print))
[your_program] evaluating var product = 1.0
[your_program] evaluating var i = 1.0
[your_program] evaluating (while ((<= var i 5.0)) (block (= var product (* var product var i)), (= var i (+ var i 1.0))))
[your_program] evaluating print Factorial of 5: 
[your_program] evaluating print var product
[your_program] Factorial of 5: 
[your_program] 120
[tester::#QY3] [test-3] ✓ 2 line(s) match on stdout
[tester::#QY3] [test-3] ✓ Received exit code 0.
[tester::#QY3] [test-4] Running test case: 4
[tester::#QY3] [test-4] Writing contents to ./test.lox:
[tester::#QY3] [test-4] [test.lox] var n = 10;
[tester::#QY3] [test-4] [test.lox] var fm = 0;
[tester::#QY3] [test-4] [test.lox] var fn = 1;
[tester::#QY3] [test-4] [test.lox] var index = 0;
[tester::#QY3] [test-4] [test.lox] 
[tester::#QY3] [test-4] [test.lox] while (index < n) {
[tester::#QY3] [test-4] [test.lox]     print fm;
[tester::#QY3] [test-4] [test.lox]     var temp = fm;
[tester::#QY3] [test-4] [test.lox]     fm = fn;
[tester::#QY3] [test-4] [test.lox]     fn = temp + fn;
[tester::#QY3] [test-4] [test.lox]     index = index + 1;
[tester::#QY3] [test-4] [test.lox] }
[tester::#QY3] [test-4] $ ./your_program.sh run test.lox
[your_program] 0
[your_program] 1
[your_program] 1
[your_program] 2
[your_program] 3
[your_program] 5
[your_program] 8
[your_program] 13
[your_program] 21
[your_program] 34
[your_program] evaluating var n = 10.0
[your_program] evaluating var fm = 0.0
[your_program] evaluating var fn = 1.0
[your_program] evaluating var index = 0.0
[your_program] evaluating (while ((< var index var n)) (block print var fm, var temp = var fm, (= var fm var fn), (= var fn (+ var temp var fn)), (= var index (+ var index 1.0))))
[tester::#QY3] [test-4] ✓ 10 line(s) match on stdout
[tester::#QY3] [test-4] ✓ Received exit code 0.
[tester::#QY3] Test passed.

[tester::#BW6] Running tests for Stage #BW6 (Control Flow - For statements)
[tester::#BW6] [test-1] Running test case: 1
[tester::#BW6] [test-1] Writing contents to ./test.lox:
[tester::#BW6] [test-1] [test.lox] for (var world = 0; world < 3;) print world = world + 1;
[tester::#BW6] [test-1] $ ./your_program.sh run test.lox
[your_program] 1
[your_program] 2
[your_program] 3
[your_program] evaluating (for (var world = 0.0; (< var world 3.0); ) print (= var world (+ var world 1.0)))
[tester::#BW6] [test-1] ✓ 3 line(s) match on stdout
[tester::#BW6] [test-1] ✓ Received exit code 0.
[tester::#BW6] [test-2] Running test case: 2
[tester::#BW6] [test-2] Writing contents to ./test.lox:
[tester::#BW6] [test-2] [test.lox] for (var baz = 0; baz < 3; baz = baz + 1) {
[tester::#BW6] [test-2] [test.lox]   print baz;
[tester::#BW6] [test-2] [test.lox] }
[tester::#BW6] [test-2] $ ./your_program.sh run test.lox
[your_program] 0
[your_program] 1
[your_program] 2
[your_program] evaluating (for (var baz = 0.0; (< var baz 3.0); (= var baz (+ var baz 1.0))) (block print var baz))
[tester::#BW6] [test-2] ✓ 3 line(s) match on stdout
[tester::#BW6] [test-2] ✓ Received exit code 0.
[tester::#BW6] [test-3] Running test case: 3
[tester::#BW6] [test-3] Writing contents to ./test.lox:
[tester::#BW6] [test-3] [test.lox] var foo = 0;
[tester::#BW6] [test-3] [test.lox] for (; foo < 2; foo = foo + 1) print foo;
[tester::#BW6] [test-3] [test.lox] 
[tester::#BW6] [test-3] [test.lox] for (var quz = 0; quz < 2;) {
[tester::#BW6] [test-3] [test.lox]   print quz;
[tester::#BW6] [test-3] [test.lox]   quz = quz + 1;
[tester::#BW6] [test-3] [test.lox] }
[tester::#BW6] [test-3] $ ./your_program.sh run test.lox
[your_program] 0
[your_program] 1
[your_program] 0
[your_program] 1
[your_program] evaluating var foo = 0.0
[your_program] evaluating (for (; (< var foo 2.0); (= var foo (+ var foo 1.0))) print var foo)
[your_program] evaluating (for (var quz = 0.0; (< var quz 2.0); ) (block print var quz, (= var quz (+ var quz 1.0))))
[tester::#BW6] [test-3] ✓ 4 line(s) match on stdout
[tester::#BW6] [test-3] ✓ Received exit code 0.
[tester::#BW6] [test-4] Running test case: 4
[tester::#BW6] [test-4] Writing contents to ./test.lox:
[tester::#BW6] [test-4] [test.lox] var world = "after";
[tester::#BW6] [test-4] [test.lox] {
[tester::#BW6] [test-4] [test.lox]   var world = "before";
[tester::#BW6] [test-4] [test.lox] 
[tester::#BW6] [test-4] [test.lox]   for (var world = 0; world < 1; world = world + 1) {
[tester::#BW6] [test-4] [test.lox]     print world;
[tester::#BW6] [test-4] [test.lox]     var world = -1;
[tester::#BW6] [test-4] [test.lox]     print world;
[tester::#BW6] [test-4] [test.lox]   }
[tester::#BW6] [test-4] [test.lox] }
[tester::#BW6] [test-4] [test.lox] 
[tester::#BW6] [test-4] [test.lox] {
[tester::#BW6] [test-4] [test.lox]   for (var world = 0; world > 0; world = world + 1) {}
[tester::#BW6] [test-4] [test.lox] 
[tester::#BW6] [test-4] [test.lox]   var world = "after";
[tester::#BW6] [test-4] [test.lox]   print world;
[tester::#BW6] [test-4] [test.lox] 
[tester::#BW6] [test-4] [test.lox]   for (world = 0; world < 1; world = world + 1) {
[tester::#BW6] [test-4] [test.lox]     print world;
[tester::#BW6] [test-4] [test.lox]   }
[tester::#BW6] [test-4] [test.lox] }
[tester::#BW6] [test-4] $ ./your_program.sh run test.lox
[your_program] evaluating var world = after
[your_program] evaluating (block var world = before, (for (var world = 0.0; (< var world 1.0); (= var world (+ var world 1.0))) (block print var world, var world = (- 1.0), print var world)))
[your_program] evaluating (block (for (var world = 0.0; (> var world 0.0); (= var world (+ var world 1.0))) (block )), var world = after, print var world, (for ((= var world 0.0); (< var world 1.0); (= var world (+ var world 1.0))) (block print var world)))
[your_program] 0
[your_program] -1
[your_program] after
[your_program] 0
[tester::#BW6] [test-4] ✓ 4 line(s) match on stdout
[tester::#BW6] [test-4] ✓ Received exit code 0.
[tester::#BW6] Test passed.

[tester::#VT1] Running tests for Stage #VT1 (Control Flow - Syntactic errors)
[tester::#VT1] [test-1] Running test case: 1
[tester::#VT1] [test-1] Writing contents to ./test.lox:
[tester::#VT1] [test-1] [test.lox] for (;;) var foo;
[tester::#VT1] [test-1] $ ./your_program.sh run test.lox
[tester::#VT1] [test-1] ✓ 1 line(s) match on stdout
[tester::#VT1] [test-1] ✓ Received exit code 65.
[tester::#VT1] [test-2] Running test case: 2
[tester::#VT1] [test-2] Writing contents to ./test.lox:
[tester::#VT1] [test-2] [test.lox] // Invalid condition for condition
[tester::#VT1] [test-2] [test.lox] for (var a = 1; {}; a = a + 1) {}
[tester::#VT1] [test-2] $ ./your_program.sh run test.lox
[your_program] comment: //Invalid condition for condition
[your_program] BlockExpression cannot be used as condition for FOR expression
[tester::#VT1] [test-2] ✓ 1 line(s) match on stdout
[tester::#VT1] [test-2] ✓ Received exit code 65.
[tester::#VT1] [test-3] Running test case: 3
[tester::#VT1] [test-3] Writing contents to ./test.lox:
[tester::#VT1] [test-3] [test.lox] // Invalid condition for increment
[tester::#VT1] [test-3] [test.lox] for (var a = 1; a < 2; {}) {}
[tester::#VT1] [test-3] $ ./your_program.sh run test.lox
[your_program] comment: //Invalid condition for increment
[your_program] BlockExpression cannot be used as after for FOR expression
[tester::#VT1] [test-3] ✓ 1 line(s) match on stdout
[tester::#VT1] [test-3] ✓ Received exit code 65.
[tester::#VT1] [test-4] Running test case: 4
[tester::#VT1] [test-4] Writing contents to ./test.lox:
[tester::#VT1] [test-4] [test.lox] // Invalid condition for initialization
[tester::#VT1] [test-4] [test.lox] for ({}; a < 2; a = a + 1) {}
[tester::#VT1] [test-4] $ ./your_program.sh run test.lox
[your_program] comment: //Invalid condition for initialization
[your_program] BlockExpression cannot be used as init for FOR expression
[tester::#VT1] [test-4] ✓ 1 line(s) match on stdout
[tester::#VT1] [test-4] ✓ Received exit code 65.
[tester::#VT1] Test passed.

[tester::#AV4] Running tests for Stage #AV4 (Functions - Native functions)
[tester::#AV4] [test-1] Running test case: 1
[tester::#AV4] [test-1] Writing contents to ./test.lox:
[tester::#AV4] [test-1] [test.lox] print clock() + 22;
[tester::#AV4] [test-1] $ ./your_program.sh run test.lox
[your_program] 1731871729
[your_program] evaluating print (+ clock() 22.0)
[tester::#AV4] [test-1] ✓ 1731871729.000000
[tester::#AV4] [test-1] ✓ 1 line(s) match on stdout
[tester::#AV4] [test-1] ✓ Received exit code 0.
[tester::#AV4] [test-2] Running test case: 2
[tester::#AV4] [test-2] Writing contents to ./test.lox:
[tester::#AV4] [test-2] [test.lox] print clock() / 1000;
[tester::#AV4] [test-2] $ ./your_program.sh run test.lox
[your_program] 1731871.707
[your_program] evaluating print (/ clock() 1000.0)
[tester::#AV4] [test-2] ✓ 1731871.707000
[tester::#AV4] [test-2] ✓ 1 line(s) match on stdout
[tester::#AV4] [test-2] ✓ Received exit code 0.
[tester::#AV4] [test-3] Running test case: 3
[tester::#AV4] [test-3] Writing contents to ./test.lox:
[tester::#AV4] [test-3] [test.lox] var startTime = clock();
[tester::#AV4] [test-3] [test.lox] var timeoutSeconds = 2;
[tester::#AV4] [test-3] [test.lox] 
[tester::#AV4] [test-3] [test.lox] // Check if less than 2 seconds have elapsed
[tester::#AV4] [test-3] [test.lox] if ((clock() >= startTime) and (clock() <= (startTime + timeoutSeconds))) {
[tester::#AV4] [test-3] [test.lox]   print "Operation in progress...";
[tester::#AV4] [test-3] [test.lox] } else {
[tester::#AV4] [test-3] [test.lox]   print "Operation timed out!";
[tester::#AV4] [test-3] [test.lox] }
[tester::#AV4] [test-3] $ ./your_program.sh run test.lox
[your_program] comment: //Check if less than 2 seconds have elapsed
[your_program] evaluating var startTime = clock()
[your_program] Operation in progress...
[your_program] evaluating var timeoutSeconds = 2.0
[your_program] evaluating (if ((and (group (>= clock() var startTime)) (group (<= clock() (group (+ var startTime var timeoutSeconds)))))) (block print Operation in progress...))
[tester::#AV4] [test-3] ✓ 1 line(s) match on stdout
[tester::#AV4] [test-3] ✓ Received exit code 0.
[tester::#AV4] [test-4] Running test case: 4
[tester::#AV4] [test-4] Writing contents to ./test.lox:
[tester::#AV4] [test-4] [test.lox] var startTime = clock();
[tester::#AV4] [test-4] [test.lox] var lastCheck = startTime;
[tester::#AV4] [test-4] [test.lox] var running = true;
[tester::#AV4] [test-4] [test.lox] 
[tester::#AV4] [test-4] [test.lox] print "Starting timer for 0.2 seconds";
[tester::#AV4] [test-4] [test.lox] var startTime = clock();
[tester::#AV4] [test-4] [test.lox] 
[tester::#AV4] [test-4] [test.lox] while (running) {
[tester::#AV4] [test-4] [test.lox]   if (clock() > startTime + 0.2) {
[tester::#AV4] [test-4] [test.lox]     print "Timer ended";
[tester::#AV4] [test-4] [test.lox]     running = false;
[tester::#AV4] [test-4] [test.lox]   }
[tester::#AV4] [test-4] [test.lox] }
[tester::#AV4] [test-4] $ ./your_program.sh run test.lox
[your_program] evaluating var startTime = clock()
[your_program] evaluating var lastCheck = var startTime
[your_program] evaluating var running = true
[your_program] evaluating print Starting timer for 0.2 seconds
[your_program] evaluating var startTime = clock()
[your_program] evaluating (while (var running) (block (if ((> clock() (+ var startTime 0.2))) (block print Timer ended, (= var running false)))))
[your_program] Starting timer for 0.2 seconds
[your_program] Timer ended
[tester::#AV4] [test-4] ✓ 2 line(s) match on stdout
[tester::#AV4] [test-4] ✓ Received exit code 0.
[tester::#AV4] Test passed.

[tester::#PG8] Running tests for Stage #PG8 (Functions - Functions without arguments)
[tester::#PG8] [test-1] Running test case: 1
[tester::#PG8] [test-1] Writing contents to ./test.lox:
[tester::#PG8] [test-1] [test.lox] // This function, when invoked should print 49
[tester::#PG8] [test-1] [test.lox] fun hello() { print 49; }
[tester::#PG8] [test-1] [test.lox] hello();
[tester::#PG8] [test-1] $ ./your_program.sh run test.lox
[your_program] comment: //This function, when invoked should print 49
[your_program] evaluating fun hello()
[your_program] evaluating hello()
[your_program] 49
[tester::#PG8] [test-1] ✓ 1 line(s) match on stdout
[tester::#PG8] [test-1] ✓ Received exit code 0.
[tester::#PG8] [test-2] Running test case: 2
[tester::#PG8] [test-2] Writing contents to ./test.lox:
[tester::#PG8] [test-2] [test.lox] // This function, when invoked should not return or print anything
[tester::#PG8] [test-2] [test.lox] fun f() {}
[tester::#PG8] [test-2] [test.lox] f();
[tester::#PG8] [test-2] $ ./your_program.sh run test.lox
[your_program] comment: //This function, when invoked should not return or print anything
[your_program] evaluating fun f()
[your_program] evaluating f()
[tester::#PG8] [test-2] ✓ 1 line(s) match on stdout
[tester::#PG8] [test-2] ✓ Received exit code 0.
[tester::#PG8] [test-3] Running test case: 3
[tester::#PG8] [test-3] Writing contents to ./test.lox:
[tester::#PG8] [test-3] [test.lox] // This program should print <fn foo>
[tester::#PG8] [test-3] [test.lox] fun foo() {}
[tester::#PG8] [test-3] [test.lox] print foo;
[tester::#PG8] [test-3] $ ./your_program.sh run test.lox
[your_program] <fn foo>
[your_program] comment: //This program should print <fn foo>
[your_program] evaluating fun foo()
[your_program] evaluating print var foo
[tester::#PG8] [test-3] ✓ 1 line(s) match on stdout
[tester::#PG8] [test-3] ✓ Received exit code 0.
[tester::#PG8] [test-4] Running test case: 4
[tester::#PG8] [test-4] Writing contents to ./test.lox:
[tester::#PG8] [test-4] [test.lox] // This program calculates the cumulative sum of numbers from 1 to n.
[tester::#PG8] [test-4] [test.lox] fun cumulative_sum() {
[tester::#PG8] [test-4] [test.lox]     var n = 10;  // Fixed value
[tester::#PG8] [test-4] [test.lox]     var total = 0;
[tester::#PG8] [test-4] [test.lox]     var i = 1;
[tester::#PG8] [test-4] [test.lox]     while (i <= n) {
[tester::#PG8] [test-4] [test.lox]         total = total + i;
[tester::#PG8] [test-4] [test.lox]         i = i + 1;
[tester::#PG8] [test-4] [test.lox]     }
[tester::#PG8] [test-4] [test.lox]     print "The cumulative sum from 1 to 10 is: ";
[tester::#PG8] [test-4] [test.lox]     print total;
[tester::#PG8] [test-4] [test.lox] }
[tester::#PG8] [test-4] [test.lox] 
[tester::#PG8] [test-4] [test.lox] cumulative_sum();
[tester::#PG8] [test-4] $ ./your_program.sh run test.lox
[your_program] The cumulative sum from 1 to 10 is: 
[your_program] 55
[your_program] comment: //This program calculates the cumulative sum of numbers from 1 to n.
[your_program] comment: //Fixed value
[your_program] evaluating fun cumulative_sum()
[your_program] evaluating cumulative_sum()
[tester::#PG8] [test-4] ✓ 2 line(s) match on stdout
[tester::#PG8] [test-4] ✓ Received exit code 0.
[tester::#PG8] Test passed.

[tester::#LB6] Running tests for Stage #LB6 (Functions - Functions with arguments)
[tester::#LB6] [test-1] Running test case: 1
[tester::#LB6] [test-1] Writing contents to ./test.lox:
[tester::#LB6] [test-1] [test.lox] // This is a simple function that takes one argument and prints it
[tester::#LB6] [test-1] [test.lox] fun f1(a) { print a; }
[tester::#LB6] [test-1] [test.lox] f1(31);
[tester::#LB6] [test-1] $ ./your_program.sh run test.lox
[your_program] 31
[your_program] comment: //This is a simple function that takes one argument and prints it
[your_program] evaluating fun f1()
[your_program] evaluating f1()
[tester::#LB6] [test-1] ✓ 1 line(s) match on stdout
[tester::#LB6] [test-1] ✓ Received exit code 0.
[tester::#LB6] [test-2] Running test case: 2
[tester::#LB6] [test-2] Writing contents to ./test.lox:
[tester::#LB6] [test-2] [test.lox] // This function takes three arguments and prints their sum
[tester::#LB6] [test-2] [test.lox] fun f3(a, b, c) { print a + b + c; }
[tester::#LB6] [test-2] [test.lox] f3(24, 24, 24);
[tester::#LB6] [test-2] [test.lox] 
[tester::#LB6] [test-2] $ ./your_program.sh run test.lox
[your_program] comment: //This function takes three arguments and prints their sum
[your_program] evaluating fun f3()
[your_program] evaluating f3()
[your_program] 72
[tester::#LB6] [test-2] ✓ 1 line(s) match on stdout
[tester::#LB6] [test-2] ✓ Received exit code 0.
[tester::#LB6] [test-3] Running test case: 3
[tester::#LB6] [test-3] Writing contents to ./test.lox:
[tester::#LB6] [test-3] [test.lox] // This function takes eight arguments and prints their sum
[tester::#LB6] [test-3] [test.lox] fun f8(a, b, c, d, e, f, g, h) { print a - b + c * d + e - f + g - h; }
[tester::#LB6] [test-3] [test.lox] f8(88, 88, 88, 88, 88, 88, 88, 88);
[tester::#LB6] [test-3] $ ./your_program.sh run test.lox
[your_program] 7744
[your_program] comment: //This function takes eight arguments and prints their sum
[your_program] evaluating fun f8()
[your_program] evaluating f8()
[tester::#LB6] [test-3] ✓ 1 line(s) match on stdout
[tester::#LB6] [test-3] ✓ Received exit code 0.
[tester::#LB6] [test-4] Running test case: 4
[tester::#LB6] [test-4] Writing contents to ./test.lox:
[tester::#LB6] [test-4] [test.lox] // This function takes two arguments and prints the grade based on the score and bonus
[tester::#LB6] [test-4] [test.lox] fun calculateGrade(score, bonus) {
[tester::#LB6] [test-4] [test.lox]   var finalScore = score + bonus;
[tester::#LB6] [test-4] [test.lox] 
[tester::#LB6] [test-4] [test.lox]   if (finalScore >= 90) {
[tester::#LB6] [test-4] [test.lox]     print "A";
[tester::#LB6] [test-4] [test.lox]   } else if (finalScore >= 80) {
[tester::#LB6] [test-4] [test.lox]     print "B";
[tester::#LB6] [test-4] [test.lox]   } else if (finalScore >= 70) {
[tester::#LB6] [test-4] [test.lox]     print "C";
[tester::#LB6] [test-4] [test.lox]   } else if (finalScore >= 60) {
[tester::#LB6] [test-4] [test.lox]     print "D";
[tester::#LB6] [test-4] [test.lox]   } else {
[tester::#LB6] [test-4] [test.lox]     print "F";
[tester::#LB6] [test-4] [test.lox]   }
[tester::#LB6] [test-4] [test.lox] }
[tester::#LB6] [test-4] [test.lox] 
[tester::#LB6] [test-4] [test.lox] var score = 97;
[tester::#LB6] [test-4] [test.lox] var bonus = 5;
[tester::#LB6] [test-4] [test.lox] print "Grade for given score is: ";
[tester::#LB6] [test-4] [test.lox] calculateGrade(score, bonus);
[tester::#LB6] [test-4] $ ./your_program.sh run test.lox
[your_program] Grade for given score is: 
[your_program] A
[your_program] comment: //This function takes two arguments and prints the grade based on the score and bonus
[your_program] evaluating fun calculateGrade()
[your_program] evaluating var score = 97.0
[your_program] evaluating var bonus = 5.0
[your_program] evaluating print Grade for given score is: 
[your_program] evaluating calculateGrade()
[tester::#LB6] [test-4] ✓ 2 line(s) match on stdout
[tester::#LB6] [test-4] ✓ Received exit code 0.
[tester::#LB6] Test passed.

[tester::#PX4] Running tests for Stage #PX4 (Functions - Syntax errors)
[tester::#PX4] [test-1] Running test case: 1
[tester::#PX4] [test-1] Writing contents to ./test.lox:
[tester::#PX4] [test-1] [test.lox] // This program is missing the closing parenthesis for the function call
[tester::#PX4] [test-1] [test.lox] print clock(;
[tester::#PX4] [test-1] [test.lox] 
[tester::#PX4] [test-1] $ ./your_program.sh run test.lox
[your_program] comment: //This program is missing the closing parenthesis for the function call
[tester::#PX4] [test-1] ✓ 1 line(s) match on stdout
[tester::#PX4] [test-1] ✓ Received exit code 65.
[tester::#PX4] [test-2] Running test case: 2
[tester::#PX4] [test-2] Writing contents to ./test.lox:
[tester::#PX4] [test-2] [test.lox] // This program is missing the opening parenthesis for the function call,
[tester::#PX4] [test-2] [test.lox] // and has extra closing parentheses
[tester::#PX4] [test-2] [test.lox] print clock)));
[tester::#PX4] [test-2] $ ./your_program.sh run test.lox
[your_program] comment: //This program is missing the opening parenthesis for the function call,
[your_program] comment: //and has extra closing parentheses
[your_program] unexpected token RIGHT_PAREN
[tester::#PX4] [test-2] ✓ 1 line(s) match on stdout
[tester::#PX4] [test-2] ✓ Received exit code 65.
[tester::#PX4] [test-3] Running test case: 3
[tester::#PX4] [test-3] Writing contents to ./test.lox:
[tester::#PX4] [test-3] [test.lox] // This function declaration is missing the opening and closing braces
[tester::#PX4] [test-3] [test.lox] // The body should always be inside a block
[tester::#PX4] [test-3] [test.lox] fun f() 26;
[tester::#PX4] [test-3] [test.lox] print f();
[tester::#PX4] [test-3] [test.lox] 
[tester::#PX4] [test-3] $ ./your_program.sh run test.lox
[your_program] comment: //This function declaration is missing the opening and closing braces
[your_program] comment: //The body should always be inside a block
[your_program] expected { after function arguments
[tester::#PX4] [test-3] ✓ 1 line(s) match on stdout
[tester::#PX4] [test-3] ✓ Received exit code 65.
[tester::#PX4] [test-4] Running test case: 4
[tester::#PX4] [test-4] Writing contents to ./test.lox:
[tester::#PX4] [test-4] [test.lox] // This function declaration is missing a comma between b and c
[tester::#PX4] [test-4] [test.lox] fun foo(a, b c, d, e, f) {}
[tester::#PX4] [test-4] [test.lox] foo();
[tester::#PX4] [test-4] [test.lox] 
[tester::#PX4] [test-4] $ ./your_program.sh run test.lox
[your_program] comment: //This function declaration is missing a comma between b and c
[your_program] expected ',' or ')' after argument name
[tester::#PX4] [test-4] ✓ 1 line(s) match on stdout
[tester::#PX4] [test-4] ✓ Received exit code 65.
[tester::#PX4] Test passed.

[tester::#RD2] Running tests for Stage #RD2 (Functions - Return statements)
[tester::#RD2] [test-1] Running test case: 1
[tester::#RD2] [test-1] Writing contents to ./test.lox:
[tester::#RD2] [test-1] [test.lox] // This program computes the 35th Fibonacci number
[tester::#RD2] [test-1] [test.lox] fun fib(n) {
[tester::#RD2] [test-1] [test.lox]   if (n < 2) return n;
[tester::#RD2] [test-1] [test.lox]   return fib(n - 2) + fib(n - 1);
[tester::#RD2] [test-1] [test.lox] }
[tester::#RD2] [test-1] [test.lox] 
[tester::#RD2] [test-1] [test.lox] var start = clock();
[tester::#RD2] [test-1] [test.lox] print fib(10) == 55;
[tester::#RD2] [test-1] [test.lox] print (clock() - start) < 5; // 5 seconds
[tester::#RD2] [test-1] [test.lox] 
[tester::#RD2] [test-1] $ ./your_program.sh run test.lox
[your_program] comment: //This program computes the 35th Fibonacci number
[your_program] comment: //5 seconds
[your_program] evaluating fun fib()
[your_program] evaluating var start = clock()
[your_program] evaluating print (== fib() 55.0)
[your_program] evaluating print (< (group (- clock() var start)) 5.0)
[your_program] true
[your_program] true
[tester::#RD2] [test-1] ✓ 2 line(s) match on stdout
[tester::#RD2] [test-1] ✓ Received exit code 0.
[tester::#RD2] [test-2] Running test case: 2
[tester::#RD2] [test-2] Writing contents to ./test.lox:
[tester::#RD2] [test-2] [test.lox] // This program uses a return statement inside an if statement to return "ok" if the condition is false
[tester::#RD2] [test-2] [test.lox] fun f() {
[tester::#RD2] [test-2] [test.lox]   if (false) return "no"; else return "ok";
[tester::#RD2] [test-2] [test.lox] }
[tester::#RD2] [test-2] [test.lox] 
[tester::#RD2] [test-2] [test.lox] print f();
[tester::#RD2] [test-2] $ ./your_program.sh run test.lox
[your_program] comment: //This program uses a return statement inside an if statement to return "ok" if the condition is false
[your_program] evaluating fun f()
[your_program] evaluating print f()
[your_program] ok
[tester::#RD2] [test-2] ✓ 1 line(s) match on stdout
[tester::#RD2] [test-2] ✓ Received exit code 0.
[tester::#RD2] [test-3] Running test case: 3
[tester::#RD2] [test-3] Writing contents to ./test.lox:
[tester::#RD2] [test-3] [test.lox] // This program uses a return statement inside a while loop to return "ok" if the condition is false
[tester::#RD2] [test-3] [test.lox] fun f() {
[tester::#RD2] [test-3] [test.lox]   while (!false) return "ok";
[tester::#RD2] [test-3] [test.lox] }
[tester::#RD2] [test-3] [test.lox] 
[tester::#RD2] [test-3] [test.lox] print f();
[tester::#RD2] [test-3] $ ./your_program.sh run test.lox
[your_program] ok
[your_program] comment: //This program uses a return statement inside a while loop to return "ok" if the condition is false
[your_program] evaluating fun f()
[your_program] evaluating print f()
[tester::#RD2] [test-3] ✓ 1 line(s) match on stdout
[tester::#RD2] [test-3] ✓ Received exit code 0.
[tester::#RD2] [test-4] Running test case: 4
[tester::#RD2] [test-4] Writing contents to ./test.lox:
[tester::#RD2] [test-4] [test.lox] // This program relies on the return statement returning nil by default
[tester::#RD2] [test-4] [test.lox] fun f() {
[tester::#RD2] [test-4] [test.lox]   return;
[tester::#RD2] [test-4] [test.lox]   print "bad";
[tester::#RD2] [test-4] [test.lox] }
[tester::#RD2] [test-4] [test.lox] 
[tester::#RD2] [test-4] [test.lox] print f();
[tester::#RD2] [test-4] $ ./your_program.sh run test.lox
[your_program] comment: //This program relies on the return statement returning nil by default
[your_program] evaluating fun f()
[your_program] evaluating print f()
[your_program] nil
[tester::#RD2] [test-4] ✓ 1 line(s) match on stdout
[tester::#RD2] [test-4] ✓ Received exit code 0.
[tester::#RD2] Test passed.

[tester::#EY3] Running tests for Stage #EY3 (Functions - Higher order functions)
[tester::#EY3] [test-1] Running test case: 1
[tester::#EY3] [test-1] Writing contents to ./test.lox:
[tester::#EY3] [test-1] [test.lox] // This program creates a function that returns another function
[tester::#EY3] [test-1] [test.lox] // and uses it to greet two different people with two different greetings
[tester::#EY3] [test-1] [test.lox] fun makeGreeter(greeting) {
[tester::#EY3] [test-1] [test.lox]   fun greet(name) {
[tester::#EY3] [test-1] [test.lox]     print greeting + " " + name;
[tester::#EY3] [test-1] [test.lox]   }
[tester::#EY3] [test-1] [test.lox]   return greet;
[tester::#EY3] [test-1] [test.lox] }
[tester::#EY3] [test-1] [test.lox] 
[tester::#EY3] [test-1] [test.lox] var sayHello = makeGreeter("Hello");
[tester::#EY3] [test-1] [test.lox] var sayHi = makeGreeter("Hi");
[tester::#EY3] [test-1] [test.lox] 
[tester::#EY3] [test-1] [test.lox] sayHello("Bob");
[tester::#EY3] [test-1] [test.lox] sayHi("Alice");
[tester::#EY3] [test-1] $ ./your_program.sh run test.lox
[your_program] comment: //This program creates a function that returns another function
[your_program] comment: //and uses it to greet two different people with two different greetings
[your_program] evaluating fun makeGreeter()
[your_program] evaluating var sayHello = makeGreeter()
[your_program] evaluating var sayHi = makeGreeter()
[your_program] evaluating sayHello()
[your_program] evaluating sayHi()
[your_program] Hello Bob
[your_program] Hi Alice
[tester::#EY3] [test-1] ✓ 2 line(s) match on stdout
[tester::#EY3] [test-1] ✓ Received exit code 0.
[tester::#EY3] [test-2] Running test case: 2
[tester::#EY3] [test-2] Writing contents to ./test.lox:
[tester::#EY3] [test-2] [test.lox] fun returnArg(arg) {
[tester::#EY3] [test-2] [test.lox]   return arg;
[tester::#EY3] [test-2] [test.lox] }
[tester::#EY3] [test-2] [test.lox] 
[tester::#EY3] [test-2] [test.lox] fun returnFunCallWithArg(func, arg) {
[tester::#EY3] [test-2] [test.lox]   return returnArg(func)(arg);
[tester::#EY3] [test-2] [test.lox] }
[tester::#EY3] [test-2] [test.lox] 
[tester::#EY3] [test-2] [test.lox] fun printArg(arg) {
[tester::#EY3] [test-2] [test.lox]   print arg;
[tester::#EY3] [test-2] [test.lox] }
[tester::#EY3] [test-2] [test.lox] 
[tester::#EY3] [test-2] [test.lox] returnFunCallWithArg(printArg, "world");
[tester::#EY3] [test-2] $ ./your_program.sh run test.lox
[your_program] evaluating fun returnArg()
[your_program] evaluating fun returnFunCallWithArg()
[your_program] evaluating fun printArg()
[your_program] evaluating returnFunCallWithArg()
[your_program] world
[tester::#EY3] [test-2] ✓ 1 line(s) match on stdout
[tester::#EY3] [test-2] ✓ Received exit code 0.
[tester::#EY3] [test-3] Running test case: 3
[tester::#EY3] [test-3] Writing contents to ./test.lox:
[tester::#EY3] [test-3] [test.lox] // This program creates a function that returns another function
[tester::#EY3] [test-3] [test.lox] // and uses it to apply a function twice to a value
[tester::#EY3] [test-3] [test.lox] fun makeAdder(x) {
[tester::#EY3] [test-3] [test.lox]   fun add(y) {
[tester::#EY3] [test-3] [test.lox]     return x + y;
[tester::#EY3] [test-3] [test.lox]   }
[tester::#EY3] [test-3] [test.lox]   return add;
[tester::#EY3] [test-3] [test.lox] }
[tester::#EY3] [test-3] [test.lox] 
[tester::#EY3] [test-3] [test.lox] fun applyTwice(f, x) {
[tester::#EY3] [test-3] [test.lox]   return f(f(x));
[tester::#EY3] [test-3] [test.lox] }
[tester::#EY3] [test-3] [test.lox] 
[tester::#EY3] [test-3] [test.lox] var addx = makeAdder(6);
[tester::#EY3] [test-3] [test.lox] var addy = makeAdder(6);
[tester::#EY3] [test-3] [test.lox] 
[tester::#EY3] [test-3] [test.lox] print applyTwice(addx, 6);
[tester::#EY3] [test-3] [test.lox] print applyTwice(addy, 6);
[tester::#EY3] [test-3] [test.lox] 
[tester::#EY3] [test-3] $ ./your_program.sh run test.lox
[your_program] 18
[your_program] 18
[your_program] comment: //This program creates a function that returns another function
[your_program] comment: //and uses it to apply a function twice to a value
[your_program] evaluating fun makeAdder()
[your_program] evaluating fun applyTwice()
[your_program] evaluating var addx = makeAdder()
[your_program] evaluating var addy = makeAdder()
[your_program] evaluating print applyTwice()
[your_program] evaluating print applyTwice()
[tester::#EY3] [test-3] ✓ 2 line(s) match on stdout
[tester::#EY3] [test-3] ✓ Received exit code 0.
[tester::#EY3] [test-4] Running test case: 4
[tester::#EY3] [test-4] Writing contents to ./test.lox:
[tester::#EY3] [test-4] [test.lox] // This program creates a function that returns another function
[tester::#EY3] [test-4] [test.lox] // and uses it to filter a list of numbers
[tester::#EY3] [test-4] [test.lox] fun makeFilter(min) {
[tester::#EY3] [test-4] [test.lox]   fun filter(n) {
[tester::#EY3] [test-4] [test.lox]     if (n < min) {
[tester::#EY3] [test-4] [test.lox]       return false;
[tester::#EY3] [test-4] [test.lox]     }
[tester::#EY3] [test-4] [test.lox]     return true;
[tester::#EY3] [test-4] [test.lox]   }
[tester::#EY3] [test-4] [test.lox]   return filter;
[tester::#EY3] [test-4] [test.lox] }
[tester::#EY3] [test-4] [test.lox] 
[tester::#EY3] [test-4] [test.lox] // This function applies a function to a list of numbers
[tester::#EY3] [test-4] [test.lox] fun applyToNumbers(f, count) {
[tester::#EY3] [test-4] [test.lox]   var n = 0;
[tester::#EY3] [test-4] [test.lox]   while (n < count) {
[tester::#EY3] [test-4] [test.lox]     if (f(n)) {
[tester::#EY3] [test-4] [test.lox]       print n;
[tester::#EY3] [test-4] [test.lox]     }
[tester::#EY3] [test-4] [test.lox]     n = n + 1;
[tester::#EY3] [test-4] [test.lox]   }
[tester::#EY3] [test-4] [test.lox] }
[tester::#EY3] [test-4] [test.lox] 
[tester::#EY3] [test-4] [test.lox] var greaterThanX = makeFilter(26);
[tester::#EY3] [test-4] [test.lox] var greaterThanY = makeFilter(46);
[tester::#EY3] [test-4] [test.lox] 
[tester::#EY3] [test-4] [test.lox] print "Numbers >= 26:";
[tester::#EY3] [test-4] [test.lox] applyToNumbers(greaterThanX, 26 + 4);
[tester::#EY3] [test-4] [test.lox] 
[tester::#EY3] [test-4] [test.lox] print "Numbers >= 46:";
[tester::#EY3] [test-4] [test.lox] applyToNumbers(greaterThanY, 46 + 4);
[tester::#EY3] [test-4] $ ./your_program.sh run test.lox
[your_program] comment: //This program creates a function that returns another function
[your_program] comment: //and uses it to filter a list of numbers
[your_program] Numbers >= 26:
[your_program] 26
[your_program] 27
[your_program] comment: //This function applies a function to a list of numbers
[your_program] 28
[your_program] 29
[your_program] Numbers >= 46:
[your_program] 46
[your_program] 47
[your_program] 48
[your_program] 49
[your_program] evaluating fun makeFilter()
[your_program] evaluating fun applyToNumbers()
[your_program] evaluating var greaterThanX = makeFilter()
[your_program] evaluating var greaterThanY = makeFilter()
[your_program] evaluating print Numbers >= 26:
[your_program] evaluating applyToNumbers()
[your_program] evaluating print Numbers >= 46:
[your_program] evaluating applyToNumbers()
[tester::#EY3] [test-4] ✓ 10 line(s) match on stdout
[tester::#EY3] [test-4] ✓ Received exit code 0.
[tester::#EY3] Test passed.

[tester::#FJ7] Running tests for Stage #FJ7 (Functions - Runtime errors)
[tester::#FJ7] [test-1] Running test case: 1
[tester::#FJ7] [test-1] Writing contents to ./test.lox:
[tester::#FJ7] [test-1] [test.lox] 77();
[tester::#FJ7] [test-1] $ ./your_program.sh run test.lox
[your_program] Can only call functions and classes.
[tester::#FJ7] [test-1] ✓ 1 line(s) match on stdout
[tester::#FJ7] [test-1] ✓ Received exit code 70.
[tester::#FJ7] [test-2] Running test case: 2
[tester::#FJ7] [test-2] Writing contents to ./test.lox:
[tester::#FJ7] [test-2] [test.lox] fun f(a, b) {
[tester::#FJ7] [test-2] [test.lox]   print a;
[tester::#FJ7] [test-2] [test.lox]   print b;
[tester::#FJ7] [test-2] [test.lox] }
[tester::#FJ7] [test-2] [test.lox] 
[tester::#FJ7] [test-2] [test.lox] f(1, 2, 3, 4); // expect runtime error: Expected 2 arguments but got 4.
[tester::#FJ7] [test-2] $ ./your_program.sh run test.lox
[your_program] comment: //expect runtime error: Expected 2 arguments but got 4.
[your_program] evaluating fun f()
[your_program] evaluating f()
[your_program] Function f takes 2 arguments, but got 4
[tester::#FJ7] [test-2] ✓ 1 line(s) match on stdout
[tester::#FJ7] [test-2] ✓ Received exit code 70.
[tester::#FJ7] [test-3] Running test case: 3
[tester::#FJ7] [test-3] Writing contents to ./test.lox:
[tester::#FJ7] [test-3] [test.lox] fun f(a, b) {}
[tester::#FJ7] [test-3] [test.lox] 
[tester::#FJ7] [test-3] [test.lox] f(1); // expect runtime error: Expected 2 arguments but got 1.
[tester::#FJ7] [test-3] $ ./your_program.sh run test.lox
[your_program] comment: //expect runtime error: Expected 2 arguments but got 1.
[your_program] evaluating fun f()
[your_program] evaluating f()
[your_program] Function f takes 2 arguments, but got 1
[tester::#FJ7] [test-3] ✓ 1 line(s) match on stdout
[tester::#FJ7] [test-3] ✓ Received exit code 70.
[tester::#FJ7] [test-4] Running test case: 4
[tester::#FJ7] [test-4] Writing contents to ./test.lox:
[tester::#FJ7] [test-4] [test.lox] (false == false)();
[tester::#FJ7] [test-4] $ ./your_program.sh run test.lox
[your_program] evaluating (group (== false false))()
[your_program] expression (group (== false false)) is not a function
[tester::#FJ7] [test-4] ✓ 1 line(s) match on stdout
[tester::#FJ7] [test-4] ✓ Received exit code 70.
[tester::#FJ7] Test passed.

[tester::#BZ4] Running tests for Stage #BZ4 (Functions - Function scope)
[tester::#BZ4] [test-1] Running test case: 1
[tester::#BZ4] [test-1] Writing contents to ./test.lox:
[tester::#BZ4] [test-1] [test.lox] // This program demonstrates global and local variable shadowing in Lox.
[tester::#BZ4] [test-1] [test.lox] var a = 33;
[tester::#BZ4] [test-1] [test.lox] 
[tester::#BZ4] [test-1] [test.lox] fun printAndModify() {
[tester::#BZ4] [test-1] [test.lox]   print a;
[tester::#BZ4] [test-1] [test.lox]   var a = 74;
[tester::#BZ4] [test-1] [test.lox]   print a;
[tester::#BZ4] [test-1] [test.lox] }
[tester::#BZ4] [test-1] [test.lox] 
[tester::#BZ4] [test-1] [test.lox] print a;
[tester::#BZ4] [test-1] [test.lox] var a = 37;
[tester::#BZ4] [test-1] [test.lox] printAndModify();
[tester::#BZ4] [test-1] [test.lox] 
[tester::#BZ4] [test-1] $ ./your_program.sh run test.lox
[your_program] comment: //This program demonstrates global and local variable shadowing in Lox.
[your_program] evaluating var a = 33.0
[your_program] evaluating fun printAndModify()
[your_program] evaluating print var a
[your_program] evaluating var a = 37.0
[your_program] evaluating printAndModify()
[your_program] 33
[your_program] 37
[your_program] 74
[tester::#BZ4] [test-1] ✓ 3 line(s) match on stdout
[tester::#BZ4] [test-1] ✓ Received exit code 0.
[tester::#BZ4] [test-2] Running test case: 2
[tester::#BZ4] [test-2] Writing contents to ./test.lox:
[tester::#BZ4] [test-2] [test.lox] // This program uses a while loop to count down from 4 to 1, printing each number
[tester::#BZ4] [test-2] [test.lox] // and then decrementing the count until it reaches 0, at which point it prints
[tester::#BZ4] [test-2] [test.lox] // "Blast off!"
[tester::#BZ4] [test-2] [test.lox] var count = 4;
[tester::#BZ4] [test-2] [test.lox] 
[tester::#BZ4] [test-2] [test.lox] fun tick() {
[tester::#BZ4] [test-2] [test.lox]   if (count > 0) {
[tester::#BZ4] [test-2] [test.lox]     print count;
[tester::#BZ4] [test-2] [test.lox]     count = count - 1;
[tester::#BZ4] [test-2] [test.lox]     return false;
[tester::#BZ4] [test-2] [test.lox]   }
[tester::#BZ4] [test-2] [test.lox]   print "Blast off!";
[tester::#BZ4] [test-2] [test.lox]   return true;
[tester::#BZ4] [test-2] [test.lox] }
[tester::#BZ4] [test-2] [test.lox] 
[tester::#BZ4] [test-2] [test.lox] while (!tick()) {}
[tester::#BZ4] [test-2] $ ./your_program.sh run test.lox
[your_program] comment: //This program uses a while loop to count down from 4 to 1, printing each number
[your_program] comment: //and then decrementing the count until it reaches 0, at which point it prints
[your_program] comment: //"Blast off!"
[your_program] evaluating var count = 4.0
[your_program] evaluating fun tick()
[your_program] evaluating (while ((! tick())) (block ))
[your_program] 4
[your_program] 3
[your_program] 2
[your_program] 1
[your_program] Blast off!
[tester::#BZ4] [test-2] ✓ 5 line(s) match on stdout
[tester::#BZ4] [test-2] ✓ Received exit code 0.
[tester::#BZ4] [test-3] Running test case: 3
[tester::#BZ4] [test-3] Writing contents to ./test.lox:
[tester::#BZ4] [test-3] [test.lox] // This program demonstrates variable shadowing in Lox with functions.
[tester::#BZ4] [test-3] [test.lox] // The first counter is a global variable that is modified by the inner block.
[tester::#BZ4] [test-3] [test.lox] // The second counter is a local variable that shadows the global variable.
[tester::#BZ4] [test-3] [test.lox] var counter = 59;
[tester::#BZ4] [test-3] [test.lox] 
[tester::#BZ4] [test-3] [test.lox] fun incrementCounter(amount) {
[tester::#BZ4] [test-3] [test.lox]   counter = counter + amount;
[tester::#BZ4] [test-3] [test.lox]   print counter;
[tester::#BZ4] [test-3] [test.lox] }
[tester::#BZ4] [test-3] [test.lox] 
[tester::#BZ4] [test-3] [test.lox] {
[tester::#BZ4] [test-3] [test.lox]   counter = 58;
[tester::#BZ4] [test-3] [test.lox]   incrementCounter(6);
[tester::#BZ4] [test-3] [test.lox]   print counter;
[tester::#BZ4] [test-3] [test.lox] }
[tester::#BZ4] [test-3] [test.lox] print counter;
[tester::#BZ4] [test-3] $ ./your_program.sh run test.lox
[your_program] comment: //This program demonstrates variable shadowing in Lox with functions.
[your_program] comment: //The first counter is a global variable that is modified by the inner block.
[your_program] comment: //The second counter is a local variable that shadows the global variable.
[your_program] evaluating var counter = 59.0
[your_program] evaluating fun incrementCounter()
[your_program] evaluating (block (= var counter 58.0), incrementCounter(), print var counter)
[your_program] evaluating print var counter
[your_program] 64
[your_program] 64
[your_program] 64
[tester::#BZ4] [test-3] ✓ 3 line(s) match on stdout
[tester::#BZ4] [test-3] ✓ Received exit code 0.
[tester::#BZ4] [test-4] Running test case: 4
[tester::#BZ4] [test-4] Writing contents to ./test.lox:
[tester::#BZ4] [test-4] [test.lox] var x = 1;
[tester::#BZ4] [test-4] [test.lox] var y = 2;
[tester::#BZ4] [test-4] [test.lox] 
[tester::#BZ4] [test-4] [test.lox] fun printBoth() {
[tester::#BZ4] [test-4] [test.lox]   if (x < y) {
[tester::#BZ4] [test-4] [test.lox]     print "x is less than y:";
[tester::#BZ4] [test-4] [test.lox]     print x;
[tester::#BZ4] [test-4] [test.lox]     print y;
[tester::#BZ4] [test-4] [test.lox]   } else {
[tester::#BZ4] [test-4] [test.lox]     print "x is not less than y:";
[tester::#BZ4] [test-4] [test.lox]     print x;
[tester::#BZ4] [test-4] [test.lox]     print y;
[tester::#BZ4] [test-4] [test.lox]   }
[tester::#BZ4] [test-4] [test.lox] }
[tester::#BZ4] [test-4] [test.lox] 
[tester::#BZ4] [test-4] [test.lox] {
[tester::#BZ4] [test-4] [test.lox]   var x = 10;
[tester::#BZ4] [test-4] [test.lox]   {
[tester::#BZ4] [test-4] [test.lox]     var y = 20;
[tester::#BZ4] [test-4] [test.lox] 
[tester::#BZ4] [test-4] [test.lox]     var i = 0;
[tester::#BZ4] [test-4] [test.lox]     while (i < 3) {
[tester::#BZ4] [test-4] [test.lox]       x = x + 1;
[tester::#BZ4] [test-4] [test.lox]       y = y - 1;
[tester::#BZ4] [test-4] [test.lox]       print "Local x: ";
[tester::#BZ4] [test-4] [test.lox]       print x;
[tester::#BZ4] [test-4] [test.lox]       print "Local y: ";
[tester::#BZ4] [test-4] [test.lox]       print y;
[tester::#BZ4] [test-4] [test.lox]       i = i + 1;
[tester::#BZ4] [test-4] [test.lox]     }
[tester::#BZ4] [test-4] [test.lox] 
[tester::#BZ4] [test-4] [test.lox]     if (x > y) {
[tester::#BZ4] [test-4] [test.lox]       print "Local x > y";
[tester::#BZ4] [test-4] [test.lox]     }
[tester::#BZ4] [test-4] [test.lox] 
[tester::#BZ4] [test-4] [test.lox]     printBoth();
[tester::#BZ4] [test-4] [test.lox]   }
[tester::#BZ4] [test-4] [test.lox] }
[tester::#BZ4] [test-4] [test.lox] 
[tester::#BZ4] [test-4] [test.lox] if (x == 1 and y == 2) {
[tester::#BZ4] [test-4] [test.lox]   print "Globals unchanged:";
[tester::#BZ4] [test-4] [test.lox]   printBoth();
[tester::#BZ4] [test-4] [test.lox] }
[tester::#BZ4] [test-4] $ ./your_program.sh run test.lox
[your_program] evaluating var x = 1.0
[your_program] evaluating var y = 2.0
[your_program] evaluating fun printBoth()
[your_program] evaluating (block var x = 10.0, (block var y = 20.0, var i = 0.0, (while ((< var i 3.0)) (block (= var x (+ var x 1.0)), (= var y (- var y 1.0)), print Local x: , print var x, print Local y: , print var y, (= var i (+ var i 1.0)))), (if ((> var x var y)) (block print Local x > y)), printBoth()))
[your_program] evaluating (if ((and (== var x 1.0) (== var y 2.0))) (block print Globals unchanged:, printBoth()))
[your_program] Local x: 
[your_program] 11
[your_program] Local y: 
[your_program] 19
[your_program] Local x: 
[your_program] 12
[your_program] Local y: 
[your_program] 18
[your_program] Local x: 
[your_program] 13
[your_program] Local y: 
[your_program] 17
[your_program] x is less than y:
[your_program] 1
[your_program] 2
[your_program] Globals unchanged:
[your_program] x is less than y:
[your_program] 1
[your_program] 2
[tester::#BZ4] [test-4] ✓ 19 line(s) match on stdout
[tester::#BZ4] [test-4] ✓ Received exit code 0.
[tester::#BZ4] Test passed.

[tester::#GG6] Running tests for Stage #GG6 (Functions - Closures)
[tester::#GG6] [test-1] Running test case: 1
[tester::#GG6] [test-1] Writing contents to ./test.lox:
[tester::#GG6] [test-1] [test.lox] // This program demonstrates the use of closures to create a counter function.
[tester::#GG6] [test-1] [test.lox] // The inner function count() needs access to the outer function's local variable i.
[tester::#GG6] [test-1] [test.lox] // This can be achieved using closures.
[tester::#GG6] [test-1] [test.lox] fun makeCounter() {
[tester::#GG6] [test-1] [test.lox]   var i = 0;
[tester::#GG6] [test-1] [test.lox]   fun count() {
[tester::#GG6] [test-1] [test.lox]     i = i + 6;
[tester::#GG6] [test-1] [test.lox]     print i;
[tester::#GG6] [test-1] [test.lox]   }
[tester::#GG6] [test-1] [test.lox] 
[tester::#GG6] [test-1] [test.lox]   return count;
[tester::#GG6] [test-1] [test.lox] }
[tester::#GG6] [test-1] [test.lox] 
[tester::#GG6] [test-1] [test.lox] var counter = makeCounter();
[tester::#GG6] [test-1] [test.lox] counter();
[tester::#GG6] [test-1] [test.lox] counter();
[tester::#GG6] [test-1] $ ./your_program.sh run test.lox
[your_program] 6
[your_program] 12
[your_program] comment: //This program demonstrates the use of closures to create a counter function.
[your_program] comment: //The inner function count() needs access to the outer function's local variable i.
[your_program] comment: //This can be achieved using closures.
[your_program] evaluating fun makeCounter()
[your_program] evaluating var counter = makeCounter()
[your_program] evaluating counter()
[your_program] evaluating counter()
[tester::#GG6] [test-1] ✓ 2 line(s) match on stdout
[tester::#GG6] [test-1] ✓ Received exit code 0.
[tester::#GG6] [test-2] Running test case: 2
[tester::#GG6] [test-2] Writing contents to ./test.lox:
[tester::#GG6] [test-2] [test.lox] // This program uses mutual recursion to determine if a number is even or odd.
[tester::#GG6] [test-2] [test.lox] // It also uses a shared threshold variable that is used to determine if a number is too large to be processed.
[tester::#GG6] [test-2] [test.lox] {
[tester::#GG6] [test-2] [test.lox]   var threshold = 50;
[tester::#GG6] [test-2] [test.lox] 
[tester::#GG6] [test-2] [test.lox]   fun isEven(n) {
[tester::#GG6] [test-2] [test.lox]     if (n == 0) return true;
[tester::#GG6] [test-2] [test.lox]     if (n > threshold) return false;
[tester::#GG6] [test-2] [test.lox]     return isOdd(n - 1);
[tester::#GG6] [test-2] [test.lox]   }
[tester::#GG6] [test-2] [test.lox] 
[tester::#GG6] [test-2] [test.lox]   fun isOdd(n) {
[tester::#GG6] [test-2] [test.lox]     if (n == 0) return false;
[tester::#GG6] [test-2] [test.lox]     if (n > threshold) return false;
[tester::#GG6] [test-2] [test.lox]     return isEven(n - 1);
[tester::#GG6] [test-2] [test.lox]   }
[tester::#GG6] [test-2] [test.lox] 
[tester::#GG6] [test-2] [test.lox]   print isEven(47);
[tester::#GG6] [test-2] [test.lox] }
[tester::#GG6] [test-2] $ ./your_program.sh run test.lox
[your_program] comment: //This program uses mutual recursion to determine if a number is even or odd.
[your_program] comment: //It also uses a shared threshold variable that is used to determine if a number is too large to be processed.
[your_program] evaluating (block var threshold = 50.0, fun isEven(), fun isOdd(), print isEven())
[your_program] false
[tester::#GG6] [test-2] ✓ 1 line(s) match on stdout
[tester::#GG6] [test-2] ✓ Received exit code 0.
[tester::#GG6] [test-3] Running test case: 3
[tester::#GG6] [test-3] Writing contents to ./test.lox:
[tester::#GG6] [test-3] [test.lox] // This program demonstrates the use of closures to create a logger function.
[tester::#GG6] [test-3] [test.lox] // The inner function log() has access to the outer function's local variable logCount.
[tester::#GG6] [test-3] [test.lox] // This is an example of how closures can be used to create private variables and methods.
[tester::#GG6] [test-3] [test.lox] fun makeLogger(prefix) {
[tester::#GG6] [test-3] [test.lox]   var logCount = 0;
[tester::#GG6] [test-3] [test.lox] 
[tester::#GG6] [test-3] [test.lox]   fun log(message) {
[tester::#GG6] [test-3] [test.lox]     logCount = logCount + 1;
[tester::#GG6] [test-3] [test.lox]     print prefix + ": " + message;
[tester::#GG6] [test-3] [test.lox] 
[tester::#GG6] [test-3] [test.lox]     if (logCount > 2) {
[tester::#GG6] [test-3] [test.lox]       print prefix + ": Too many log lines!";
[tester::#GG6] [test-3] [test.lox]       logCount = 0;
[tester::#GG6] [test-3] [test.lox]     }
[tester::#GG6] [test-3] [test.lox]   }
[tester::#GG6] [test-3] [test.lox] 
[tester::#GG6] [test-3] [test.lox]   return log;
[tester::#GG6] [test-3] [test.lox] }
[tester::#GG6] [test-3] [test.lox] 
[tester::#GG6] [test-3] [test.lox] var debugLog = makeLogger("bar");
[tester::#GG6] [test-3] [test.lox] var errorLog = makeLogger("baz");
[tester::#GG6] [test-3] [test.lox] 
[tester::#GG6] [test-3] [test.lox] debugLog("Starting");
[tester::#GG6] [test-3] [test.lox] debugLog("Processing");
[tester::#GG6] [test-3] [test.lox] debugLog("Finishing");
[tester::#GG6] [test-3] [test.lox] debugLog("Extra line");
[tester::#GG6] [test-3] [test.lox] 
[tester::#GG6] [test-3] [test.lox] errorLog("Failed!");
[tester::#GG6] [test-3] [test.lox] errorLog("Retrying...");
[tester::#GG6] [test-3] $ ./your_program.sh run test.lox
[your_program] comment: //This program demonstrates the use of closures to create a logger function.
[your_program] comment: //The inner function log() has access to the outer function's local variable logCount.
[your_program] comment: //This is an example of how closures can be used to create private variables and methods.
[your_program] evaluating fun makeLogger()
[your_program] evaluating var debugLog = makeLogger()
[your_program] evaluating var errorLog = makeLogger()
[your_program] evaluating debugLog()
[your_program] evaluating debugLog()
[your_program] evaluating debugLog()
[your_program] evaluating debugLog()
[your_program] evaluating errorLog()
[your_program] evaluating errorLog()
[your_program] bar: Starting
[your_program] bar: Processing
[your_program] bar: Finishing
[your_program] bar: Too many log lines!
[your_program] bar: Extra line
[your_program] baz: Failed!
[your_program] baz: Retrying...
[tester::#GG6] [test-3] ✓ 7 line(s) match on stdout
[tester::#GG6] [test-3] ✓ Received exit code 0.
[tester::#GG6] [test-4] Running test case: 4
[tester::#GG6] [test-4] Writing contents to ./test.lox:
[tester::#GG6] [test-4] [test.lox] fun makeAccumulator(label) {
[tester::#GG6] [test-4] [test.lox]   var sum = 0;
[tester::#GG6] [test-4] [test.lox]   var count = 0;
[tester::#GG6] [test-4] [test.lox] 
[tester::#GG6] [test-4] [test.lox]   fun accumulate(value) {
[tester::#GG6] [test-4] [test.lox]     sum = sum + value;
[tester::#GG6] [test-4] [test.lox]     count = count + 1;
[tester::#GG6] [test-4] [test.lox] 
[tester::#GG6] [test-4] [test.lox]     print label;
[tester::#GG6] [test-4] [test.lox]     print count;
[tester::#GG6] [test-4] [test.lox]     print sum;
[tester::#GG6] [test-4] [test.lox]     print sum;
[tester::#GG6] [test-4] [test.lox] 
[tester::#GG6] [test-4] [test.lox]     if (count > 3) {
[tester::#GG6] [test-4] [test.lox]       print "reset";
[tester::#GG6] [test-4] [test.lox]       sum = 0;
[tester::#GG6] [test-4] [test.lox]       count = 0;
[tester::#GG6] [test-4] [test.lox]     }
[tester::#GG6] [test-4] [test.lox] 
[tester::#GG6] [test-4] [test.lox]     return sum;
[tester::#GG6] [test-4] [test.lox]   }
[tester::#GG6] [test-4] [test.lox] 
[tester::#GG6] [test-4] [test.lox]   return accumulate;
[tester::#GG6] [test-4] [test.lox] }
[tester::#GG6] [test-4] [test.lox] 
[tester::#GG6] [test-4] [test.lox] var acc1 = makeAccumulator("First:");
[tester::#GG6] [test-4] [test.lox] var acc2 = makeAccumulator("Second:");
[tester::#GG6] [test-4] [test.lox] 
[tester::#GG6] [test-4] [test.lox] acc1(6);
[tester::#GG6] [test-4] [test.lox] acc1(3);
[tester::#GG6] [test-4] [test.lox] acc1(5);
[tester::#GG6] [test-4] [test.lox] acc1(4);
[tester::#GG6] [test-4] [test.lox] 
[tester::#GG6] [test-4] [test.lox] acc2(3);
[tester::#GG6] [test-4] [test.lox] acc2(4);
[tester::#GG6] [test-4] $ ./your_program.sh run test.lox
[your_program] evaluating fun makeAccumulator()
[your_program] evaluating var acc1 = makeAccumulator()
[your_program] evaluating var acc2 = makeAccumulator()
[your_program] evaluating acc1()
[your_program] evaluating acc1()
[your_program] evaluating acc1()
[your_program] evaluating acc1()
[your_program] evaluating acc2()
[your_program] evaluating acc2()
[your_program] First:
[your_program] 1
[your_program] 6
[your_program] 6
[your_program] First:
[your_program] 2
[your_program] 9
[your_program] 9
[your_program] First:
[your_program] 3
[your_program] 14
[your_program] 14
[your_program] First:
[your_program] 4
[your_program] 18
[your_program] 18
[your_program] reset
[your_program] Second:
[your_program] 1
[your_program] 3
[your_program] 3
[your_program] Second:
[your_program] 2
[your_program] 7
[your_program] 7
[tester::#GG6] [test-4] ✓ 25 line(s) match on stdout
[tester::#GG6] [test-4] ✓ Received exit code 0.
[tester::#GG6] Test passed.

Test passed. Congrats!

Submit your changes to move to the next step:

$ codecrafters submit
