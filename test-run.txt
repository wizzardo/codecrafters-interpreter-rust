Initiating test run...

⚡ This is a turbo test run. https://codecrafters.io/turbo

Running tests. Logs should appear shortly...

[compile] Moved ./.codecrafters/run.sh → ./your_program.sh
[compile] Compilation successful.

Debug = true

[tester::#RY8] Running tests for Stage #RY8 (Scanning: Empty file)
[tester::#RY8] Writing contents to ./test.lox:
[tester::#RY8] [test.lox] 
[tester::#RY8] $ ./your_program.sh tokenize test.lox
[your_program] EOF  null
[tester::#RY8] ✓ 1 line(s) match on stdout
[tester::#RY8] ✓ Received exit code 0.
[tester::#RY8] Test passed.

[tester::#OL4] Running tests for Stage #OL4 (Scanning: Parentheses)
[tester::#OL4] [test-1] Running test case: 1
[tester::#OL4] [test-1] Writing contents to ./test.lox:
[tester::#OL4] [test-1] [test.lox] (
[tester::#OL4] [test-1] $ ./your_program.sh tokenize test.lox
[your_program] LEFT_PAREN ( null
[your_program] EOF  null
[tester::#OL4] [test-1] ✓ 2 line(s) match on stdout
[tester::#OL4] [test-1] ✓ Received exit code 0.
[tester::#OL4] [test-2] Running test case: 2
[tester::#OL4] [test-2] Writing contents to ./test.lox:
[tester::#OL4] [test-2] [test.lox] ))
[tester::#OL4] [test-2] $ ./your_program.sh tokenize test.lox
[your_program] RIGHT_PAREN ) null
[your_program] RIGHT_PAREN ) null
[your_program] EOF  null
[tester::#OL4] [test-2] ✓ 3 line(s) match on stdout
[tester::#OL4] [test-2] ✓ Received exit code 0.
[tester::#OL4] [test-3] Running test case: 3
[tester::#OL4] [test-3] Writing contents to ./test.lox:
[tester::#OL4] [test-3] [test.lox] ()())
[tester::#OL4] [test-3] $ ./your_program.sh tokenize test.lox
[your_program] LEFT_PAREN ( null
[your_program] RIGHT_PAREN ) null
[your_program] LEFT_PAREN ( null
[your_program] RIGHT_PAREN ) null
[your_program] RIGHT_PAREN ) null
[your_program] EOF  null
[tester::#OL4] [test-3] ✓ 6 line(s) match on stdout
[tester::#OL4] [test-3] ✓ Received exit code 0.
[tester::#OL4] [test-4] Running test case: 4
[tester::#OL4] [test-4] Writing contents to ./test.lox:
[tester::#OL4] [test-4] [test.lox] (())))(
[tester::#OL4] [test-4] $ ./your_program.sh tokenize test.lox
[your_program] LEFT_PAREN ( null
[your_program] LEFT_PAREN ( null
[your_program] RIGHT_PAREN ) null
[your_program] RIGHT_PAREN ) null
[your_program] RIGHT_PAREN ) null
[your_program] RIGHT_PAREN ) null
[your_program] LEFT_PAREN ( null
[your_program] EOF  null
[tester::#OL4] [test-4] ✓ 8 line(s) match on stdout
[tester::#OL4] [test-4] ✓ Received exit code 0.
[tester::#OL4] Test passed.

[tester::#OE8] Running tests for Stage #OE8 (Scanning: Braces)
[tester::#OE8] [test-1] Running test case: 1
[tester::#OE8] [test-1] Writing contents to ./test.lox:
[tester::#OE8] [test-1] [test.lox] }
[tester::#OE8] [test-1] $ ./your_program.sh tokenize test.lox
[your_program] RIGHT_BRACE } null
[your_program] EOF  null
[tester::#OE8] [test-1] ✓ 2 line(s) match on stdout
[tester::#OE8] [test-1] ✓ Received exit code 0.
[tester::#OE8] [test-2] Running test case: 2
[tester::#OE8] [test-2] Writing contents to ./test.lox:
[tester::#OE8] [test-2] [test.lox] {{}}
[tester::#OE8] [test-2] $ ./your_program.sh tokenize test.lox
[your_program] LEFT_BRACE { null
[your_program] LEFT_BRACE { null
[your_program] RIGHT_BRACE } null
[your_program] RIGHT_BRACE } null
[your_program] EOF  null
[tester::#OE8] [test-2] ✓ 5 line(s) match on stdout
[tester::#OE8] [test-2] ✓ Received exit code 0.
[tester::#OE8] [test-3] Running test case: 3
[tester::#OE8] [test-3] Writing contents to ./test.lox:
[tester::#OE8] [test-3] [test.lox] }{}}{
[tester::#OE8] [test-3] $ ./your_program.sh tokenize test.lox
[your_program] RIGHT_BRACE } null
[your_program] LEFT_BRACE { null
[your_program] RIGHT_BRACE } null
[your_program] RIGHT_BRACE } null
[your_program] LEFT_BRACE { null
[your_program] EOF  null
[tester::#OE8] [test-3] ✓ 6 line(s) match on stdout
[tester::#OE8] [test-3] ✓ Received exit code 0.
[tester::#OE8] [test-4] Running test case: 4
[tester::#OE8] [test-4] Writing contents to ./test.lox:
[tester::#OE8] [test-4] [test.lox] {)(}{)}
[tester::#OE8] [test-4] $ ./your_program.sh tokenize test.lox
[your_program] LEFT_BRACE { null
[your_program] RIGHT_PAREN ) null
[your_program] LEFT_PAREN ( null
[your_program] RIGHT_BRACE } null
[your_program] LEFT_BRACE { null
[your_program] RIGHT_PAREN ) null
[your_program] RIGHT_BRACE } null
[your_program] EOF  null
[tester::#OE8] [test-4] ✓ 8 line(s) match on stdout
[tester::#OE8] [test-4] ✓ Received exit code 0.
[tester::#OE8] Test passed.

[tester::#XC5] Running tests for Stage #XC5 (Scanning: Other single-character tokens)
[tester::#XC5] [test-1] Running test case: 1
[tester::#XC5] [test-1] Writing contents to ./test.lox:
[tester::#XC5] [test-1] [test.lox] +-
[tester::#XC5] [test-1] $ ./your_program.sh tokenize test.lox
[your_program] PLUS + null
[your_program] MINUS - null
[your_program] EOF  null
[tester::#XC5] [test-1] ✓ 3 line(s) match on stdout
[tester::#XC5] [test-1] ✓ Received exit code 0.
[tester::#XC5] [test-2] Running test case: 2
[tester::#XC5] [test-2] Writing contents to ./test.lox:
[tester::#XC5] [test-2] [test.lox] ++--**..,,;;
[tester::#XC5] [test-2] $ ./your_program.sh tokenize test.lox
[your_program] PLUS + null
[your_program] PLUS + null
[your_program] MINUS - null
[your_program] MINUS - null
[your_program] STAR * null
[your_program] STAR * null
[your_program] DOT . null
[your_program] DOT . null
[your_program] COMMA , null
[your_program] COMMA , null
[your_program] SEMICOLON ; null
[your_program] SEMICOLON ; null
[your_program] EOF  null
[tester::#XC5] [test-2] ✓ 13 line(s) match on stdout
[tester::#XC5] [test-2] ✓ Received exit code 0.
[tester::#XC5] [test-3] Running test case: 3
[tester::#XC5] [test-3] Writing contents to ./test.lox:
[tester::#XC5] [test-3] [test.lox] *.,;,*+
[tester::#XC5] [test-3] $ ./your_program.sh tokenize test.lox
[your_program] STAR * null
[your_program] DOT . null
[your_program] COMMA , null
[your_program] SEMICOLON ; null
[your_program] COMMA , null
[your_program] STAR * null
[your_program] PLUS + null
[your_program] EOF  null
[tester::#XC5] [test-3] ✓ 8 line(s) match on stdout
[tester::#XC5] [test-3] ✓ Received exit code 0.
[tester::#XC5] [test-4] Running test case: 4
[tester::#XC5] [test-4] Writing contents to ./test.lox:
[tester::#XC5] [test-4] [test.lox] ({.;,*+})
[tester::#XC5] [test-4] $ ./your_program.sh tokenize test.lox
[your_program] LEFT_PAREN ( null
[your_program] LEFT_BRACE { null
[your_program] DOT . null
[your_program] SEMICOLON ; null
[your_program] COMMA , null
[your_program] STAR * null
[your_program] PLUS + null
[your_program] RIGHT_BRACE } null
[your_program] RIGHT_PAREN ) null
[your_program] EOF  null
[tester::#XC5] [test-4] ✓ 10 line(s) match on stdout
[tester::#XC5] [test-4] ✓ Received exit code 0.
[tester::#XC5] Test passed.

[tester::#EA6] Running tests for Stage #EA6 (Scanning: Lexical errors)
[tester::#EA6] [test-1] Running test case: 1
[tester::#EA6] [test-1] Writing contents to ./test.lox:
[tester::#EA6] [test-1] [test.lox] @
[tester::#EA6] [test-1] $ ./your_program.sh tokenize test.lox
[your_program] EOF  null
[your_program] [line 1] Error: Unexpected character: @
[tester::#EA6] [test-1] ✓ 1 line(s) match on stderr
[tester::#EA6] [test-1] ✓ 1 line(s) match on stdout
[tester::#EA6] [test-1] ✓ Received exit code 65.
[tester::#EA6] [test-2] Running test case: 2
[tester::#EA6] [test-2] Writing contents to ./test.lox:
[tester::#EA6] [test-2] [test.lox] ,.$(#
[tester::#EA6] [test-2] $ ./your_program.sh tokenize test.lox
[your_program] COMMA , null
[your_program] DOT . null
[your_program] LEFT_PAREN ( null
[your_program] EOF  null
[your_program] [line 1] Error: Unexpected character: $
[your_program] [line 1] Error: Unexpected character: #
[tester::#EA6] [test-2] ✓ 2 line(s) match on stderr
[tester::#EA6] [test-2] ✓ 4 line(s) match on stdout
[tester::#EA6] [test-2] ✓ Received exit code 65.
[tester::#EA6] [test-3] Running test case: 3
[tester::#EA6] [test-3] Writing contents to ./test.lox:
[tester::#EA6] [test-3] [test.lox] %$@@#
[tester::#EA6] [test-3] $ ./your_program.sh tokenize test.lox
[your_program] EOF  null
[your_program] [line 1] Error: Unexpected character: %
[your_program] [line 1] Error: Unexpected character: $
[your_program] [line 1] Error: Unexpected character: @
[your_program] [line 1] Error: Unexpected character: @
[your_program] [line 1] Error: Unexpected character: #
[tester::#EA6] [test-3] ✓ 5 line(s) match on stderr
[tester::#EA6] [test-3] ✓ 1 line(s) match on stdout
[tester::#EA6] [test-3] ✓ Received exit code 65.
[tester::#EA6] [test-4] Running test case: 4
[tester::#EA6] [test-4] Writing contents to ./test.lox:
[tester::#EA6] [test-4] [test.lox] {(-@$;%#*)}
[tester::#EA6] [test-4] $ ./your_program.sh tokenize test.lox
[your_program] LEFT_BRACE { null
[your_program] LEFT_PAREN ( null
[your_program] MINUS - null
[your_program] SEMICOLON ; null
[your_program] STAR * null
[your_program] RIGHT_PAREN ) null
[your_program] RIGHT_BRACE } null
[your_program] EOF  null
[your_program] [line 1] Error: Unexpected character: @
[your_program] [line 1] Error: Unexpected character: $
[your_program] [line 1] Error: Unexpected character: %
[your_program] [line 1] Error: Unexpected character: #
[tester::#EA6] [test-4] ✓ 4 line(s) match on stderr
[tester::#EA6] [test-4] ✓ 8 line(s) match on stdout
[tester::#EA6] [test-4] ✓ Received exit code 65.
[tester::#EA6] Test passed.

[tester::#MP7] Running tests for Stage #MP7 (Scanning: Assignment & equality Operators)
[tester::#MP7] [test-1] Running test case: 1
[tester::#MP7] [test-1] Writing contents to ./test.lox:
[tester::#MP7] [test-1] [test.lox] =
[tester::#MP7] [test-1] $ ./your_program.sh tokenize test.lox
[your_program] EQUAL = null
[your_program] EOF  null
[tester::#MP7] [test-1] ✓ 2 line(s) match on stdout
[tester::#MP7] [test-1] ✓ Received exit code 0.
[tester::#MP7] [test-2] Running test case: 2
[tester::#MP7] [test-2] Writing contents to ./test.lox:
[tester::#MP7] [test-2] [test.lox] ==
[tester::#MP7] [test-2] $ ./your_program.sh tokenize test.lox
[your_program] EQUAL_EQUAL == null
[your_program] EOF  null
[tester::#MP7] [test-2] ✓ 2 line(s) match on stdout
[tester::#MP7] [test-2] ✓ Received exit code 0.
[tester::#MP7] [test-3] Running test case: 3
[tester::#MP7] [test-3] Writing contents to ./test.lox:
[tester::#MP7] [test-3] [test.lox] ({=}){==}
[tester::#MP7] [test-3] $ ./your_program.sh tokenize test.lox
[your_program] LEFT_PAREN ( null
[your_program] LEFT_BRACE { null
[your_program] EQUAL = null
[your_program] RIGHT_BRACE } null
[your_program] RIGHT_PAREN ) null
[your_program] LEFT_BRACE { null
[your_program] EQUAL_EQUAL == null
[your_program] RIGHT_BRACE } null
[your_program] EOF  null
[tester::#MP7] [test-3] ✓ 9 line(s) match on stdout
[tester::#MP7] [test-3] ✓ Received exit code 0.
[tester::#MP7] [test-4] Running test case: 4
[tester::#MP7] [test-4] Writing contents to ./test.lox:
[tester::#MP7] [test-4] [test.lox] (($#%===))
[tester::#MP7] [test-4] $ ./your_program.sh tokenize test.lox
[your_program] [line 1] Error: Unexpected character: $
[your_program] [line 1] Error: Unexpected character: #
[your_program] [line 1] Error: Unexpected character: %
[your_program] LEFT_PAREN ( null
[your_program] LEFT_PAREN ( null
[your_program] EQUAL_EQUAL == null
[your_program] EQUAL = null
[your_program] RIGHT_PAREN ) null
[your_program] RIGHT_PAREN ) null
[your_program] EOF  null
[tester::#MP7] [test-4] ✓ 3 line(s) match on stderr
[tester::#MP7] [test-4] ✓ 7 line(s) match on stdout
[tester::#MP7] [test-4] ✓ Received exit code 65.
[tester::#MP7] Test passed.

[tester::#BU3] Running tests for Stage #BU3 (Scanning: Negation & inequality operators)
[tester::#BU3] [test-1] Running test case: 1
[tester::#BU3] [test-1] Writing contents to ./test.lox:
[tester::#BU3] [test-1] [test.lox] !=
[tester::#BU3] [test-1] $ ./your_program.sh tokenize test.lox
[your_program] BANG_EQUAL != null
[your_program] EOF  null
[tester::#BU3] [test-1] ✓ 2 line(s) match on stdout
[tester::#BU3] [test-1] ✓ Received exit code 0.
[tester::#BU3] [test-2] Running test case: 2
[tester::#BU3] [test-2] Writing contents to ./test.lox:
[tester::#BU3] [test-2] [test.lox] !!===
[tester::#BU3] [test-2] $ ./your_program.sh tokenize test.lox
[your_program] BANG ! null
[your_program] BANG_EQUAL != null
[your_program] EQUAL_EQUAL == null
[your_program] EOF  null
[tester::#BU3] [test-2] ✓ 4 line(s) match on stdout
[tester::#BU3] [test-2] ✓ Received exit code 0.
[tester::#BU3] [test-3] Running test case: 3
[tester::#BU3] [test-3] Writing contents to ./test.lox:
[tester::#BU3] [test-3] [test.lox] !{!}(!===)=
[tester::#BU3] [test-3] $ ./your_program.sh tokenize test.lox
[your_program] BANG ! null
[your_program] LEFT_BRACE { null
[your_program] BANG ! null
[your_program] RIGHT_BRACE } null
[your_program] LEFT_PAREN ( null
[your_program] BANG_EQUAL != null
[your_program] EQUAL_EQUAL == null
[your_program] RIGHT_PAREN ) null
[your_program] EQUAL = null
[your_program] EOF  null
[tester::#BU3] [test-3] ✓ 10 line(s) match on stdout
[tester::#BU3] [test-3] ✓ Received exit code 0.
[tester::#BU3] [test-4] Running test case: 4
[tester::#BU3] [test-4] Writing contents to ./test.lox:
[tester::#BU3] [test-4] [test.lox] {(=#@%$)}
[tester::#BU3] [test-4] $ ./your_program.sh tokenize test.lox
[your_program] LEFT_BRACE { null
[your_program] LEFT_PAREN ( null
[your_program] EQUAL = null
[your_program] RIGHT_PAREN ) null
[your_program] RIGHT_BRACE } null
[your_program] EOF  null
[your_program] [line 1] Error: Unexpected character: #
[your_program] [line 1] Error: Unexpected character: @
[your_program] [line 1] Error: Unexpected character: %
[your_program] [line 1] Error: Unexpected character: $
[tester::#BU3] [test-4] ✓ 4 line(s) match on stderr
[tester::#BU3] [test-4] ✓ 6 line(s) match on stdout
[tester::#BU3] [test-4] ✓ Received exit code 65.
[tester::#BU3] Test passed.

[tester::#ET2] Running tests for Stage #ET2 (Scanning: Relational operators)
[tester::#ET2] [test-1] Running test case: 1
[tester::#ET2] [test-1] Writing contents to ./test.lox:
[tester::#ET2] [test-1] [test.lox] >=
[tester::#ET2] [test-1] $ ./your_program.sh tokenize test.lox
[your_program] GREATER_EQUAL >= null
[your_program] EOF  null
[tester::#ET2] [test-1] ✓ 2 line(s) match on stdout
[tester::#ET2] [test-1] ✓ Received exit code 0.
[tester::#ET2] [test-2] Running test case: 2
[tester::#ET2] [test-2] Writing contents to ./test.lox:
[tester::#ET2] [test-2] [test.lox] <<<=>>>=
[tester::#ET2] [test-2] $ ./your_program.sh tokenize test.lox
[your_program] LESS < null
[your_program] LESS < null
[your_program] LESS_EQUAL <= null
[your_program] GREATER > null
[your_program] GREATER > null
[your_program] GREATER_EQUAL >= null
[your_program] EOF  null
[tester::#ET2] [test-2] ✓ 7 line(s) match on stdout
[tester::#ET2] [test-2] ✓ Received exit code 0.
[tester::#ET2] [test-3] Running test case: 3
[tester::#ET2] [test-3] Writing contents to ./test.lox:
[tester::#ET2] [test-3] [test.lox] <=<>=>>
[tester::#ET2] [test-3] $ ./your_program.sh tokenize test.lox
[your_program] LESS_EQUAL <= null
[your_program] LESS < null
[your_program] GREATER_EQUAL >= null
[your_program] GREATER > null
[your_program] GREATER > null
[your_program] EOF  null
[tester::#ET2] [test-3] ✓ 6 line(s) match on stdout
[tester::#ET2] [test-3] ✓ Received exit code 0.
[tester::#ET2] [test-4] Running test case: 4
[tester::#ET2] [test-4] Writing contents to ./test.lox:
[tester::#ET2] [test-4] [test.lox] (){!<=>=}
[tester::#ET2] [test-4] $ ./your_program.sh tokenize test.lox
[your_program] LEFT_PAREN ( null
[your_program] RIGHT_PAREN ) null
[your_program] LEFT_BRACE { null
[your_program] BANG ! null
[your_program] LESS_EQUAL <= null
[your_program] GREATER_EQUAL >= null
[your_program] RIGHT_BRACE } null
[your_program] EOF  null
[tester::#ET2] [test-4] ✓ 8 line(s) match on stdout
[tester::#ET2] [test-4] ✓ Received exit code 0.
[tester::#ET2] Test passed.

[tester::#ML2] Running tests for Stage #ML2 (Scanning: Division operator & comments)
[tester::#ML2] [test-1] Running test case: 1
[tester::#ML2] [test-1] Writing contents to ./test.lox:
[tester::#ML2] [test-1] [test.lox] //Comment
[tester::#ML2] [test-1] $ ./your_program.sh tokenize test.lox
[your_program] EOF  null
[your_program] comment: //Comment
[tester::#ML2] [test-1] ✓ 1 line(s) match on stdout
[tester::#ML2] [test-1] ✓ Received exit code 0.
[tester::#ML2] [test-2] Running test case: 2
[tester::#ML2] [test-2] Writing contents to ./test.lox:
[tester::#ML2] [test-2] [test.lox] (///Unicode:£§᯽☺♣)
[tester::#ML2] [test-2] $ ./your_program.sh tokenize test.lox
[your_program] comment: ///Unicode:£§᯽☺♣)
[your_program] LEFT_PAREN ( null
[your_program] EOF  null
[tester::#ML2] [test-2] ✓ 2 line(s) match on stdout
[tester::#ML2] [test-2] ✓ Received exit code 0.
[tester::#ML2] [test-3] Running test case: 3
[tester::#ML2] [test-3] Writing contents to ./test.lox:
[tester::#ML2] [test-3] [test.lox] /
[tester::#ML2] [test-3] $ ./your_program.sh tokenize test.lox
[your_program] SLASH / null
[your_program] EOF  null
[tester::#ML2] [test-3] ✓ 2 line(s) match on stdout
[tester::#ML2] [test-3] ✓ Received exit code 0.
[tester::#ML2] [test-4] Running test case: 4
[tester::#ML2] [test-4] Writing contents to ./test.lox:
[tester::#ML2] [test-4] [test.lox] ({(+>;)})//Comment
[tester::#ML2] [test-4] $ ./your_program.sh tokenize test.lox
[your_program] comment: //Comment
[your_program] LEFT_PAREN ( null
[your_program] LEFT_BRACE { null
[your_program] LEFT_PAREN ( null
[your_program] PLUS + null
[your_program] GREATER > null
[your_program] SEMICOLON ; null
[your_program] RIGHT_PAREN ) null
[your_program] RIGHT_BRACE } null
[your_program] RIGHT_PAREN ) null
[your_program] EOF  null
[tester::#ML2] [test-4] ✓ 10 line(s) match on stdout
[tester::#ML2] [test-4] ✓ Received exit code 0.
[tester::#ML2] Test passed.

[tester::#ER2] Running tests for Stage #ER2 (Scanning: Whitespace)
[tester::#ER2] [test-1] Running test case: 1
[tester::#ER2] [test-1] Writing contents to ./test.lox:
[tester::#ER2] [test-1] [test.lox] <|SPACE|>
[tester::#ER2] [test-1] $ ./your_program.sh tokenize test.lox
[your_program] EOF  null
[tester::#ER2] [test-1] ✓ 1 line(s) match on stdout
[tester::#ER2] [test-1] ✓ Received exit code 0.
[tester::#ER2] [test-2] Running test case: 2
[tester::#ER2] [test-2] Writing contents to ./test.lox:
[tester::#ER2] [test-2] [test.lox]  <|TAB|>
[tester::#ER2] [test-2] [test.lox] <|SPACE|>
[tester::#ER2] [test-2] $ ./your_program.sh tokenize test.lox
[your_program] EOF  null
[tester::#ER2] [test-2] ✓ 1 line(s) match on stdout
[tester::#ER2] [test-2] ✓ Received exit code 0.
[tester::#ER2] [test-3] Running test case: 3
[tester::#ER2] [test-3] Writing contents to ./test.lox:
[tester::#ER2] [test-3] [test.lox] {<|TAB|> }
[tester::#ER2] [test-3] [test.lox] ((* <|TAB|>-,))
[tester::#ER2] [test-3] $ ./your_program.sh tokenize test.lox
[your_program] LEFT_BRACE { null
[your_program] RIGHT_BRACE } null
[your_program] LEFT_PAREN ( null
[your_program] LEFT_PAREN ( null
[your_program] STAR * null
[your_program] MINUS - null
[your_program] COMMA , null
[your_program] RIGHT_PAREN ) null
[your_program] RIGHT_PAREN ) null
[your_program] EOF  null
[tester::#ER2] [test-3] ✓ 10 line(s) match on stdout
[tester::#ER2] [test-3] ✓ Received exit code 0.
[tester::#ER2] [test-4] Running test case: 4
[tester::#ER2] [test-4] Writing contents to ./test.lox:
[tester::#ER2] [test-4] [test.lox] { <|TAB|><|SPACE|>
[tester::#ER2] [test-4] [test.lox] }
[tester::#ER2] [test-4] [test.lox] ((>-<|SPACE|>>=))
[tester::#ER2] [test-4] $ ./your_program.sh tokenize test.lox
[your_program] LEFT_BRACE { null
[your_program] RIGHT_BRACE } null
[your_program] LEFT_PAREN ( null
[your_program] LEFT_PAREN ( null
[your_program] GREATER > null
[your_program] MINUS - null
[your_program] GREATER_EQUAL >= null
[your_program] RIGHT_PAREN ) null
[your_program] RIGHT_PAREN ) null
[your_program] EOF  null
[tester::#ER2] [test-4] ✓ 10 line(s) match on stdout
[tester::#ER2] [test-4] ✓ Received exit code 0.
[tester::#ER2] Test passed.

[tester::#TZ7] Running tests for Stage #TZ7 (Scanning: Multi-line errors)
[tester::#TZ7] [test-1] Running test case: 1
[tester::#TZ7] [test-1] Writing contents to ./test.lox:
[tester::#TZ7] [test-1] [test.lox] ()<|SPACE|><|TAB|>@
[tester::#TZ7] [test-1] $ ./your_program.sh tokenize test.lox
[your_program] LEFT_PAREN ( null
[your_program] [line 2] Error: Unexpected character: @
[your_program] RIGHT_PAREN ) null
[your_program] EOF  null
[tester::#TZ7] [test-1] ✓ 1 line(s) match on stderr
[tester::#TZ7] [test-1] ✓ 3 line(s) match on stdout
[tester::#TZ7] [test-1] ✓ Received exit code 65.
[tester::#TZ7] [test-2] Running test case: 2
[tester::#TZ7] [test-2] Writing contents to ./test.lox:
[tester::#TZ7] [test-2] [test.lox]  #%@
[tester::#TZ7] [test-2] $ ./your_program.sh tokenize test.lox
[your_program] [line 1] Error: Unexpected character: #
[your_program] [line 1] Error: Unexpected character: %
[your_program] [line 1] Error: Unexpected character: @
[your_program] EOF  null
[tester::#TZ7] [test-2] ✓ 3 line(s) match on stderr
[tester::#TZ7] [test-2] ✓ 1 line(s) match on stdout
[tester::#TZ7] [test-2] ✓ Received exit code 65.
[tester::#TZ7] [test-3] Running test case: 3
[tester::#TZ7] [test-3] Writing contents to ./test.lox:
[tester::#TZ7] [test-3] [test.lox] ()  #<|TAB|>{}
[tester::#TZ7] [test-3] [test.lox] @
[tester::#TZ7] [test-3] [test.lox] $
[tester::#TZ7] [test-3] [test.lox] +++
[tester::#TZ7] [test-3] [test.lox] // Let's Go!
[tester::#TZ7] [test-3] [test.lox] +++
[tester::#TZ7] [test-3] [test.lox] #
[tester::#TZ7] [test-3] $ ./your_program.sh tokenize test.lox
[your_program] LEFT_PAREN ( null
[your_program] [line 1] Error: Unexpected character: #
[your_program] RIGHT_PAREN ) null
[your_program] LEFT_BRACE { null
[your_program] [line 2] Error: Unexpected character: @
[your_program] [line 3] Error: Unexpected character: $
[your_program] RIGHT_BRACE } null
[your_program] comment: //Let's Go!
[your_program] [line 7] Error: Unexpected character: #
[your_program] PLUS + null
[your_program] PLUS + null
[your_program] PLUS + null
[your_program] PLUS + null
[your_program] PLUS + null
[your_program] PLUS + null
[your_program] EOF  null
[tester::#TZ7] [test-3] ✓ 4 line(s) match on stderr
[tester::#TZ7] [test-3] ✓ 11 line(s) match on stdout
[tester::#TZ7] [test-3] ✓ Received exit code 65.
[tester::#TZ7] [test-4] Running test case: 4
[tester::#TZ7] [test-4] Writing contents to ./test.lox:
[tester::#TZ7] [test-4] [test.lox] ({;<|TAB|>$})
[tester::#TZ7] [test-4] $ ./your_program.sh tokenize test.lox
[your_program] LEFT_PAREN ( null
[your_program] LEFT_BRACE { null
[your_program] SEMICOLON ; null
[your_program] RIGHT_BRACE } null
[your_program] RIGHT_PAREN ) null
[your_program] EOF  null
[your_program] [line 1] Error: Unexpected character: $
[tester::#TZ7] [test-4] ✓ 1 line(s) match on stderr
[tester::#TZ7] [test-4] ✓ 6 line(s) match on stdout
[tester::#TZ7] [test-4] ✓ Received exit code 65.
[tester::#TZ7] Test passed.

[tester::#UE7] Running tests for Stage #UE7 (Scanning: String literals)
[tester::#UE7] [test-1] Running test case: 1
[tester::#UE7] [test-1] Writing contents to ./test.lox:
[tester::#UE7] [test-1] [test.lox] "hello"
[tester::#UE7] [test-1] $ ./your_program.sh tokenize test.lox
[your_program] STRING "hello" hello
[your_program] EOF  null
[tester::#UE7] [test-1] ✓ 2 line(s) match on stdout
[tester::#UE7] [test-1] ✓ Received exit code 0.
[tester::#UE7] [test-2] Running test case: 2
[tester::#UE7] [test-2] Writing contents to ./test.lox:
[tester::#UE7] [test-2] [test.lox] "world" "unterminated
[tester::#UE7] [test-2] $ ./your_program.sh tokenize test.lox
[your_program] [line 1] Error: Unterminated string.
[your_program] STRING "world" world
[your_program] EOF  null
[tester::#UE7] [test-2] ✓ 1 line(s) match on stderr
[tester::#UE7] [test-2] ✓ 2 line(s) match on stdout
[tester::#UE7] [test-2] ✓ Received exit code 65.
[tester::#UE7] [test-3] Running test case: 3
[tester::#UE7] [test-3] Writing contents to ./test.lox:
[tester::#UE7] [test-3] [test.lox] "foo <|TAB|>bar 123 // hello world!"
[tester::#UE7] [test-3] $ ./your_program.sh tokenize test.lox
[your_program] STRING "foo 	bar 123 // hello world!" foo 	bar 123 // hello world!
[your_program] EOF  null
[tester::#UE7] [test-3] ✓ 2 line(s) match on stdout
[tester::#UE7] [test-3] ✓ Received exit code 0.
[tester::#UE7] [test-4] Running test case: 4
[tester::#UE7] [test-4] Writing contents to ./test.lox:
[tester::#UE7] [test-4] [test.lox] ("world"+"foo") != "other_string"
[tester::#UE7] [test-4] $ ./your_program.sh tokenize test.lox
[your_program] LEFT_PAREN ( null
[your_program] STRING "world" world
[your_program] PLUS + null
[your_program] STRING "foo" foo
[your_program] RIGHT_PAREN ) null
[your_program] BANG_EQUAL != null
[your_program] STRING "other_string" other_string
[your_program] EOF  null
[tester::#UE7] [test-4] ✓ 8 line(s) match on stdout
[tester::#UE7] [test-4] ✓ Received exit code 0.
[tester::#UE7] Test passed.

[tester::#KJ0] Running tests for Stage #KJ0 (Scanning: Number literals)
[tester::#KJ0] [test-1] Running test case: 1
[tester::#KJ0] [test-1] Writing contents to ./test.lox:
[tester::#KJ0] [test-1] [test.lox] 64
[tester::#KJ0] [test-1] $ ./your_program.sh tokenize test.lox
[your_program] NUMBER 64 64.0
[your_program] EOF  null
[tester::#KJ0] [test-1] ✓ 2 line(s) match on stdout
[tester::#KJ0] [test-1] ✓ Received exit code 0.
[tester::#KJ0] [test-2] Running test case: 2
[tester::#KJ0] [test-2] Writing contents to ./test.lox:
[tester::#KJ0] [test-2] [test.lox] 21.60
[tester::#KJ0] [test-2] $ ./your_program.sh tokenize test.lox
[your_program] NUMBER 21.60 21.6
[your_program] EOF  null
[tester::#KJ0] [test-2] ✓ 2 line(s) match on stdout
[tester::#KJ0] [test-2] ✓ Received exit code 0.
[tester::#KJ0] [test-3] Running test case: 3
[tester::#KJ0] [test-3] Writing contents to ./test.lox:
[tester::#KJ0] [test-3] [test.lox] 57.0000
[tester::#KJ0] [test-3] $ ./your_program.sh tokenize test.lox
[your_program] NUMBER 57.0000 57.0
[your_program] EOF  null
[tester::#KJ0] [test-3] ✓ 2 line(s) match on stdout
[tester::#KJ0] [test-3] ✓ Received exit code 0.
[tester::#KJ0] [test-4] Running test case: 4
[tester::#KJ0] [test-4] Writing contents to ./test.lox:
[tester::#KJ0] [test-4] [test.lox] (51+89) > 85 != ("Success" != "Failure") != (44 >= 22)
[tester::#KJ0] [test-4] $ ./your_program.sh tokenize test.lox
[your_program] LEFT_PAREN ( null
[your_program] NUMBER 51 51.0
[your_program] PLUS + null
[your_program] NUMBER 89 89.0
[your_program] RIGHT_PAREN ) null
[your_program] GREATER > null
[your_program] NUMBER 85 85.0
[your_program] BANG_EQUAL != null
[your_program] LEFT_PAREN ( null
[your_program] STRING "Success" Success
[your_program] BANG_EQUAL != null
[your_program] STRING "Failure" Failure
[your_program] RIGHT_PAREN ) null
[your_program] BANG_EQUAL != null
[your_program] LEFT_PAREN ( null
[your_program] NUMBER 44 44.0
[your_program] GREATER_EQUAL >= null
[your_program] NUMBER 22 22.0
[your_program] RIGHT_PAREN ) null
[your_program] EOF  null
[tester::#KJ0] [test-4] ✓ 20 line(s) match on stdout
[tester::#KJ0] [test-4] ✓ Received exit code 0.
[tester::#KJ0] Test passed.

[tester::#EY7] Running tests for Stage #EY7 (Scanning: Identifiers)
[tester::#EY7] [test-1] Running test case: 1
[tester::#EY7] [test-1] Writing contents to ./test.lox:
[tester::#EY7] [test-1] [test.lox] baz bar
[tester::#EY7] [test-1] $ ./your_program.sh tokenize test.lox
[your_program] IDENTIFIER baz null
[your_program] IDENTIFIER bar null
[your_program] EOF  null
[tester::#EY7] [test-1] ✓ 3 line(s) match on stdout
[tester::#EY7] [test-1] ✓ Received exit code 0.
[tester::#EY7] [test-2] Running test case: 2
[tester::#EY7] [test-2] Writing contents to ./test.lox:
[tester::#EY7] [test-2] [test.lox] _1236ar _hello foo baz f00
[tester::#EY7] [test-2] $ ./your_program.sh tokenize test.lox
[your_program] IDENTIFIER _1236ar null
[your_program] IDENTIFIER _hello null
[your_program] IDENTIFIER foo null
[your_program] IDENTIFIER baz null
[your_program] IDENTIFIER f00 null
[your_program] EOF  null
[tester::#EY7] [test-2] ✓ 6 line(s) match on stdout
[tester::#EY7] [test-2] ✓ Received exit code 0.
[tester::#EY7] [test-3] Running test case: 3
[tester::#EY7] [test-3] Writing contents to ./test.lox:
[tester::#EY7] [test-3] [test.lox] message = "Hello, World!"
[tester::#EY7] [test-3] [test.lox] number = 123
[tester::#EY7] [test-3] $ ./your_program.sh tokenize test.lox
[your_program] IDENTIFIER message null
[your_program] EQUAL = null
[your_program] STRING "Hello, World!" Hello, World!
[your_program] IDENTIFIER number null
[your_program] EQUAL = null
[your_program] NUMBER 123 123.0
[your_program] EOF  null
[tester::#EY7] [test-3] ✓ 7 line(s) match on stdout
[tester::#EY7] [test-3] ✓ Received exit code 0.
[tester::#EY7] [test-4] Running test case: 4
[tester::#EY7] [test-4] Writing contents to ./test.lox:
[tester::#EY7] [test-4] [test.lox] {
[tester::#EY7] [test-4] [test.lox] // This is a complex test case
[tester::#EY7] [test-4] [test.lox] str1 = "Test"
[tester::#EY7] [test-4] [test.lox] str2 = "Case"
[tester::#EY7] [test-4] [test.lox] num1 = 100
[tester::#EY7] [test-4] [test.lox] num2 = 200.00
[tester::#EY7] [test-4] [test.lox] result = (str1 == str2) != ((num1 + num2) >= 300)
[tester::#EY7] [test-4] [test.lox] }
[tester::#EY7] [test-4] $ ./your_program.sh tokenize test.lox
[your_program] comment: //This is a complex test case
[your_program] LEFT_BRACE { null
[your_program] IDENTIFIER str1 null
[your_program] EQUAL = null
[your_program] STRING "Test" Test
[your_program] IDENTIFIER str2 null
[your_program] EQUAL = null
[your_program] STRING "Case" Case
[your_program] IDENTIFIER num1 null
[your_program] EQUAL = null
[your_program] NUMBER 100 100.0
[your_program] IDENTIFIER num2 null
[your_program] EQUAL = null
[your_program] NUMBER 200.00 200.0
[your_program] IDENTIFIER result null
[your_program] EQUAL = null
[your_program] LEFT_PAREN ( null
[your_program] IDENTIFIER str1 null
[your_program] EQUAL_EQUAL == null
[your_program] IDENTIFIER str2 null
[your_program] RIGHT_PAREN ) null
[your_program] BANG_EQUAL != null
[your_program] LEFT_PAREN ( null
[your_program] LEFT_PAREN ( null
[your_program] IDENTIFIER num1 null
[your_program] PLUS + null
[your_program] IDENTIFIER num2 null
[your_program] RIGHT_PAREN ) null
[your_program] GREATER_EQUAL >= null
[your_program] NUMBER 300 300.0
[your_program] RIGHT_PAREN ) null
[your_program] RIGHT_BRACE } null
[your_program] EOF  null
[tester::#EY7] [test-4] ✓ 32 line(s) match on stdout
[tester::#EY7] [test-4] ✓ Received exit code 0.
[tester::#EY7] Test passed.

[tester::#PQ5] Running tests for Stage #PQ5 (Scanning: Reserved words)
[tester::#PQ5] [test-1] Running test case: 1
[tester::#PQ5] [test-1] Writing contents to ./test.lox:
[tester::#PQ5] [test-1] [test.lox] false
[tester::#PQ5] [test-1] $ ./your_program.sh tokenize test.lox
[your_program] FALSE false null
[your_program] EOF  null
[tester::#PQ5] [test-1] ✓ 2 line(s) match on stdout
[tester::#PQ5] [test-1] ✓ Received exit code 0.
[tester::#PQ5] [test-2] Running test case: 2
[tester::#PQ5] [test-2] Writing contents to ./test.lox:
[tester::#PQ5] [test-2] [test.lox] nil OR TRUE var CLASS else FUN WHILE or THIS class fun VAR AND and RETURN FALSE false if super while this NIL true print SUPER return FOR IF for PRINT ELSE
[tester::#PQ5] [test-2] $ ./your_program.sh tokenize test.lox
[your_program] NIL nil null
[your_program] IDENTIFIER OR null
[your_program] IDENTIFIER TRUE null
[your_program] VAR var null
[your_program] IDENTIFIER CLASS null
[your_program] ELSE else null
[your_program] IDENTIFIER FUN null
[your_program] IDENTIFIER WHILE null
[your_program] OR or null
[your_program] IDENTIFIER THIS null
[your_program] CLASS class null
[your_program] FUN fun null
[your_program] IDENTIFIER VAR null
[your_program] IDENTIFIER AND null
[your_program] AND and null
[your_program] IDENTIFIER RETURN null
[your_program] IDENTIFIER FALSE null
[your_program] FALSE false null
[your_program] IF if null
[your_program] SUPER super null
[your_program] WHILE while null
[your_program] THIS this null
[your_program] IDENTIFIER NIL null
[your_program] TRUE true null
[your_program] PRINT print null
[your_program] IDENTIFIER SUPER null
[your_program] RETURN return null
[your_program] IDENTIFIER FOR null
[your_program] IDENTIFIER IF null
[your_program] FOR for null
[your_program] IDENTIFIER PRINT null
[your_program] IDENTIFIER ELSE null
[your_program] EOF  null
[tester::#PQ5] [test-2] ✓ 33 line(s) match on stdout
[tester::#PQ5] [test-2] ✓ Received exit code 0.
[tester::#PQ5] [test-3] Running test case: 3
[tester::#PQ5] [test-3] Writing contents to ./test.lox:
[tester::#PQ5] [test-3] [test.lox] var greeting = "Hello"
[tester::#PQ5] [test-3] [test.lox] if (greeting == "Hello") {
[tester::#PQ5] [test-3] [test.lox]     return true
[tester::#PQ5] [test-3] [test.lox] } else {
[tester::#PQ5] [test-3] [test.lox]     return false
[tester::#PQ5] [test-3] [test.lox] }
[tester::#PQ5] [test-3] $ ./your_program.sh tokenize test.lox
[your_program] VAR var null
[your_program] IDENTIFIER greeting null
[your_program] EQUAL = null
[your_program] STRING "Hello" Hello
[your_program] IF if null
[your_program] LEFT_PAREN ( null
[your_program] IDENTIFIER greeting null
[your_program] EQUAL_EQUAL == null
[your_program] STRING "Hello" Hello
[your_program] RIGHT_PAREN ) null
[your_program] LEFT_BRACE { null
[your_program] RETURN return null
[your_program] TRUE true null
[your_program] RIGHT_BRACE } null
[your_program] ELSE else null
[your_program] LEFT_BRACE { null
[your_program] RETURN return null
[your_program] FALSE false null
[your_program] RIGHT_BRACE } null
[your_program] EOF  null
[tester::#PQ5] [test-3] ✓ 20 line(s) match on stdout
[tester::#PQ5] [test-3] ✓ Received exit code 0.
[tester::#PQ5] [test-4] Running test case: 4
[tester::#PQ5] [test-4] Writing contents to ./test.lox:
[tester::#PQ5] [test-4] [test.lox] var result = (a + b) > 7 or "Success" != "Failure" or x >= 5
[tester::#PQ5] [test-4] [test.lox] while (result) {
[tester::#PQ5] [test-4] [test.lox]     var counter = 0
[tester::#PQ5] [test-4] [test.lox]     counter = counter + 1
[tester::#PQ5] [test-4] [test.lox]     if (counter == 10) {
[tester::#PQ5] [test-4] [test.lox]         return nil
[tester::#PQ5] [test-4] [test.lox]     }
[tester::#PQ5] [test-4] [test.lox] }
[tester::#PQ5] [test-4] $ ./your_program.sh tokenize test.lox
[your_program] VAR var null
[your_program] IDENTIFIER result null
[your_program] EQUAL = null
[your_program] LEFT_PAREN ( null
[your_program] IDENTIFIER a null
[your_program] PLUS + null
[your_program] IDENTIFIER b null
[your_program] RIGHT_PAREN ) null
[your_program] GREATER > null
[your_program] NUMBER 7 7.0
[your_program] OR or null
[your_program] STRING "Success" Success
[your_program] BANG_EQUAL != null
[your_program] STRING "Failure" Failure
[your_program] OR or null
[your_program] IDENTIFIER x null
[your_program] GREATER_EQUAL >= null
[your_program] NUMBER 5 5.0
[your_program] WHILE while null
[your_program] LEFT_PAREN ( null
[your_program] IDENTIFIER result null
[your_program] RIGHT_PAREN ) null
[your_program] LEFT_BRACE { null
[your_program] VAR var null
[your_program] IDENTIFIER counter null
[your_program] EQUAL = null
[your_program] NUMBER 0 0.0
[your_program] IDENTIFIER counter null
[your_program] EQUAL = null
[your_program] IDENTIFIER counter null
[your_program] PLUS + null
[your_program] NUMBER 1 1.0
[your_program] IF if null
[your_program] LEFT_PAREN ( null
[your_program] IDENTIFIER counter null
[your_program] EQUAL_EQUAL == null
[your_program] NUMBER 10 10.0
[your_program] RIGHT_PAREN ) null
[your_program] LEFT_BRACE { null
[your_program] RETURN return null
[your_program] NIL nil null
[your_program] RIGHT_BRACE } null
[your_program] RIGHT_BRACE } null
[your_program] EOF  null
[tester::#PQ5] [test-4] ✓ 44 line(s) match on stdout
[tester::#PQ5] [test-4] ✓ Received exit code 0.
[tester::#PQ5] Test passed.

[tester::#SC2] Running tests for Stage #SC2 (Parsing Expressions - Booleans & Nil)
[tester::#SC2] [test-1] Running test case: 1
[tester::#SC2] [test-1] Writing contents to ./test.lox:
[tester::#SC2] [test-1] [test.lox] true
[tester::#SC2] [test-1] $ ./your_program.sh parse test.lox
[your_program] true
[tester::#SC2] [test-1] ✓ 1 line(s) match on stdout
[tester::#SC2] [test-1] ✓ Received exit code 0.
[tester::#SC2] [test-2] Running test case: 2
[tester::#SC2] [test-2] Writing contents to ./test.lox:
[tester::#SC2] [test-2] [test.lox] false
[tester::#SC2] [test-2] $ ./your_program.sh parse test.lox
[your_program] false
[tester::#SC2] [test-2] ✓ 1 line(s) match on stdout
[tester::#SC2] [test-2] ✓ Received exit code 0.
[tester::#SC2] [test-3] Running test case: 3
[tester::#SC2] [test-3] Writing contents to ./test.lox:
[tester::#SC2] [test-3] [test.lox] nil
[tester::#SC2] [test-3] $ ./your_program.sh parse test.lox
[your_program] nil
[tester::#SC2] [test-3] ✓ 1 line(s) match on stdout
[tester::#SC2] [test-3] ✓ Received exit code 0.
[tester::#SC2] Test passed.

[tester::#RA8] Running tests for Stage #RA8 (Parsing Expressions - Number literals)
[tester::#RA8] [test-1] Running test case: 1
[tester::#RA8] [test-1] Writing contents to ./test.lox:
[tester::#RA8] [test-1] [test.lox] 74
[tester::#RA8] [test-1] $ ./your_program.sh parse test.lox
[your_program] 74.0
[tester::#RA8] [test-1] ✓ 1 line(s) match on stdout
[tester::#RA8] [test-1] ✓ Received exit code 0.
[tester::#RA8] [test-2] Running test case: 2
[tester::#RA8] [test-2] Writing contents to ./test.lox:
[tester::#RA8] [test-2] [test.lox] 0.0
[tester::#RA8] [test-2] $ ./your_program.sh parse test.lox
[your_program] 0.0
[tester::#RA8] [test-2] ✓ 1 line(s) match on stdout
[tester::#RA8] [test-2] ✓ Received exit code 0.
[tester::#RA8] [test-3] Running test case: 3
[tester::#RA8] [test-3] Writing contents to ./test.lox:
[tester::#RA8] [test-3] [test.lox] 66.51
[tester::#RA8] [test-3] $ ./your_program.sh parse test.lox
[your_program] 66.51
[tester::#RA8] [test-3] ✓ 1 line(s) match on stdout
[tester::#RA8] [test-3] ✓ Received exit code 0.
[tester::#RA8] Test passed.

[tester::#TH5] Running tests for Stage #TH5 (Parsing Expressions - String literals)
[tester::#TH5] [test-1] Running test case: 1
[tester::#TH5] [test-1] Writing contents to ./test.lox:
[tester::#TH5] [test-1] [test.lox] "bar world"
[tester::#TH5] [test-1] $ ./your_program.sh parse test.lox
[your_program] bar world
[tester::#TH5] [test-1] ✓ 1 line(s) match on stdout
[tester::#TH5] [test-1] ✓ Received exit code 0.
[tester::#TH5] [test-2] Running test case: 2
[tester::#TH5] [test-2] Writing contents to ./test.lox:
[tester::#TH5] [test-2] [test.lox] "'baz'"
[tester::#TH5] [test-2] $ ./your_program.sh parse test.lox
[your_program] 'baz'
[tester::#TH5] [test-2] ✓ 1 line(s) match on stdout
[tester::#TH5] [test-2] ✓ Received exit code 0.
[tester::#TH5] [test-3] Running test case: 3
[tester::#TH5] [test-3] Writing contents to ./test.lox:
[tester::#TH5] [test-3] [test.lox] "// hello"
[tester::#TH5] [test-3] $ ./your_program.sh parse test.lox
[your_program] // hello
[tester::#TH5] [test-3] ✓ 1 line(s) match on stdout
[tester::#TH5] [test-3] ✓ Received exit code 0.
[tester::#TH5] [test-4] Running test case: 4
[tester::#TH5] [test-4] Writing contents to ./test.lox:
[tester::#TH5] [test-4] [test.lox] "45"
[tester::#TH5] [test-4] $ ./your_program.sh parse test.lox
[your_program] 45
[tester::#TH5] [test-4] ✓ 1 line(s) match on stdout
[tester::#TH5] [test-4] ✓ Received exit code 0.
[tester::#TH5] Test passed.

[tester::#XE6] Running tests for Stage #XE6 (Parsing Expressions - Parentheses)
[tester::#XE6] [test-1] Running test case: 1
[tester::#XE6] [test-1] Writing contents to ./test.lox:
[tester::#XE6] [test-1] [test.lox] ("foo")
[tester::#XE6] [test-1] $ ./your_program.sh parse test.lox
[your_program] (group foo)
[tester::#XE6] [test-1] ✓ 1 line(s) match on stdout
[tester::#XE6] [test-1] ✓ Received exit code 0.
[tester::#XE6] [test-2] Running test case: 2
[tester::#XE6] [test-2] Writing contents to ./test.lox:
[tester::#XE6] [test-2] [test.lox] ((true))
[tester::#XE6] [test-2] $ ./your_program.sh parse test.lox
[your_program] (group (group true))
[tester::#XE6] [test-2] ✓ 1 line(s) match on stdout
[tester::#XE6] [test-2] ✓ Received exit code 0.
[tester::#XE6] [test-3] Running test case: 3
[tester::#XE6] [test-3] Writing contents to ./test.lox:
[tester::#XE6] [test-3] [test.lox] (nil)
[tester::#XE6] [test-3] $ ./your_program.sh parse test.lox
[your_program] (group nil)
[tester::#XE6] [test-3] ✓ 1 line(s) match on stdout
[tester::#XE6] [test-3] ✓ Received exit code 0.
[tester::#XE6] [test-4] Running test case: 4
[tester::#XE6] [test-4] Writing contents to ./test.lox:
[tester::#XE6] [test-4] [test.lox] (13.57)
[tester::#XE6] [test-4] $ ./your_program.sh parse test.lox
[your_program] (group 13.57)
[tester::#XE6] [test-4] ✓ 1 line(s) match on stdout
[tester::#XE6] [test-4] ✓ Received exit code 0.
[tester::#XE6] Test passed.

[tester::#MQ1] Running tests for Stage #MQ1 (Parsing Expressions - Unary Operators)
[tester::#MQ1] [test-1] Running test case: 1
[tester::#MQ1] [test-1] Writing contents to ./test.lox:
[tester::#MQ1] [test-1] [test.lox] !true
[tester::#MQ1] [test-1] $ ./your_program.sh parse test.lox
[your_program] (! true)
[tester::#MQ1] [test-1] ✓ 1 line(s) match on stdout
[tester::#MQ1] [test-1] ✓ Received exit code 0.
[tester::#MQ1] [test-2] Running test case: 2
[tester::#MQ1] [test-2] Writing contents to ./test.lox:
[tester::#MQ1] [test-2] [test.lox] -92
[tester::#MQ1] [test-2] $ ./your_program.sh parse test.lox
[your_program] (- 92.0)
[tester::#MQ1] [test-2] ✓ 1 line(s) match on stdout
[tester::#MQ1] [test-2] ✓ Received exit code 0.
[tester::#MQ1] [test-3] Running test case: 3
[tester::#MQ1] [test-3] Writing contents to ./test.lox:
[tester::#MQ1] [test-3] [test.lox] !!false
[tester::#MQ1] [test-3] $ ./your_program.sh parse test.lox
[your_program] (! (! false))
[tester::#MQ1] [test-3] ✓ 1 line(s) match on stdout
[tester::#MQ1] [test-3] ✓ Received exit code 0.
[tester::#MQ1] [test-4] Running test case: 4
[tester::#MQ1] [test-4] Writing contents to ./test.lox:
[tester::#MQ1] [test-4] [test.lox] (!!(false))
[tester::#MQ1] [test-4] $ ./your_program.sh parse test.lox
[your_program] (group (! (! (group false))))
[tester::#MQ1] [test-4] ✓ 1 line(s) match on stdout
[tester::#MQ1] [test-4] ✓ Received exit code 0.
[tester::#MQ1] Test passed.

[tester::#WA9] Running tests for Stage #WA9 (Parsing Expressions - Arithmetic operators (1/2))
[tester::#WA9] [test-1] Running test case: 1
[tester::#WA9] [test-1] Writing contents to ./test.lox:
[tester::#WA9] [test-1] [test.lox] 87 * 59 / 25
[tester::#WA9] [test-1] $ ./your_program.sh parse test.lox
[your_program] (/ (* 87.0 59.0) 25.0)
[tester::#WA9] [test-1] ✓ 1 line(s) match on stdout
[tester::#WA9] [test-1] ✓ Received exit code 0.
[tester::#WA9] [test-2] Running test case: 2
[tester::#WA9] [test-2] Writing contents to ./test.lox:
[tester::#WA9] [test-2] [test.lox] 67 / 33 / 22
[tester::#WA9] [test-2] $ ./your_program.sh parse test.lox
[your_program] (/ (/ 67.0 33.0) 22.0)
[tester::#WA9] [test-2] ✓ 1 line(s) match on stdout
[tester::#WA9] [test-2] ✓ Received exit code 0.
[tester::#WA9] [test-3] Running test case: 3
[tester::#WA9] [test-3] Writing contents to ./test.lox:
[tester::#WA9] [test-3] [test.lox] 80 * 32 * 85 / 62
[tester::#WA9] [test-3] $ ./your_program.sh parse test.lox
[your_program] (/ (* (* 80.0 32.0) 85.0) 62.0)
[tester::#WA9] [test-3] ✓ 1 line(s) match on stdout
[tester::#WA9] [test-3] ✓ Received exit code 0.
[tester::#WA9] [test-4] Running test case: 4
[tester::#WA9] [test-4] Writing contents to ./test.lox:
[tester::#WA9] [test-4] [test.lox] (75 * -20 / (59 * 95))
[tester::#WA9] [test-4] $ ./your_program.sh parse test.lox
[your_program] (group (/ (* 75.0 (- 20.0)) (group (* 59.0 95.0))))
[tester::#WA9] [test-4] ✓ 1 line(s) match on stdout
[tester::#WA9] [test-4] ✓ Received exit code 0.
[tester::#WA9] Test passed.

[tester::#YF2] Running tests for Stage #YF2 (Parsing Expressions - Arithmetic operators (2/2))
[tester::#YF2] [test-1] Running test case: 1
[tester::#YF2] [test-1] Writing contents to ./test.lox:
[tester::#YF2] [test-1] [test.lox] "hello" + "world"
[tester::#YF2] [test-1] $ ./your_program.sh parse test.lox
[your_program] (+ hello world)
[tester::#YF2] [test-1] ✓ 1 line(s) match on stdout
[tester::#YF2] [test-1] ✓ Received exit code 0.
[tester::#YF2] [test-2] Running test case: 2
[tester::#YF2] [test-2] Writing contents to ./test.lox:
[tester::#YF2] [test-2] [test.lox] 12 - 34 * 50 - 94
[tester::#YF2] [test-2] $ ./your_program.sh parse test.lox
[your_program] (- (- 12.0 (* 34.0 50.0)) 94.0)
[tester::#YF2] [test-2] ✓ 1 line(s) match on stdout
[tester::#YF2] [test-2] ✓ Received exit code 0.
[tester::#YF2] [test-3] Running test case: 3
[tester::#YF2] [test-3] Writing contents to ./test.lox:
[tester::#YF2] [test-3] [test.lox] 59 + 20 - 48 / 92
[tester::#YF2] [test-3] $ ./your_program.sh parse test.lox
[your_program] (- (+ 59.0 20.0) (/ 48.0 92.0))
[tester::#YF2] [test-3] ✓ 1 line(s) match on stdout
[tester::#YF2] [test-3] ✓ Received exit code 0.
[tester::#YF2] [test-4] Running test case: 4
[tester::#YF2] [test-4] Writing contents to ./test.lox:
[tester::#YF2] [test-4] [test.lox] (-43 + 74) * (39 * 88) / (21 + 96)
[tester::#YF2] [test-4] $ ./your_program.sh parse test.lox
[your_program] (/ (* (group (+ (- 43.0) 74.0)) (group (* 39.0 88.0))) (group (+ 21.0 96.0)))
[tester::#YF2] [test-4] ✓ 1 line(s) match on stdout
[tester::#YF2] [test-4] ✓ Received exit code 0.
[tester::#YF2] Test passed.

[tester::#UH4] Running tests for Stage #UH4 (Parsing Expressions - Comparison operators)
[tester::#UH4] [test-1] Running test case: 1
[tester::#UH4] [test-1] Writing contents to ./test.lox:
[tester::#UH4] [test-1] [test.lox] 18 > -3
[tester::#UH4] [test-1] $ ./your_program.sh parse test.lox
[your_program] (> 18.0 (- 3.0))
[tester::#UH4] [test-1] ✓ 1 line(s) match on stdout
[tester::#UH4] [test-1] ✓ Received exit code 0.
[tester::#UH4] [test-2] Running test case: 2
[tester::#UH4] [test-2] Writing contents to ./test.lox:
[tester::#UH4] [test-2] [test.lox] 21 <= 39
[tester::#UH4] [test-2] $ ./your_program.sh parse test.lox
[your_program] (<= 21.0 39.0)
[tester::#UH4] [test-2] ✓ 1 line(s) match on stdout
[tester::#UH4] [test-2] ✓ Received exit code 0.
[tester::#UH4] [test-3] Running test case: 3
[tester::#UH4] [test-3] Writing contents to ./test.lox:
[tester::#UH4] [test-3] [test.lox] 18 < 39 < 60
[tester::#UH4] [test-3] $ ./your_program.sh parse test.lox
[your_program] (< (< 18.0 39.0) 60.0)
[tester::#UH4] [test-3] ✓ 1 line(s) match on stdout
[tester::#UH4] [test-3] ✓ Received exit code 0.
[tester::#UH4] [test-4] Running test case: 4
[tester::#UH4] [test-4] Writing contents to ./test.lox:
[tester::#UH4] [test-4] [test.lox] (13 - 88) >= -(10 / 44 + 61)
[tester::#UH4] [test-4] $ ./your_program.sh parse test.lox
[your_program] (>= (group (- 13.0 88.0)) (- (group (+ (/ 10.0 44.0) 61.0))))
[tester::#UH4] [test-4] ✓ 1 line(s) match on stdout
[tester::#UH4] [test-4] ✓ Received exit code 0.
[tester::#UH4] Test passed.

[tester::#HT8] Running tests for Stage #HT8 (Parsing Expressions - Equality operators)
[tester::#HT8] [test-1] Running test case: 1
[tester::#HT8] [test-1] Writing contents to ./test.lox:
[tester::#HT8] [test-1] [test.lox] "baz"!="hello"
[tester::#HT8] [test-1] $ ./your_program.sh parse test.lox
[your_program] (!= baz hello)
[tester::#HT8] [test-1] ✓ 1 line(s) match on stdout
[tester::#HT8] [test-1] ✓ Received exit code 0.
[tester::#HT8] [test-2] Running test case: 2
[tester::#HT8] [test-2] Writing contents to ./test.lox:
[tester::#HT8] [test-2] [test.lox] "bar" == "bar"
[tester::#HT8] [test-2] $ ./your_program.sh parse test.lox
[your_program] (== bar bar)
[tester::#HT8] [test-2] ✓ 1 line(s) match on stdout
[tester::#HT8] [test-2] ✓ Received exit code 0.
[tester::#HT8] [test-3] Running test case: 3
[tester::#HT8] [test-3] Writing contents to ./test.lox:
[tester::#HT8] [test-3] [test.lox] 90 == 36
[tester::#HT8] [test-3] $ ./your_program.sh parse test.lox
[your_program] (== 90.0 36.0)
[tester::#HT8] [test-3] ✓ 1 line(s) match on stdout
[tester::#HT8] [test-3] ✓ Received exit code 0.
[tester::#HT8] [test-4] Running test case: 4
[tester::#HT8] [test-4] Writing contents to ./test.lox:
[tester::#HT8] [test-4] [test.lox] (97 != 29) == ((-60 + 32) >= (75 * 40))
[tester::#HT8] [test-4] $ ./your_program.sh parse test.lox
[your_program] (== (group (!= 97.0 29.0)) (group (>= (group (+ (- 60.0) 32.0)) (group (* 75.0 40.0)))))
[tester::#HT8] [test-4] ✓ 1 line(s) match on stdout
[tester::#HT8] [test-4] ✓ Received exit code 0.
[tester::#HT8] Test passed.

[tester::#WZ8] Running tests for Stage #WZ8 (Parsing Expressions - Syntactic errors)
[tester::#WZ8] [test-1] Running test case: 1
[tester::#WZ8] [test-1] Writing contents to ./test.lox:
[tester::#WZ8] [test-1] [test.lox] "baz
[tester::#WZ8] [test-1] $ ./your_program.sh parse test.lox
[your_program] [line 1] Error: Unterminated string.
[tester::#WZ8] [test-1] ✓ 1 line(s) match on stdout
[tester::#WZ8] [test-1] ✓ Received exit code 65.
[tester::#WZ8] [test-2] Running test case: 2
[tester::#WZ8] [test-2] Writing contents to ./test.lox:
[tester::#WZ8] [test-2] [test.lox] (foo
[tester::#WZ8] [test-2] $ ./your_program.sh parse test.lox
[your_program] unclosed group expression
[tester::#WZ8] [test-2] ✓ 1 line(s) match on stdout
[tester::#WZ8] [test-2] ✓ Received exit code 65.
[tester::#WZ8] [test-3] Running test case: 3
[tester::#WZ8] [test-3] Writing contents to ./test.lox:
[tester::#WZ8] [test-3] [test.lox] (90 +)
[tester::#WZ8] [test-3] $ ./your_program.sh parse test.lox
[your_program] unexpected token RIGHT_PAREN
[tester::#WZ8] [test-3] ✓ 1 line(s) match on stdout
[tester::#WZ8] [test-3] ✓ Received exit code 65.
[tester::#WZ8] [test-4] Running test case: 4
[tester::#WZ8] [test-4] Writing contents to ./test.lox:
[tester::#WZ8] [test-4] [test.lox] +
[tester::#WZ8] [test-4] $ ./your_program.sh parse test.lox
[your_program] unexpected token PLUS
[tester::#WZ8] [test-4] ✓ 1 line(s) match on stdout
[tester::#WZ8] [test-4] ✓ Received exit code 65.
[tester::#WZ8] Test passed.

[tester::#IZ6] Running tests for Stage #IZ6 (Evaluating Expressions - Literals: Booleans & Nil)
[tester::#IZ6] [test-1] Running test case: 1
[tester::#IZ6] [test-1] Writing contents to ./test.lox:
[tester::#IZ6] [test-1] [test.lox] true
[tester::#IZ6] [test-1] $ ./your_program.sh evaluate test.lox
[your_program] true
[tester::#IZ6] [test-1] ✓ 1 line(s) match on stdout
[tester::#IZ6] [test-1] ✓ Received exit code 0.
[tester::#IZ6] [test-2] Running test case: 2
[tester::#IZ6] [test-2] Writing contents to ./test.lox:
[tester::#IZ6] [test-2] [test.lox] false
[tester::#IZ6] [test-2] $ ./your_program.sh evaluate test.lox
[your_program] false
[tester::#IZ6] [test-2] ✓ 1 line(s) match on stdout
[tester::#IZ6] [test-2] ✓ Received exit code 0.
[tester::#IZ6] [test-3] Running test case: 3
[tester::#IZ6] [test-3] Writing contents to ./test.lox:
[tester::#IZ6] [test-3] [test.lox] nil
[tester::#IZ6] [test-3] $ ./your_program.sh evaluate test.lox
[your_program] nil
[tester::#IZ6] [test-3] ✓ 1 line(s) match on stdout
[tester::#IZ6] [test-3] ✓ Received exit code 0.
[tester::#IZ6] Test passed.

[tester::#LV1] Running tests for Stage #LV1 (Evaluating Expressions - Literals: Strings & Numbers)
[tester::#LV1] [test-1] Running test case: 1
[tester::#LV1] [test-1] Writing contents to ./test.lox:
[tester::#LV1] [test-1] [test.lox] 51
[tester::#LV1] [test-1] $ ./your_program.sh evaluate test.lox
[your_program] 51
[tester::#LV1] [test-1] ✓ 1 line(s) match on stdout
[tester::#LV1] [test-1] ✓ Received exit code 0.
[tester::#LV1] [test-2] Running test case: 2
[tester::#LV1] [test-2] Writing contents to ./test.lox:
[tester::#LV1] [test-2] [test.lox] 97.46
[tester::#LV1] [test-2] $ ./your_program.sh evaluate test.lox
[your_program] 97.46
[tester::#LV1] [test-2] ✓ 1 line(s) match on stdout
[tester::#LV1] [test-2] ✓ Received exit code 0.
[tester::#LV1] [test-3] Running test case: 3
[tester::#LV1] [test-3] Writing contents to ./test.lox:
[tester::#LV1] [test-3] [test.lox] "baz bar"
[tester::#LV1] [test-3] $ ./your_program.sh evaluate test.lox
[your_program] baz bar
[tester::#LV1] [test-3] ✓ 1 line(s) match on stdout
[tester::#LV1] [test-3] ✓ Received exit code 0.
[tester::#LV1] [test-4] Running test case: 4
[tester::#LV1] [test-4] Writing contents to ./test.lox:
[tester::#LV1] [test-4] [test.lox] "56"
[tester::#LV1] [test-4] $ ./your_program.sh evaluate test.lox
[your_program] 56
[tester::#LV1] [test-4] ✓ 1 line(s) match on stdout
[tester::#LV1] [test-4] ✓ Received exit code 0.
[tester::#LV1] Test passed.

[tester::#OQ9] Running tests for Stage #OQ9 (Evaluating Expressions - Parentheses)
[tester::#OQ9] [test-1] Running test case: 1
[tester::#OQ9] [test-1] Writing contents to ./test.lox:
[tester::#OQ9] [test-1] [test.lox] (true)
[tester::#OQ9] [test-1] $ ./your_program.sh evaluate test.lox
[your_program] true
[tester::#OQ9] [test-1] ✓ 1 line(s) match on stdout
[tester::#OQ9] [test-1] ✓ Received exit code 0.
[tester::#OQ9] [test-2] Running test case: 2
[tester::#OQ9] [test-2] Writing contents to ./test.lox:
[tester::#OQ9] [test-2] [test.lox] (22)
[tester::#OQ9] [test-2] $ ./your_program.sh evaluate test.lox
[your_program] 22
[tester::#OQ9] [test-2] ✓ 1 line(s) match on stdout
[tester::#OQ9] [test-2] ✓ Received exit code 0.
[tester::#OQ9] [test-3] Running test case: 3
[tester::#OQ9] [test-3] Writing contents to ./test.lox:
[tester::#OQ9] [test-3] [test.lox] ("baz foo")
[tester::#OQ9] [test-3] $ ./your_program.sh evaluate test.lox
[your_program] baz foo
[tester::#OQ9] [test-3] ✓ 1 line(s) match on stdout
[tester::#OQ9] [test-3] ✓ Received exit code 0.
[tester::#OQ9] [test-4] Running test case: 4
[tester::#OQ9] [test-4] Writing contents to ./test.lox:
[tester::#OQ9] [test-4] [test.lox] ((true))
[tester::#OQ9] [test-4] $ ./your_program.sh evaluate test.lox
[your_program] true
[tester::#OQ9] [test-4] ✓ 1 line(s) match on stdout
[tester::#OQ9] [test-4] ✓ Received exit code 0.
[tester::#OQ9] Test passed.

[tester::#DC1] Running tests for Stage #DC1 (Evaluating Expressions - Unary Operators: Negation & Not)
[tester::#DC1] [test-1] Running test case: 1
[tester::#DC1] [test-1] Writing contents to ./test.lox:
[tester::#DC1] [test-1] [test.lox] -63
[tester::#DC1] [test-1] $ ./your_program.sh evaluate test.lox
[your_program] -63
[tester::#DC1] [test-1] ✓ 1 line(s) match on stdout
[tester::#DC1] [test-1] ✓ Received exit code 0.
[tester::#DC1] [test-2] Running test case: 2
[tester::#DC1] [test-2] Writing contents to ./test.lox:
[tester::#DC1] [test-2] [test.lox] !false
[tester::#DC1] [test-2] $ ./your_program.sh evaluate test.lox
[your_program] true
[tester::#DC1] [test-2] ✓ 1 line(s) match on stdout
[tester::#DC1] [test-2] ✓ Received exit code 0.
[tester::#DC1] [test-3] Running test case: 3
[tester::#DC1] [test-3] Writing contents to ./test.lox:
[tester::#DC1] [test-3] [test.lox] !nil
[tester::#DC1] [test-3] $ ./your_program.sh evaluate test.lox
[your_program] true
[tester::#DC1] [test-3] ✓ 1 line(s) match on stdout
[tester::#DC1] [test-3] ✓ Received exit code 0.
[tester::#DC1] [test-4] Running test case: 4
[tester::#DC1] [test-4] Writing contents to ./test.lox:
[tester::#DC1] [test-4] [test.lox] (!!92)
[tester::#DC1] [test-4] $ ./your_program.sh evaluate test.lox
[your_program] true
[tester::#DC1] [test-4] ✓ 1 line(s) match on stdout
[tester::#DC1] [test-4] ✓ Received exit code 0.
[tester::#DC1] Test passed.

[tester::#BP3] Running tests for Stage #BP3 (Evaluating Expressions - Arithmetic Operators (1/2))
[tester::#BP3] [test-1] Running test case: 1
[tester::#BP3] [test-1] Writing contents to ./test.lox:
[tester::#BP3] [test-1] [test.lox] 34 * 46
[tester::#BP3] [test-1] $ ./your_program.sh evaluate test.lox
[your_program] 1564
[tester::#BP3] [test-1] ✓ 1 line(s) match on stdout
[tester::#BP3] [test-1] ✓ Received exit code 0.
[tester::#BP3] [test-2] Running test case: 2
[tester::#BP3] [test-2] Writing contents to ./test.lox:
[tester::#BP3] [test-2] [test.lox] 48 / 5
[tester::#BP3] [test-2] $ ./your_program.sh evaluate test.lox
[your_program] 9.6
[tester::#BP3] [test-2] ✓ 1 line(s) match on stdout
[tester::#BP3] [test-2] ✓ Received exit code 0.
[tester::#BP3] [test-3] Running test case: 3
[tester::#BP3] [test-3] Writing contents to ./test.lox:
[tester::#BP3] [test-3] [test.lox] 7 * 2 / 7 / 1
[tester::#BP3] [test-3] $ ./your_program.sh evaluate test.lox
[your_program] 2
[tester::#BP3] [test-3] ✓ 1 line(s) match on stdout
[tester::#BP3] [test-3] ✓ Received exit code 0.
[tester::#BP3] [test-4] Running test case: 4
[tester::#BP3] [test-4] Writing contents to ./test.lox:
[tester::#BP3] [test-4] [test.lox] (18 * 2 / (3 * 6))
[tester::#BP3] [test-4] $ ./your_program.sh evaluate test.lox
[your_program] 2
[tester::#BP3] [test-4] ✓ 1 line(s) match on stdout
[tester::#BP3] [test-4] ✓ Received exit code 0.
[tester::#BP3] Test passed.

[tester::#JY2] Running tests for Stage #JY2 (Evaluating Expressions - Arithmetic Operators (2/2))
[tester::#JY2] [test-1] Running test case: 1
[tester::#JY2] [test-1] Writing contents to ./test.lox:
[tester::#JY2] [test-1] [test.lox] 33 - 90
[tester::#JY2] [test-1] $ ./your_program.sh evaluate test.lox
[your_program] -57
[tester::#JY2] [test-1] ✓ 1 line(s) match on stdout
[tester::#JY2] [test-1] ✓ Received exit code 0.
[tester::#JY2] [test-2] Running test case: 2
[tester::#JY2] [test-2] Writing contents to ./test.lox:
[tester::#JY2] [test-2] [test.lox] 31 + 55 - 76
[tester::#JY2] [test-2] $ ./your_program.sh evaluate test.lox
[your_program] 10
[tester::#JY2] [test-2] ✓ 1 line(s) match on stdout
[tester::#JY2] [test-2] ✓ Received exit code 0.
[tester::#JY2] [test-3] Running test case: 3
[tester::#JY2] [test-3] Writing contents to ./test.lox:
[tester::#JY2] [test-3] [test.lox] 51 + 30 - (-(71 - 91))
[tester::#JY2] [test-3] $ ./your_program.sh evaluate test.lox
[your_program] 61
[tester::#JY2] [test-3] ✓ 1 line(s) match on stdout
[tester::#JY2] [test-3] ✓ Received exit code 0.
[tester::#JY2] [test-4] Running test case: 4
[tester::#JY2] [test-4] Writing contents to ./test.lox:
[tester::#JY2] [test-4] [test.lox] (-12 + 12) * (15 * 24) / (1 + 4)
[tester::#JY2] [test-4] $ ./your_program.sh evaluate test.lox
[your_program] 0
[tester::#JY2] [test-4] ✓ 1 line(s) match on stdout
[tester::#JY2] [test-4] ✓ Received exit code 0.
[tester::#JY2] Test passed.

[tester::#JX8] Running tests for Stage #JX8 (Evaluating Expressions - String Concatenation)
[tester::#JX8] [test-1] Running test case: 1
[tester::#JX8] [test-1] Writing contents to ./test.lox:
[tester::#JX8] [test-1] [test.lox] "bar" + "hello"
[tester::#JX8] [test-1] $ ./your_program.sh evaluate test.lox
[your_program] barhello
[tester::#JX8] [test-1] ✓ 1 line(s) match on stdout
[tester::#JX8] [test-1] ✓ Received exit code 0.
[tester::#JX8] [test-2] Running test case: 2
[tester::#JX8] [test-2] Writing contents to ./test.lox:
[tester::#JX8] [test-2] [test.lox] "foo" + "29"
[tester::#JX8] [test-2] $ ./your_program.sh evaluate test.lox
[your_program] foo29
[tester::#JX8] [test-2] ✓ 1 line(s) match on stdout
[tester::#JX8] [test-2] ✓ Received exit code 0.
[tester::#JX8] [test-3] Running test case: 3
[tester::#JX8] [test-3] Writing contents to ./test.lox:
[tester::#JX8] [test-3] [test.lox] "hello" + "bar" + "baz"
[tester::#JX8] [test-3] $ ./your_program.sh evaluate test.lox
[your_program] hellobarbaz
[tester::#JX8] [test-3] ✓ 1 line(s) match on stdout
[tester::#JX8] [test-3] ✓ Received exit code 0.
[tester::#JX8] [test-4] Running test case: 4
[tester::#JX8] [test-4] Writing contents to ./test.lox:
[tester::#JX8] [test-4] [test.lox] ("baz" + "hello") + ("foo" + "baz")
[tester::#JX8] [test-4] $ ./your_program.sh evaluate test.lox
[your_program] bazhellofoobaz
[tester::#JX8] [test-4] ✓ 1 line(s) match on stdout
[tester::#JX8] [test-4] ✓ Received exit code 0.
[tester::#JX8] Test passed.

[tester::#ET4] Running tests for Stage #ET4 (Evaluating Expressions - Relational Operators)
[tester::#ET4] [test-1] Running test case: 1
[tester::#ET4] [test-1] Writing contents to ./test.lox:
[tester::#ET4] [test-1] [test.lox] 50 > -137
[tester::#ET4] [test-1] $ ./your_program.sh evaluate test.lox
[your_program] true
[tester::#ET4] [test-1] ✓ 1 line(s) match on stdout
[tester::#ET4] [test-1] ✓ Received exit code 0.
[tester::#ET4] [test-2] Running test case: 2
[tester::#ET4] [test-2] Writing contents to ./test.lox:
[tester::#ET4] [test-2] [test.lox] 50 <= 199
[tester::#ET4] [test-2] $ ./your_program.sh evaluate test.lox
[your_program] true
[tester::#ET4] [test-2] ✓ 1 line(s) match on stdout
[tester::#ET4] [test-2] ✓ Received exit code 0.
[tester::#ET4] [test-3] Running test case: 3
[tester::#ET4] [test-3] Writing contents to ./test.lox:
[tester::#ET4] [test-3] [test.lox] 62 >= 62
[tester::#ET4] [test-3] $ ./your_program.sh evaluate test.lox
[your_program] true
[tester::#ET4] [test-3] ✓ 1 line(s) match on stdout
[tester::#ET4] [test-3] ✓ Received exit code 0.
[tester::#ET4] [test-4] Running test case: 4
[tester::#ET4] [test-4] Writing contents to ./test.lox:
[tester::#ET4] [test-4] [test.lox] (98 - 39) >= -(100 / 50 + 56)
[tester::#ET4] [test-4] $ ./your_program.sh evaluate test.lox
[your_program] true
[tester::#ET4] [test-4] ✓ 1 line(s) match on stdout
[tester::#ET4] [test-4] ✓ Received exit code 0.
[tester::#ET4] Test passed.

[tester::#HW7] Running tests for Stage #HW7 (Evaluating Expressions - Equality Operators)
[tester::#HW7] [test-1] Running test case: 1
[tester::#HW7] [test-1] Writing contents to ./test.lox:
[tester::#HW7] [test-1] [test.lox] "bar" != "hello"
[tester::#HW7] [test-1] $ ./your_program.sh evaluate test.lox
[your_program] true
[tester::#HW7] [test-1] ✓ 1 line(s) match on stdout
[tester::#HW7] [test-1] ✓ Received exit code 0.
[tester::#HW7] [test-2] Running test case: 2
[tester::#HW7] [test-2] Writing contents to ./test.lox:
[tester::#HW7] [test-2] [test.lox] "bar" == "bar"
[tester::#HW7] [test-2] $ ./your_program.sh evaluate test.lox
[your_program] true
[tester::#HW7] [test-2] ✓ 1 line(s) match on stdout
[tester::#HW7] [test-2] ✓ Received exit code 0.
[tester::#HW7] [test-3] Running test case: 3
[tester::#HW7] [test-3] Writing contents to ./test.lox:
[tester::#HW7] [test-3] [test.lox] 34 == "34"
[tester::#HW7] [test-3] $ ./your_program.sh evaluate test.lox
[your_program] false
[tester::#HW7] [test-3] ✓ 1 line(s) match on stdout
[tester::#HW7] [test-3] ✓ Received exit code 0.
[tester::#HW7] [test-4] Running test case: 4
[tester::#HW7] [test-4] Writing contents to ./test.lox:
[tester::#HW7] [test-4] [test.lox] 157 == (96 + 61)
[tester::#HW7] [test-4] $ ./your_program.sh evaluate test.lox
[your_program] true
[tester::#HW7] [test-4] ✓ 1 line(s) match on stdout
[tester::#HW7] [test-4] ✓ Received exit code 0.
[tester::#HW7] Test passed.

[tester::#GJ9] Running tests for Stage #GJ9 (Evaluating Expressions - Runtime Errors: Unary Operators)
[tester::#GJ9] [test-1] Running test case: 1
[tester::#GJ9] [test-1] Writing contents to ./test.lox:
[tester::#GJ9] [test-1] [test.lox] -"baz"
[tester::#GJ9] [test-1] $ ./your_program.sh evaluate test.lox
[tester::#GJ9] [test-1] ✓ 1 line(s) match on stdout
[tester::#GJ9] [test-1] ✓ Received exit code 70.
[tester::#GJ9] [test-2] Running test case: 2
[tester::#GJ9] [test-2] Writing contents to ./test.lox:
[tester::#GJ9] [test-2] [test.lox] -true
[tester::#GJ9] [test-2] $ ./your_program.sh evaluate test.lox
[tester::#GJ9] [test-2] ✓ 1 line(s) match on stdout
[tester::#GJ9] [test-2] ✓ Received exit code 70.
[tester::#GJ9] [test-3] Running test case: 3
[tester::#GJ9] [test-3] Writing contents to ./test.lox:
[tester::#GJ9] [test-3] [test.lox] -false
[tester::#GJ9] [test-3] $ ./your_program.sh evaluate test.lox
[tester::#GJ9] [test-3] ✓ 1 line(s) match on stdout
[tester::#GJ9] [test-3] ✓ Received exit code 70.
[tester::#GJ9] [test-4] Running test case: 4
[tester::#GJ9] [test-4] Writing contents to ./test.lox:
[tester::#GJ9] [test-4] [test.lox] -("world" + "baz")
[tester::#GJ9] [test-4] $ ./your_program.sh evaluate test.lox
[tester::#GJ9] [test-4] ✓ 1 line(s) match on stdout
[tester::#GJ9] [test-4] ✓ Received exit code 70.
[tester::#GJ9] Test passed.

[tester::#YU6] Running tests for Stage #YU6 (Evaluating Expressions - Runtime Errors: Binary Operators (1/2))
[tester::#YU6] [test-1] Running test case: 1
[tester::#YU6] [test-1] Writing contents to ./test.lox:
[tester::#YU6] [test-1] [test.lox] 91 * "baz"
[tester::#YU6] [test-1] $ ./your_program.sh evaluate test.lox
[tester::#YU6] [test-1] ✓ 1 line(s) match on stdout
[tester::#YU6] [test-1] ✓ Received exit code 70.
[tester::#YU6] [test-2] Running test case: 2
[tester::#YU6] [test-2] Writing contents to ./test.lox:
[tester::#YU6] [test-2] [test.lox] "baz" / 84
[tester::#YU6] [test-2] $ ./your_program.sh evaluate test.lox
[tester::#YU6] [test-2] ✓ 1 line(s) match on stdout
[tester::#YU6] [test-2] ✓ Received exit code 70.
[tester::#YU6] [test-3] Running test case: 3
[tester::#YU6] [test-3] Writing contents to ./test.lox:
[tester::#YU6] [test-3] [test.lox] true / true
[tester::#YU6] [test-3] $ ./your_program.sh evaluate test.lox
[tester::#YU6] [test-3] ✓ 1 line(s) match on stdout
[tester::#YU6] [test-3] ✓ Received exit code 70.
[tester::#YU6] [test-4] Running test case: 4
[tester::#YU6] [test-4] Writing contents to ./test.lox:
[tester::#YU6] [test-4] [test.lox] ("quz" + "quz") * ("bar" + "quz")
[tester::#YU6] [test-4] $ ./your_program.sh evaluate test.lox
[tester::#YU6] [test-4] ✓ 1 line(s) match on stdout
[tester::#YU6] [test-4] ✓ Received exit code 70.
[tester::#YU6] Test passed.

[tester::#CQ1] Running tests for Stage #CQ1 (Evaluating Expressions - Runtime Errors: Binary Operators (2/2))
[tester::#CQ1] [test-1] Running test case: 1
[tester::#CQ1] [test-1] Writing contents to ./test.lox:
[tester::#CQ1] [test-1] [test.lox] "foo" + false
[tester::#CQ1] [test-1] $ ./your_program.sh evaluate test.lox
[tester::#CQ1] [test-1] ✓ 1 line(s) match on stdout
[tester::#CQ1] [test-1] ✓ Received exit code 70.
[tester::#CQ1] [test-2] Running test case: 2
[tester::#CQ1] [test-2] Writing contents to ./test.lox:
[tester::#CQ1] [test-2] [test.lox] 99 + "foo" + 11
[tester::#CQ1] [test-2] $ ./your_program.sh evaluate test.lox
[tester::#CQ1] [test-2] ✓ 1 line(s) match on stdout
[tester::#CQ1] [test-2] ✓ Received exit code 70.
[tester::#CQ1] [test-3] Running test case: 3
[tester::#CQ1] [test-3] Writing contents to ./test.lox:
[tester::#CQ1] [test-3] [test.lox] 41 - false
[tester::#CQ1] [test-3] $ ./your_program.sh evaluate test.lox
[tester::#CQ1] [test-3] ✓ 1 line(s) match on stdout
[tester::#CQ1] [test-3] ✓ Received exit code 70.
[tester::#CQ1] [test-4] Running test case: 4
[tester::#CQ1] [test-4] Writing contents to ./test.lox:
[tester::#CQ1] [test-4] [test.lox] true - ("bar" + "foo")
[tester::#CQ1] [test-4] $ ./your_program.sh evaluate test.lox
[tester::#CQ1] [test-4] ✓ 1 line(s) match on stdout
[tester::#CQ1] [test-4] ✓ Received exit code 70.
[tester::#CQ1] Test passed.

[tester::#IB5] Running tests for Stage #IB5 (Evaluating Expressions - Runtime Errors: Relational Operators)
[tester::#IB5] [test-1] Running test case: 1
[tester::#IB5] [test-1] Writing contents to ./test.lox:
[tester::#IB5] [test-1] [test.lox] "bar" < false
[tester::#IB5] [test-1] $ ./your_program.sh evaluate test.lox
[tester::#IB5] [test-1] ✓ 1 line(s) match on stdout
[tester::#IB5] [test-1] ✓ Received exit code 70.
[tester::#IB5] [test-2] Running test case: 2
[tester::#IB5] [test-2] Writing contents to ./test.lox:
[tester::#IB5] [test-2] [test.lox] true <= (56 + 62)
[tester::#IB5] [test-2] $ ./your_program.sh evaluate test.lox
[tester::#IB5] [test-2] ✓ 1 line(s) match on stdout
[tester::#IB5] [test-2] ✓ Received exit code 70.
[tester::#IB5] [test-3] Running test case: 3
[tester::#IB5] [test-3] Writing contents to ./test.lox:
[tester::#IB5] [test-3] [test.lox] 58 > ("bar" + "world")
[tester::#IB5] [test-3] $ ./your_program.sh evaluate test.lox
[tester::#IB5] [test-3] ✓ 1 line(s) match on stdout
[tester::#IB5] [test-3] ✓ Received exit code 70.
[tester::#IB5] [test-4] Running test case: 4
[tester::#IB5] [test-4] Writing contents to ./test.lox:
[tester::#IB5] [test-4] [test.lox] true >= true
[tester::#IB5] [test-4] $ ./your_program.sh evaluate test.lox
[tester::#IB5] [test-4] ✓ 1 line(s) match on stdout
[tester::#IB5] [test-4] ✓ Received exit code 70.
[tester::#IB5] Test passed.

[tester::#XY1] Running tests for Stage #XY1 (Statements & State - Print: Generate output)
[tester::#XY1] [test-1] Running test case: 1
[tester::#XY1] [test-1] Writing contents to ./test.lox:
[tester::#XY1] [test-1] [test.lox] print false;
[tester::#XY1] [test-1] $ ./your_program.sh run test.lox
[your_program] false
[your_program] evaluating print false
[tester::#XY1] [test-1] ✓ 1 line(s) match on stdout
[tester::#XY1] [test-1] ✓ Received exit code 0.
[tester::#XY1] [test-2] Running test case: 2
[tester::#XY1] [test-2] Writing contents to ./test.lox:
[tester::#XY1] [test-2] [test.lox] print "foo" + "world" + "baz";
[tester::#XY1] [test-2] $ ./your_program.sh run test.lox
[your_program] fooworldbaz
[your_program] evaluating print (+ (+ foo world) baz)
[tester::#XY1] [test-2] ✓ 1 line(s) match on stdout
[tester::#XY1] [test-2] ✓ Received exit code 0.
[tester::#XY1] [test-3] Running test case: 3
[tester::#XY1] [test-3] Writing contents to ./test.lox:
[tester::#XY1] [test-3] [test.lox] print (48 * 2 + 57 * 2) / (2);
[tester::#XY1] [test-3] $ ./your_program.sh run test.lox
[your_program] 105
[your_program] evaluating print (/ (group (+ (* 48.0 2.0) (* 57.0 2.0))) (group 2.0))
[tester::#XY1] [test-3] ✓ 1 line(s) match on stdout
[tester::#XY1] [test-3] ✓ Received exit code 0.
[tester::#XY1] [test-4] Running test case: 4
[tester::#XY1] [test-4] Writing contents to ./test.lox:
[tester::#XY1] [test-4] [test.lox] print;
[tester::#XY1] [test-4] $ ./your_program.sh run test.lox
[tester::#XY1] [test-4] ✓ 1 line(s) match on stdout
[tester::#XY1] [test-4] ✓ Received exit code 65.
[tester::#XY1] Test passed.

[tester::#OE4] Running tests for Stage #OE4 (Statements & State - Print: Multiple statements)
[tester::#OE4] [test-1] Running test case: 1
[tester::#OE4] [test-1] Writing contents to ./test.lox:
[tester::#OE4] [test-1] [test.lox] print "quz" + "baz" + "foo";
[tester::#OE4] [test-1] [test.lox] print 21 - 42;
[tester::#OE4] [test-1] [test.lox] print "foo" == "hello";
[tester::#OE4] [test-1] $ ./your_program.sh run test.lox
[your_program] quzbazfoo
[your_program] -21
[your_program] false
[your_program] evaluating print (+ (+ quz baz) foo)
[your_program] evaluating print (- 21.0 42.0)
[your_program] evaluating print (== foo hello)
[tester::#OE4] [test-1] ✓ 3 line(s) match on stdout
[tester::#OE4] [test-1] ✓ Received exit code 0.
[tester::#OE4] [test-2] Running test case: 2
[tester::#OE4] [test-2] Writing contents to ./test.lox:
[tester::#OE4] [test-2] [test.lox] print "foo"; print true;
[tester::#OE4] [test-2] [test.lox] print true;
[tester::#OE4] [test-2] [test.lox] print "quz"; print 79;
[tester::#OE4] [test-2] $ ./your_program.sh run test.lox
[your_program] foo
[your_program] true
[your_program] true
[your_program] quz
[your_program] 79
[your_program] evaluating print foo
[your_program] evaluating print true
[your_program] evaluating print true
[your_program] evaluating print quz
[your_program] evaluating print 79.0
[tester::#OE4] [test-2] ✓ 5 line(s) match on stdout
[tester::#OE4] [test-2] ✓ Received exit code 0.
[tester::#OE4] [test-3] Running test case: 3
[tester::#OE4] [test-3] Writing contents to ./test.lox:
[tester::#OE4] [test-3] [test.lox] print 39;
[tester::#OE4] [test-3] [test.lox]     print 39 + 42;
[tester::#OE4] [test-3] [test.lox]         print 39 + 42 + 82;
[tester::#OE4] [test-3] $ ./your_program.sh run test.lox
[your_program] evaluating print 39.0
[your_program] evaluating print (+ 39.0 42.0)
[your_program] evaluating print (+ (+ 39.0 42.0) 82.0)
[your_program] 39
[your_program] 81
[your_program] 163
[tester::#OE4] [test-3] ✓ 3 line(s) match on stdout
[tester::#OE4] [test-3] ✓ Received exit code 0.
[tester::#OE4] [test-4] Running test case: 4
[tester::#OE4] [test-4] Writing contents to ./test.lox:
[tester::#OE4] [test-4] [test.lox] print false != false;
[tester::#OE4] [test-4] [test.lox] 
[tester::#OE4] [test-4] [test.lox] print "80
[tester::#OE4] [test-4] [test.lox] 40
[tester::#OE4] [test-4] [test.lox] 88
[tester::#OE4] [test-4] [test.lox] ";
[tester::#OE4] [test-4] [test.lox] 
[tester::#OE4] [test-4] [test.lox] print "There should be an empty line above this.";
[tester::#OE4] [test-4] [test.lox] 
[tester::#OE4] [test-4] [test.lox] print "(" + "" + ")";
[tester::#OE4] [test-4] [test.lox] 
[tester::#OE4] [test-4] [test.lox] print "non-ascii: ॐ";
[tester::#OE4] [test-4] [test.lox] 
[tester::#OE4] [test-4] $ ./your_program.sh run test.lox
[your_program] false
[your_program] 80
[your_program] 40
[your_program] 88
[your_program] 
[your_program] There should be an empty line above this.
[your_program] ()
[your_program] non-ascii: ॐ
[your_program] evaluating print (!= false false)
[your_program] evaluating print 80
[your_program] 40
[your_program] 88
[your_program] 
[your_program] evaluating print There should be an empty line above this.
[your_program] evaluating print (+ (+ ( ) ))
[your_program] evaluating print non-ascii: ॐ
[tester::#OE4] [test-4] ✓ 8 line(s) match on stdout
[tester::#OE4] [test-4] ✓ Received exit code 0.
[tester::#OE4] Test passed.

[tester::#FI3] Running tests for Stage #FI3 (Statements & State - Expression statements)
[tester::#FI3] [test-1] Running test case: 1
[tester::#FI3] [test-1] Writing contents to ./test.lox:
[tester::#FI3] [test-1] [test.lox] (83 + 90 - 62) > (60 - 83) * 2;
[tester::#FI3] [test-1] [test.lox] print !true;
[tester::#FI3] [test-1] [test.lox] "world" + "baz" + "hello" + "foo" == "worldbazhellofoo";
[tester::#FI3] [test-1] [test.lox] print !true;
[tester::#FI3] [test-1] $ ./your_program.sh run test.lox
[your_program] evaluating (> (group (- (+ 83.0 90.0) 62.0)) (* (group (- 60.0 83.0)) 2.0))
[your_program] evaluating print (! true)
[your_program] evaluating (== (+ (+ (+ world baz) hello) foo) worldbazhellofoo)
[your_program] evaluating print (! true)
[your_program] false
[your_program] false
[tester::#FI3] [test-1] ✓ 2 line(s) match on stdout
[tester::#FI3] [test-1] ✓ Received exit code 0.
[tester::#FI3] [test-2] Running test case: 2
[tester::#FI3] [test-2] Writing contents to ./test.lox:
[tester::#FI3] [test-2] [test.lox] 10 - 28 >= -58 * 2 / 58 + 91;
[tester::#FI3] [test-2] [test.lox] true == true;
[tester::#FI3] [test-2] [test.lox] ("world" == "bar") == ("foo" != "baz");
[tester::#FI3] [test-2] [test.lox] print true;
[tester::#FI3] [test-2] $ ./your_program.sh run test.lox
[your_program] true
[your_program] evaluating (>= (- 10.0 28.0) (+ (/ (* (- 58.0) 2.0) 58.0) 91.0))
[your_program] evaluating (== true true)
[your_program] evaluating (== (group (== world bar)) (group (!= foo baz)))
[your_program] evaluating print true
[tester::#FI3] [test-2] ✓ 1 line(s) match on stdout
[tester::#FI3] [test-2] ✓ Received exit code 0.
[tester::#FI3] [test-3] Running test case: 3
[tester::#FI3] [test-3] Writing contents to ./test.lox:
[tester::#FI3] [test-3] [test.lox] print "the expression below is invalid";
[tester::#FI3] [test-3] [test.lox] 53 + "bar";
[tester::#FI3] [test-3] [test.lox] print "this should not be printed";
[tester::#FI3] [test-3] $ ./your_program.sh run test.lox
[your_program] the expression below is invalid
[your_program] evaluating print the expression below is invalid
[your_program] evaluating (+ 53.0 bar)
[your_program] Cannot apply PLUS expression to 53.0 and bar
[tester::#FI3] [test-3] ✓ 1 line(s) match on stdout
[tester::#FI3] [test-3] ✓ Received exit code 70.
[tester::#FI3] [test-4] Running test case: 4
[tester::#FI3] [test-4] Writing contents to ./test.lox:
[tester::#FI3] [test-4] [test.lox] print "88" + "foo";
[tester::#FI3] [test-4] [test.lox] print true * (23 + 25);
[tester::#FI3] [test-4] $ ./your_program.sh run test.lox
[your_program] 88foo
[your_program] evaluating print (+ 88 foo)
[your_program] evaluating print (* true (group (+ 23.0 25.0)))
[your_program] Cannot apply STAR expression to true and 48.0
[tester::#FI3] [test-4] ✓ 1 line(s) match on stdout
[tester::#FI3] [test-4] ✓ Received exit code 70.
[tester::#FI3] Test passed.

[tester::#YG2] Running tests for Stage #YG2 (Statements & State - Variables: Declare variables)
[tester::#YG2] [test-1] Running test case: 1
[tester::#YG2] [test-1] Writing contents to ./test.lox:
[tester::#YG2] [test-1] [test.lox] var foo = 10;
[tester::#YG2] [test-1] [test.lox] print foo;
[tester::#YG2] [test-1] $ ./your_program.sh run test.lox
[your_program] 10
[your_program] evaluating var foo = 10.0
[your_program] evaluating print var foo
[tester::#YG2] [test-1] ✓ 1 line(s) match on stdout
[tester::#YG2] [test-1] ✓ Received exit code 0.
[tester::#YG2] [test-2] Running test case: 2
[tester::#YG2] [test-2] Writing contents to ./test.lox:
[tester::#YG2] [test-2] [test.lox] var quz = 63;
[tester::#YG2] [test-2] [test.lox] var foo = 63;
[tester::#YG2] [test-2] [test.lox] print quz + foo;
[tester::#YG2] [test-2] [test.lox] var world = 63;
[tester::#YG2] [test-2] [test.lox] print quz + foo + world;
[tester::#YG2] [test-2] $ ./your_program.sh run test.lox
[your_program] 126
[your_program] 189
[your_program] evaluating var quz = 63.0
[your_program] evaluating var foo = 63.0
[your_program] evaluating print (+ var quz var foo)
[your_program] evaluating var world = 63.0
[your_program] evaluating print (+ (+ var quz var foo) var world)
[tester::#YG2] [test-2] ✓ 2 line(s) match on stdout
[tester::#YG2] [test-2] ✓ Received exit code 0.
[tester::#YG2] [test-3] Running test case: 3
[tester::#YG2] [test-3] Writing contents to ./test.lox:
[tester::#YG2] [test-3] [test.lox] var baz = (8 * (82 + 82)) / 4 + 82;
[tester::#YG2] [test-3] [test.lox] print baz;
[tester::#YG2] [test-3] $ ./your_program.sh run test.lox
[your_program] 410
[your_program] evaluating var baz = (+ (/ (group (* 8.0 (group (+ 82.0 82.0)))) 4.0) 82.0)
[your_program] evaluating print var baz
[tester::#YG2] [test-3] ✓ 1 line(s) match on stdout
[tester::#YG2] [test-3] ✓ Received exit code 0.
[tester::#YG2] [test-4] Running test case: 4
[tester::#YG2] [test-4] Writing contents to ./test.lox:
[tester::#YG2] [test-4] [test.lox] var hello = 90;
[tester::#YG2] [test-4] [test.lox] var baz = hello;
[tester::#YG2] [test-4] [test.lox] print baz + hello;
[tester::#YG2] [test-4] $ ./your_program.sh run test.lox
[your_program] 180
[your_program] evaluating var hello = 90.0
[your_program] evaluating var baz = var hello
[your_program] evaluating print (+ var baz var hello)
[tester::#YG2] [test-4] ✓ 1 line(s) match on stdout
[tester::#YG2] [test-4] ✓ Received exit code 0.
[tester::#YG2] Test passed.

[tester::#SV7] Running tests for Stage #SV7 (Statements & State - Variables: Runtime Errors)
[tester::#SV7] [test-1] Running test case: 1
[tester::#SV7] [test-1] Writing contents to ./test.lox:
[tester::#SV7] [test-1] [test.lox] print 79;
[tester::#SV7] [test-1] [test.lox] print x;
[tester::#SV7] [test-1] $ ./your_program.sh run test.lox
[your_program] 79
[your_program] evaluating print 79.0
[your_program] evaluating print var x
[your_program] Variable x not found
[tester::#SV7] [test-1] ✓ 1 line(s) match on stdout
[tester::#SV7] [test-1] ✓ Received exit code 70.
[tester::#SV7] [test-2] Running test case: 2
[tester::#SV7] [test-2] Writing contents to ./test.lox:
[tester::#SV7] [test-2] [test.lox] var baz = 55;
[tester::#SV7] [test-2] [test.lox] print world;
[tester::#SV7] [test-2] $ ./your_program.sh run test.lox
[your_program] evaluating var baz = 55.0
[your_program] evaluating print var world
[your_program] Variable world not found
[tester::#SV7] [test-2] ✓ 1 line(s) match on stdout
[tester::#SV7] [test-2] ✓ Received exit code 70.
[tester::#SV7] [test-3] Running test case: 3
[tester::#SV7] [test-3] Writing contents to ./test.lox:
[tester::#SV7] [test-3] [test.lox] var foo = 89;
[tester::#SV7] [test-3] [test.lox] var result = (foo + hello) / quz;
[tester::#SV7] [test-3] [test.lox] print result;
[tester::#SV7] [test-3] $ ./your_program.sh run test.lox
[your_program] evaluating var foo = 89.0
[your_program] evaluating var result = (/ (group (+ var foo var hello)) var quz)
[your_program] Variable hello not found
[tester::#SV7] [test-3] ✓ 1 line(s) match on stdout
[tester::#SV7] [test-3] ✓ Received exit code 70.
[tester::#SV7] [test-4] Running test case: 4
[tester::#SV7] [test-4] Writing contents to ./test.lox:
[tester::#SV7] [test-4] [test.lox] var foo = 98;
[tester::#SV7] [test-4] [test.lox] var bar = 91;
[tester::#SV7] [test-4] [test.lox] var world = 96;
[tester::#SV7] [test-4] [test.lox] print foo + bar + world + baz; print 31;
[tester::#SV7] [test-4] $ ./your_program.sh run test.lox
[your_program] evaluating var foo = 98.0
[your_program] evaluating var bar = 91.0
[your_program] evaluating var world = 96.0
[your_program] evaluating print (+ (+ (+ var foo var bar) var world) var baz)
[your_program] Variable baz not found
[tester::#SV7] [test-4] ✓ 1 line(s) match on stdout
[tester::#SV7] [test-4] ✓ Received exit code 70.
[tester::#SV7] Test passed.

[tester::#BC1] Running tests for Stage #BC1 (Statements & State - Variables: Initialize variables)
[tester::#BC1] [test-1] Running test case: 1
[tester::#BC1] [test-1] Writing contents to ./test.lox:
[tester::#BC1] [test-1] [test.lox] var hello;
[tester::#BC1] [test-1] [test.lox] print hello;
[tester::#BC1] [test-1] $ ./your_program.sh run test.lox
[your_program] evaluating var hello = noop
[your_program] evaluating print var hello
[your_program] nil
[tester::#BC1] [test-1] ✓ 1 line(s) match on stdout
[tester::#BC1] [test-1] ✓ Received exit code 0.
[tester::#BC1] [test-2] Running test case: 2
[tester::#BC1] [test-2] Writing contents to ./test.lox:
[tester::#BC1] [test-2] [test.lox] var hello = "quz";
[tester::#BC1] [test-2] [test.lox] var foo;
[tester::#BC1] [test-2] [test.lox] print foo;
[tester::#BC1] [test-2] $ ./your_program.sh run test.lox
[your_program] nil
[your_program] evaluating var hello = quz
[your_program] evaluating var foo = noop
[your_program] evaluating print var foo
[tester::#BC1] [test-2] ✓ 1 line(s) match on stdout
[tester::#BC1] [test-2] ✓ Received exit code 0.
[tester::#BC1] [test-3] Running test case: 3
[tester::#BC1] [test-3] Writing contents to ./test.lox:
[tester::#BC1] [test-3] [test.lox] var world = 78;
[tester::#BC1] [test-3] [test.lox] var quz;
[tester::#BC1] [test-3] [test.lox] var foo;
[tester::#BC1] [test-3] [test.lox] print quz;
[tester::#BC1] [test-3] $ ./your_program.sh run test.lox
[your_program] nil
[your_program] evaluating var world = 78.0
[your_program] evaluating var quz = noop
[your_program] evaluating var foo = noop
[your_program] evaluating print var quz
[tester::#BC1] [test-3] ✓ 1 line(s) match on stdout
[tester::#BC1] [test-3] ✓ Received exit code 0.
[tester::#BC1] [test-4] Running test case: 4
[tester::#BC1] [test-4] Writing contents to ./test.lox:
[tester::#BC1] [test-4] [test.lox] var bar = 41 + 66 * 63;
[tester::#BC1] [test-4] [test.lox] print bar;
[tester::#BC1] [test-4] [test.lox] var foo = 66 * 63;
[tester::#BC1] [test-4] [test.lox] print bar + foo;
[tester::#BC1] [test-4] [test.lox] var baz;
[tester::#BC1] [test-4] [test.lox] print baz;
[tester::#BC1] [test-4] $ ./your_program.sh run test.lox
[your_program] evaluating var bar = (+ 41.0 (* 66.0 63.0))
[your_program] evaluating print var bar
[your_program] 4199
[your_program] evaluating var foo = (* 66.0 63.0)
[your_program] 8357
[your_program] nil
[your_program] evaluating print (+ var bar var foo)
[your_program] evaluating var baz = noop
[your_program] evaluating print var baz
[tester::#BC1] [test-4] ✓ 3 line(s) match on stdout
[tester::#BC1] [test-4] ✓ Received exit code 0.
[tester::#BC1] Test passed.

[tester::#DW9] Running tests for Stage #DW9 (Statements & State - Variables: Redeclare variables)
[tester::#DW9] [test-1] Running test case: 1
[tester::#DW9] [test-1] Writing contents to ./test.lox:
[tester::#DW9] [test-1] [test.lox] var quz = "before";
[tester::#DW9] [test-1] [test.lox] print quz;
[tester::#DW9] [test-1] [test.lox] var quz = "after";
[tester::#DW9] [test-1] [test.lox] print quz;
[tester::#DW9] [test-1] $ ./your_program.sh run test.lox
[your_program] before
[your_program] after
[your_program] evaluating var quz = before
[your_program] evaluating print var quz
[your_program] evaluating var quz = after
[your_program] evaluating print var quz
[tester::#DW9] [test-1] ✓ 2 line(s) match on stdout
[tester::#DW9] [test-1] ✓ Received exit code 0.
[tester::#DW9] [test-2] Running test case: 2
[tester::#DW9] [test-2] Writing contents to ./test.lox:
[tester::#DW9] [test-2] [test.lox] var bar = "after";
[tester::#DW9] [test-2] [test.lox] var bar = "before";
[tester::#DW9] [test-2] [test.lox] var bar = bar;
[tester::#DW9] [test-2] [test.lox] print bar;
[tester::#DW9] [test-2] $ ./your_program.sh run test.lox
[your_program] before
[your_program] evaluating var bar = after
[your_program] evaluating var bar = before
[your_program] evaluating var bar = var bar
[your_program] evaluating print var bar
[tester::#DW9] [test-2] ✓ 1 line(s) match on stdout
[tester::#DW9] [test-2] ✓ Received exit code 0.
[tester::#DW9] [test-3] Running test case: 3
[tester::#DW9] [test-3] Writing contents to ./test.lox:
[tester::#DW9] [test-3] [test.lox] var baz = 2;
[tester::#DW9] [test-3] [test.lox] print baz;
[tester::#DW9] [test-3] [test.lox] var baz = 3;
[tester::#DW9] [test-3] [test.lox] print baz;
[tester::#DW9] [test-3] [test.lox] var world = 5;
[tester::#DW9] [test-3] [test.lox] print world;
[tester::#DW9] [test-3] [test.lox] var baz = world;
[tester::#DW9] [test-3] [test.lox] print baz;
[tester::#DW9] [test-3] [test.lox] 
[tester::#DW9] [test-3] $ ./your_program.sh run test.lox
[your_program] 2
[your_program] 3
[your_program] 5
[your_program] 5
[your_program] evaluating var baz = 2.0
[your_program] evaluating print var baz
[your_program] evaluating var baz = 3.0
[your_program] evaluating print var baz
[your_program] evaluating var world = 5.0
[your_program] evaluating print var world
[your_program] evaluating var baz = var world
[your_program] evaluating print var baz
[tester::#DW9] [test-3] ✓ 4 line(s) match on stdout
[tester::#DW9] [test-3] ✓ Received exit code 0.
[tester::#DW9] [test-4] Running test case: 4
[tester::#DW9] [test-4] Writing contents to ./test.lox:
[tester::#DW9] [test-4] [test.lox] var baz = foo;
[tester::#DW9] [test-4] [test.lox] 
[tester::#DW9] [test-4] $ ./your_program.sh run test.lox
[your_program] evaluating var baz = var foo
[your_program] Variable foo not found
[tester::#DW9] [test-4] ✓ 1 line(s) match on stdout
[tester::#DW9] [test-4] ✓ Received exit code 70.
[tester::#DW9] Test passed.

[tester::#PL3] Running tests for Stage #PL3 (Statements & State - Assignment operation)
[tester::#PL3] [test-1] Running test case: 1
[tester::#PL3] [test-1] Writing contents to ./test.lox:
[tester::#PL3] [test-1] [test.lox] var bar;
[tester::#PL3] [test-1] [test.lox] bar = 1;
[tester::#PL3] [test-1] [test.lox] print bar;
[tester::#PL3] [test-1] [test.lox] print bar = 2;
[tester::#PL3] [test-1] [test.lox] print bar;
[tester::#PL3] [test-1] $ ./your_program.sh run test.lox
[your_program] 1
[your_program] 2
[your_program] 2
[your_program] evaluating var bar = noop
[your_program] evaluating (= var bar 1.0)
[your_program] evaluating print var bar
[your_program] evaluating print (= var bar 2.0)
[your_program] evaluating print var bar
[tester::#PL3] [test-1] ✓ 3 line(s) match on stdout
[tester::#PL3] [test-1] ✓ Received exit code 0.
[tester::#PL3] [test-2] Running test case: 2
[tester::#PL3] [test-2] Writing contents to ./test.lox:
[tester::#PL3] [test-2] [test.lox] var baz = 17;
[tester::#PL3] [test-2] [test.lox] var bar = 17;
[tester::#PL3] [test-2] [test.lox] bar = baz;
[tester::#PL3] [test-2] [test.lox] baz = bar;
[tester::#PL3] [test-2] [test.lox] print baz + bar;
[tester::#PL3] [test-2] $ ./your_program.sh run test.lox
[your_program] evaluating var baz = 17.0
[your_program] evaluating var bar = 17.0
[your_program] evaluating (= var bar var baz)
[your_program] evaluating (= var baz var bar)
[your_program] evaluating print (+ var baz var bar)
[your_program] 34
[tester::#PL3] [test-2] ✓ 1 line(s) match on stdout
[tester::#PL3] [test-2] ✓ Received exit code 0.
[tester::#PL3] [test-3] Running test case: 3
[tester::#PL3] [test-3] Writing contents to ./test.lox:
[tester::#PL3] [test-3] [test.lox] var quz;
[tester::#PL3] [test-3] [test.lox] var bar;
[tester::#PL3] [test-3] [test.lox] 
[tester::#PL3] [test-3] [test.lox] quz = bar = 73 + 80 * 51;
[tester::#PL3] [test-3] [test.lox] print quz;
[tester::#PL3] [test-3] [test.lox] print bar;
[tester::#PL3] [test-3] $ ./your_program.sh run test.lox
[your_program] evaluating var quz = noop
[your_program] evaluating var bar = noop
[your_program] evaluating (= var quz (= var bar (+ 73.0 (* 80.0 51.0))))
[your_program] evaluating print var quz
[your_program] evaluating print var bar
[your_program] 4153
[your_program] 4153
[tester::#PL3] [test-3] ✓ 2 line(s) match on stdout
[tester::#PL3] [test-3] ✓ Received exit code 0.
[tester::#PL3] [test-4] Running test case: 4
[tester::#PL3] [test-4] Writing contents to ./test.lox:
[tester::#PL3] [test-4] [test.lox] var quz = 39;
[tester::#PL3] [test-4] [test.lox] var baz;
[tester::#PL3] [test-4] [test.lox] var foo;
[tester::#PL3] [test-4] [test.lox] 
[tester::#PL3] [test-4] [test.lox] quz = baz = foo = quz * 2;
[tester::#PL3] [test-4] [test.lox] print quz;
[tester::#PL3] [test-4] [test.lox] print baz;
[tester::#PL3] [test-4] [test.lox] print baz;
[tester::#PL3] [test-4] $ ./your_program.sh run test.lox
[your_program] 78
[your_program] 78
[your_program] 78
[your_program] evaluating var quz = 39.0
[your_program] evaluating var baz = noop
[your_program] evaluating var foo = noop
[your_program] evaluating (= var quz (= var baz (= var foo (* var quz 2.0))))
[your_program] evaluating print var quz
[your_program] evaluating print var baz
[your_program] evaluating print var baz
[tester::#PL3] [test-4] ✓ 3 line(s) match on stdout
[tester::#PL3] [test-4] ✓ Received exit code 0.
[tester::#PL3] Test passed.

[tester::#VR5] Running tests for Stage #VR5 (Statements & State - Block syntax)
[tester::#VR5] [test-1] Running test case: 1
[tester::#VR5] [test-1] Writing contents to ./test.lox:
[tester::#VR5] [test-1] [test.lox] {
[tester::#VR5] [test-1] [test.lox]     var bar = "quz";
[tester::#VR5] [test-1] [test.lox]     print bar;
[tester::#VR5] [test-1] [test.lox] }
[tester::#VR5] [test-1] $ ./your_program.sh run test.lox
[your_program] quz
[your_program] evaluating (block var bar = quz, print var bar)
[tester::#VR5] [test-1] ✓ 1 line(s) match on stdout
[tester::#VR5] [test-1] ✓ Received exit code 0.
[tester::#VR5] [test-2] Running test case: 2
[tester::#VR5] [test-2] Writing contents to ./test.lox:
[tester::#VR5] [test-2] [test.lox] {
[tester::#VR5] [test-2] [test.lox]     var foo = "before";
[tester::#VR5] [test-2] [test.lox]     print foo;
[tester::#VR5] [test-2] [test.lox] }
[tester::#VR5] [test-2] [test.lox] {
[tester::#VR5] [test-2] [test.lox]     var foo = "after";
[tester::#VR5] [test-2] [test.lox]     print foo;
[tester::#VR5] [test-2] [test.lox] }
[tester::#VR5] [test-2] [test.lox] 
[tester::#VR5] [test-2] $ ./your_program.sh run test.lox
[your_program] before
[your_program] after
[your_program] evaluating (block var foo = before, print var foo)
[your_program] evaluating (block var foo = after, print var foo)
[tester::#VR5] [test-2] ✓ 2 line(s) match on stdout
[tester::#VR5] [test-2] ✓ Received exit code 0.
[tester::#VR5] [test-3] Running test case: 3
[tester::#VR5] [test-3] Writing contents to ./test.lox:
[tester::#VR5] [test-3] [test.lox] {
[tester::#VR5] [test-3] [test.lox]     var quz = 82;
[tester::#VR5] [test-3] [test.lox]     {
[tester::#VR5] [test-3] [test.lox]         var hello = 82;
[tester::#VR5] [test-3] [test.lox]         print hello;
[tester::#VR5] [test-3] [test.lox]     }
[tester::#VR5] [test-3] [test.lox]     print quz;
[tester::#VR5] [test-3] [test.lox] }
[tester::#VR5] [test-3] $ ./your_program.sh run test.lox
[your_program] 82
[your_program] 82
[your_program] evaluating (block var quz = 82.0, (block var hello = 82.0, print var hello), print var quz)
[tester::#VR5] [test-3] ✓ 2 line(s) match on stdout
[tester::#VR5] [test-3] ✓ Received exit code 0.
[tester::#VR5] [test-4] Running test case: 4
[tester::#VR5] [test-4] Writing contents to ./test.lox:
[tester::#VR5] [test-4] [test.lox] {
[tester::#VR5] [test-4] [test.lox]     var bar = 65;
[tester::#VR5] [test-4] [test.lox]     var foo = 65;
[tester::#VR5] [test-4] [test.lox]     {
[tester::#VR5] [test-4] [test.lox]         print bar + foo;
[tester::#VR5] [test-4] [test.lox] }
[tester::#VR5] [test-4] $ ./your_program.sh run test.lox
[your_program] unclosed block expression
[tester::#VR5] [test-4] ✓ 1 line(s) match on stdout
[tester::#VR5] [test-4] ✓ Received exit code 65.
[tester::#VR5] Test passed.

[tester::#FB4] Running tests for Stage #FB4 (Statements & State - Scopes)
[tester::#FB4] [test-1] Running test case: 1
[tester::#FB4] [test-1] Writing contents to ./test.lox:
[tester::#FB4] [test-1] [test.lox] var baz = (22 * 34) - 14;
[tester::#FB4] [test-1] [test.lox] {
[tester::#FB4] [test-1] [test.lox]     var world = "foo" + "19";
[tester::#FB4] [test-1] [test.lox]     print world;
[tester::#FB4] [test-1] [test.lox] }
[tester::#FB4] [test-1] [test.lox] print baz;
[tester::#FB4] [test-1] $ ./your_program.sh run test.lox
[your_program] foo19
[your_program] 734
[your_program] evaluating var baz = (- (group (* 22.0 34.0)) 14.0)
[your_program] evaluating (block var world = (+ foo 19), print var world)
[your_program] evaluating print var baz
[tester::#FB4] [test-1] ✓ 2 line(s) match on stdout
[tester::#FB4] [test-1] ✓ Received exit code 0.
[tester::#FB4] [test-2] Running test case: 2
[tester::#FB4] [test-2] Writing contents to ./test.lox:
[tester::#FB4] [test-2] [test.lox] {
[tester::#FB4] [test-2] [test.lox]     var quz = "before";
[tester::#FB4] [test-2] [test.lox]     {
[tester::#FB4] [test-2] [test.lox]         var quz = "after";
[tester::#FB4] [test-2] [test.lox]         print quz;
[tester::#FB4] [test-2] [test.lox]     }
[tester::#FB4] [test-2] [test.lox]     print quz;
[tester::#FB4] [test-2] [test.lox] }
[tester::#FB4] [test-2] $ ./your_program.sh run test.lox
[your_program] after
[your_program] before
[your_program] evaluating (block var quz = before, (block var quz = after, print var quz), print var quz)
[tester::#FB4] [test-2] ✓ 2 line(s) match on stdout
[tester::#FB4] [test-2] ✓ Received exit code 0.
[tester::#FB4] [test-3] Running test case: 3
[tester::#FB4] [test-3] Writing contents to ./test.lox:
[tester::#FB4] [test-3] [test.lox] var world = "global world";
[tester::#FB4] [test-3] [test.lox] var foo = "global foo";
[tester::#FB4] [test-3] [test.lox] var baz = "global baz";
[tester::#FB4] [test-3] [test.lox] {
[tester::#FB4] [test-3] [test.lox]   var world = "outer world";
[tester::#FB4] [test-3] [test.lox]   var foo = "outer foo";
[tester::#FB4] [test-3] [test.lox]   {
[tester::#FB4] [test-3] [test.lox]     var world = "inner world";
[tester::#FB4] [test-3] [test.lox]     print world;
[tester::#FB4] [test-3] [test.lox]     print foo;
[tester::#FB4] [test-3] [test.lox]     print baz;
[tester::#FB4] [test-3] [test.lox]   }
[tester::#FB4] [test-3] [test.lox]   print world;
[tester::#FB4] [test-3] [test.lox]   print foo;
[tester::#FB4] [test-3] [test.lox]   print baz;
[tester::#FB4] [test-3] [test.lox] }
[tester::#FB4] [test-3] [test.lox] print world;
[tester::#FB4] [test-3] [test.lox] print foo;
[tester::#FB4] [test-3] [test.lox] print baz;
[tester::#FB4] [test-3] [test.lox] 
[tester::#FB4] [test-3] $ ./your_program.sh run test.lox
[your_program] inner world
[your_program] outer foo
[your_program] global baz
[your_program] outer world
[your_program] outer foo
[your_program] global baz
[your_program] global world
[your_program] global foo
[your_program] global baz
[your_program] evaluating var world = global world
[your_program] evaluating var foo = global foo
[your_program] evaluating var baz = global baz
[your_program] evaluating (block var world = outer world, var foo = outer foo, (block var world = inner world, print var world, print var foo, print var baz), print var world, print var foo, print var baz)
[your_program] evaluating print var world
[your_program] evaluating print var foo
[your_program] evaluating print var baz
[tester::#FB4] [test-3] ✓ 9 line(s) match on stdout
[tester::#FB4] [test-3] ✓ Received exit code 0.
[tester::#FB4] [test-4] Running test case: 4
[tester::#FB4] [test-4] Writing contents to ./test.lox:
[tester::#FB4] [test-4] [test.lox] {
[tester::#FB4] [test-4] [test.lox]   var baz = "outer baz";
[tester::#FB4] [test-4] [test.lox]   var hello = "outer hello";
[tester::#FB4] [test-4] [test.lox]   {
[tester::#FB4] [test-4] [test.lox]     baz = "modified baz";
[tester::#FB4] [test-4] [test.lox]     var hello = "inner hello";
[tester::#FB4] [test-4] [test.lox]     print baz;
[tester::#FB4] [test-4] [test.lox]     print hello;
[tester::#FB4] [test-4] [test.lox]   }
[tester::#FB4] [test-4] [test.lox]   print baz;
[tester::#FB4] [test-4] [test.lox]   print hello;
[tester::#FB4] [test-4] [test.lox] }
[tester::#FB4] [test-4] [test.lox] print hello;
[tester::#FB4] [test-4] [test.lox] 
[tester::#FB4] [test-4] $ ./your_program.sh run test.lox
[your_program] modified baz
[your_program] inner hello
[your_program] modified baz
[your_program] evaluating (block var baz = outer baz, var hello = outer hello, (block (= var baz modified baz), var hello = inner hello, print var baz, print var hello), print var baz, print var hello)
[your_program] evaluating print var hello
[your_program] Variable hello not found
[your_program] outer hello
[tester::#FB4] [test-4] ✓ 4 line(s) match on stdout
[tester::#FB4] [test-4] ✓ Received exit code 70.
[tester::#FB4] Test passed.

[tester::#NE3] Running tests for Stage #NE3 (Control Flow - If statements)
[tester::#NE3] [test-1] Running test case: 1
[tester::#NE3] [test-1] Writing contents to ./test.lox:
[tester::#NE3] [test-1] [test.lox] if (true) print "world";
[tester::#NE3] [test-1] $ ./your_program.sh run test.lox
[your_program] world
[your_program] evaluating (if (true) print world)
[tester::#NE3] [test-1] ✓ 1 line(s) match on stdout
[tester::#NE3] [test-1] ✓ Received exit code 0.
[tester::#NE3] [test-2] Running test case: 2
[tester::#NE3] [test-2] Writing contents to ./test.lox:
[tester::#NE3] [test-2] [test.lox] if (false) {
[tester::#NE3] [test-2] [test.lox]   print "block body";
[tester::#NE3] [test-2] [test.lox] }
[tester::#NE3] [test-2] $ ./your_program.sh run test.lox
[your_program] evaluating (if (false) (block print block body))
[tester::#NE3] [test-2] ✓ 1 line(s) match on stdout
[tester::#NE3] [test-2] ✓ Received exit code 0.
[tester::#NE3] [test-3] Running test case: 3
[tester::#NE3] [test-3] Writing contents to ./test.lox:
[tester::#NE3] [test-3] [test.lox] var a = false;
[tester::#NE3] [test-3] [test.lox] if (a = true) {
[tester::#NE3] [test-3] [test.lox]   print (a == false);
[tester::#NE3] [test-3] [test.lox] }
[tester::#NE3] [test-3] $ ./your_program.sh run test.lox
[your_program] false
[your_program] evaluating var a = false
[your_program] evaluating (if ((= var a true)) (block print (group (== var a false))))
[tester::#NE3] [test-3] ✓ 1 line(s) match on stdout
[tester::#NE3] [test-3] ✓ Received exit code 0.
[tester::#NE3] [test-4] Running test case: 4
[tester::#NE3] [test-4] Writing contents to ./test.lox:
[tester::#NE3] [test-4] [test.lox] var stage = "unknown";
[tester::#NE3] [test-4] [test.lox] var age = 27;
[tester::#NE3] [test-4] [test.lox] if (age < 18) { stage = "child"; }
[tester::#NE3] [test-4] [test.lox] if (age >= 18) { stage = "adult"; }
[tester::#NE3] [test-4] [test.lox] print stage;
[tester::#NE3] [test-4] [test.lox] 
[tester::#NE3] [test-4] [test.lox] var isAdult = age >= 18;
[tester::#NE3] [test-4] [test.lox] if (isAdult) { print "eligible for voting: true"; }
[tester::#NE3] [test-4] [test.lox] if (!isAdult) { print "eligible for voting: false"; }
[tester::#NE3] [test-4] $ ./your_program.sh run test.lox
[your_program] adult
[your_program] eligible for voting: true
[your_program] evaluating var stage = unknown
[your_program] evaluating var age = 27.0
[your_program] evaluating (if ((< var age 18.0)) (block (= var stage child)))
[your_program] evaluating (if ((>= var age 18.0)) (block (= var stage adult)))
[your_program] evaluating print var stage
[your_program] evaluating var isAdult = (>= var age 18.0)
[your_program] evaluating (if (var isAdult) (block print eligible for voting: true))
[your_program] evaluating (if ((! var isAdult)) (block print eligible for voting: false))
[tester::#NE3] [test-4] ✓ 2 line(s) match on stdout
[tester::#NE3] [test-4] ✓ Received exit code 0.
[tester::#NE3] Test passed.

[tester::#ST5] Running tests for Stage #ST5 (Control Flow - Else statements)
[tester::#ST5] [test-1] Running test case: 1
[tester::#ST5] [test-1] Writing contents to ./test.lox:
[tester::#ST5] [test-1] [test.lox] if (false) print "if branch"; else print "else branch";
[tester::#ST5] [test-1] $ ./your_program.sh run test.lox
[your_program] else branch
[your_program] evaluating (if (false) print if branch)
[tester::#ST5] [test-1] ✓ 1 line(s) match on stdout
[tester::#ST5] [test-1] ✓ Received exit code 0.
[tester::#ST5] [test-2] Running test case: 2
[tester::#ST5] [test-2] Writing contents to ./test.lox:
[tester::#ST5] [test-2] [test.lox] var age = 21;
[tester::#ST5] [test-2] [test.lox] if (age > 18) print "adult"; else print "child";
[tester::#ST5] [test-2] $ ./your_program.sh run test.lox
[your_program] adult
[your_program] evaluating var age = 21.0
[your_program] evaluating (if ((> var age 18.0)) print adult)
[tester::#ST5] [test-2] ✓ 1 line(s) match on stdout
[tester::#ST5] [test-2] ✓ Received exit code 0.
[tester::#ST5] [test-3] Running test case: 3
[tester::#ST5] [test-3] Writing contents to ./test.lox:
[tester::#ST5] [test-3] [test.lox] if (false) {
[tester::#ST5] [test-3] [test.lox]   print "if block";
[tester::#ST5] [test-3] [test.lox] } else print "else statement";
[tester::#ST5] [test-3] [test.lox] 
[tester::#ST5] [test-3] [test.lox] if (false) print "if statement"; else {
[tester::#ST5] [test-3] [test.lox]   print "else block";
[tester::#ST5] [test-3] [test.lox] }
[tester::#ST5] [test-3] $ ./your_program.sh run test.lox
[your_program] evaluating (if (false) (block print if block))
[your_program] evaluating (if (false) print if statement)
[your_program] else statement
[your_program] else block
[tester::#ST5] [test-3] ✓ 2 line(s) match on stdout
[tester::#ST5] [test-3] ✓ Received exit code 0.
[tester::#ST5] [test-4] Running test case: 4
[tester::#ST5] [test-4] Writing contents to ./test.lox:
[tester::#ST5] [test-4] [test.lox] var celsius = 61;
[tester::#ST5] [test-4] [test.lox] var fahrenheit = 0;
[tester::#ST5] [test-4] [test.lox] var isHot = false;
[tester::#ST5] [test-4] [test.lox] 
[tester::#ST5] [test-4] [test.lox] {
[tester::#ST5] [test-4] [test.lox]   fahrenheit = celsius * 9 / 5 + 32;
[tester::#ST5] [test-4] [test.lox]   print celsius; print fahrenheit;
[tester::#ST5] [test-4] [test.lox] 
[tester::#ST5] [test-4] [test.lox]   if (celsius > 30) {
[tester::#ST5] [test-4] [test.lox]     isHot = true;
[tester::#ST5] [test-4] [test.lox]     print "It's a hot day. Stay hydrated!";
[tester::#ST5] [test-4] [test.lox]   } else {
[tester::#ST5] [test-4] [test.lox]     print "It's cold today. Wear a jacket!";
[tester::#ST5] [test-4] [test.lox]   }
[tester::#ST5] [test-4] [test.lox] 
[tester::#ST5] [test-4] [test.lox]   if (isHot) { print "Remember to use sunscreen!"; }
[tester::#ST5] [test-4] [test.lox] }
[tester::#ST5] [test-4] $ ./your_program.sh run test.lox
[your_program] 61
[your_program] 141.8
[your_program] It's a hot day. Stay hydrated!
[your_program] Remember to use sunscreen!
[your_program] evaluating var celsius = 61.0
[your_program] evaluating var fahrenheit = 0.0
[your_program] evaluating var isHot = false
[your_program] evaluating (block (= var fahrenheit (+ (/ (* var celsius 9.0) 5.0) 32.0)), print var celsius, print var fahrenheit, (if ((> var celsius 30.0)) (block (= var isHot true), print It's a hot day. Stay hydrated!)), (if (var isHot) (block print Remember to use sunscreen!)))
[tester::#ST5] [test-4] ✓ 4 line(s) match on stdout
[tester::#ST5] [test-4] ✓ Received exit code 0.
[tester::#ST5] Test passed.

[tester::#FH8] Running tests for Stage #FH8 (Control Flow - Else-if statements)
[tester::#FH8] [test-1] Running test case: 1
[tester::#FH8] [test-1] Writing contents to ./test.lox:
[tester::#FH8] [test-1] [test.lox] if (false) print "if branch"; else if (false) print "else-if branch";
[tester::#FH8] [test-1] $ ./your_program.sh run test.lox
[your_program] evaluating (if (false) print if branch)
[tester::#FH8] [test-1] ✓ 1 line(s) match on stdout
[tester::#FH8] [test-1] ✓ Received exit code 0.
[tester::#FH8] [test-2] Running test case: 2
[tester::#FH8] [test-2] Writing contents to ./test.lox:
[tester::#FH8] [test-2] [test.lox] if (true) {
[tester::#FH8] [test-2] [test.lox]   print "quz";
[tester::#FH8] [test-2] [test.lox] } else if (true) print "quz";
[tester::#FH8] [test-2] [test.lox] 
[tester::#FH8] [test-2] [test.lox] if (true) print "quz"; else if (true) {
[tester::#FH8] [test-2] [test.lox]   print "quz";
[tester::#FH8] [test-2] [test.lox] }
[tester::#FH8] [test-2] [test.lox] 
[tester::#FH8] [test-2] $ ./your_program.sh run test.lox
[your_program] quz
[your_program] quz
[your_program] evaluating (if (true) (block print quz))
[your_program] evaluating (if (true) print quz)
[tester::#FH8] [test-2] ✓ 2 line(s) match on stdout
[tester::#FH8] [test-2] ✓ Received exit code 0.
[tester::#FH8] [test-3] Running test case: 3
[tester::#FH8] [test-3] Writing contents to ./test.lox:
[tester::#FH8] [test-3] [test.lox] var age = 97;
[tester::#FH8] [test-3] [test.lox] var stage = "unknown";
[tester::#FH8] [test-3] [test.lox] if (age < 18) { stage = "child"; }
[tester::#FH8] [test-3] [test.lox] else if (age >= 18) { stage = "adult"; }
[tester::#FH8] [test-3] [test.lox] else if (age >= 65) { stage = "senior"; }
[tester::#FH8] [test-3] [test.lox] else if (age >= 100) { stage = "centenarian"; }
[tester::#FH8] [test-3] [test.lox] print stage;
[tester::#FH8] [test-3] $ ./your_program.sh run test.lox
[your_program] adult
[your_program] evaluating var age = 97.0
[your_program] evaluating var stage = unknown
[your_program] evaluating (if ((< var age 18.0)) (block (= var stage child)))
[your_program] evaluating print var stage
[tester::#FH8] [test-3] ✓ 1 line(s) match on stdout
[tester::#FH8] [test-3] ✓ Received exit code 0.
[tester::#FH8] [test-4] Running test case: 4
[tester::#FH8] [test-4] Writing contents to ./test.lox:
[tester::#FH8] [test-4] [test.lox] var age = 97;
[tester::#FH8] [test-4] [test.lox] 
[tester::#FH8] [test-4] [test.lox] var isAdult = age >= 18;
[tester::#FH8] [test-4] [test.lox] if (isAdult) { print "eligible for voting: true"; }
[tester::#FH8] [test-4] [test.lox] else { print "eligible for voting: false"; }
[tester::#FH8] [test-4] [test.lox] 
[tester::#FH8] [test-4] [test.lox] if (age < 16) { print "eligible for driving: false"; }
[tester::#FH8] [test-4] [test.lox] else if (age < 18) { print "eligible for driving: learner's permit"; }
[tester::#FH8] [test-4] [test.lox] else { print "eligible for driving: full license"; }
[tester::#FH8] [test-4] [test.lox] 
[tester::#FH8] [test-4] [test.lox] if (age < 21) { print "eligible for drinking (US): false"; }
[tester::#FH8] [test-4] [test.lox] else { print "eligible for drinking (US): true"; }
[tester::#FH8] [test-4] $ ./your_program.sh run test.lox
[your_program] evaluating var age = 97.0
[your_program] evaluating var isAdult = (>= var age 18.0)
[your_program] evaluating (if (var isAdult) (block print eligible for voting: true))
[your_program] eligible for voting: true
[your_program] evaluating (if ((< var age 16.0)) (block print eligible for driving: false))
[your_program] eligible for driving: full license
[your_program] evaluating (if ((< var age 21.0)) (block print eligible for drinking (US): false))
[your_program] eligible for drinking (US): true
[tester::#FH8] [test-4] ✓ 3 line(s) match on stdout
[tester::#FH8] [test-4] ✓ Received exit code 0.
[tester::#FH8] Test passed.

[tester::#XJ4] Running tests for Stage #XJ4 (Control Flow - Nested if statements)
[tester::#XJ4] [test-1] Running test case: 1
[tester::#XJ4] [test-1] Writing contents to ./test.lox:
[tester::#XJ4] [test-1] [test.lox] if (true) if (true) print "nested true";
[tester::#XJ4] [test-1] [test.lox] 
[tester::#XJ4] [test-1] $ ./your_program.sh run test.lox
[your_program] nested true
[your_program] evaluating (if (true) (if (true) print nested true))
[tester::#XJ4] [test-1] ✓ 1 line(s) match on stdout
[tester::#XJ4] [test-1] ✓ Received exit code 0.
[tester::#XJ4] [test-2] Running test case: 2
[tester::#XJ4] [test-2] Writing contents to ./test.lox:
[tester::#XJ4] [test-2] [test.lox] if (true) {
[tester::#XJ4] [test-2] [test.lox]   if (false) print "hello"; else print "hello";
[tester::#XJ4] [test-2] [test.lox] }
[tester::#XJ4] [test-2] $ ./your_program.sh run test.lox
[your_program] evaluating (if (true) (block (if (false) print hello)))
[your_program] hello
[tester::#XJ4] [test-2] ✓ 1 line(s) match on stdout
[tester::#XJ4] [test-2] ✓ Received exit code 0.
[tester::#XJ4] [test-3] Running test case: 3
[tester::#XJ4] [test-3] Writing contents to ./test.lox:
[tester::#XJ4] [test-3] [test.lox] var stage = "unknown";
[tester::#XJ4] [test-3] [test.lox] var age = 35;
[tester::#XJ4] [test-3] [test.lox] if (age < 18) {
[tester::#XJ4] [test-3] [test.lox]     if (age < 13) { stage = "child"; }
[tester::#XJ4] [test-3] [test.lox]     else if (age < 16) { stage = "young teenager"; }
[tester::#XJ4] [test-3] [test.lox]     else { stage = "teenager"; }
[tester::#XJ4] [test-3] [test.lox] }
[tester::#XJ4] [test-3] [test.lox] else if (age < 65) {
[tester::#XJ4] [test-3] [test.lox]     if (age < 30) { stage = "young adult"; }
[tester::#XJ4] [test-3] [test.lox]     else if (age < 50) { stage = "adult"; }
[tester::#XJ4] [test-3] [test.lox]     else { stage = "middle-aged adult"; }
[tester::#XJ4] [test-3] [test.lox] }
[tester::#XJ4] [test-3] [test.lox] else { stage = "senior"; }
[tester::#XJ4] [test-3] [test.lox] print stage;
[tester::#XJ4] [test-3] [test.lox] 
[tester::#XJ4] [test-3] [test.lox] var isAdult = age >= 18;
[tester::#XJ4] [test-3] [test.lox] if (isAdult) {
[tester::#XJ4] [test-3] [test.lox]     print "eligible for voting: true";
[tester::#XJ4] [test-3] [test.lox]     if (age < 25) {
[tester::#XJ4] [test-3] [test.lox]         print "first-time voter: likely";
[tester::#XJ4] [test-3] [test.lox]     }
[tester::#XJ4] [test-3] [test.lox]     else { print "first-time voter: unlikely"; }
[tester::#XJ4] [test-3] [test.lox] }
[tester::#XJ4] [test-3] [test.lox] else { print "eligible for voting: false"; }
[tester::#XJ4] [test-3] [test.lox] 
[tester::#XJ4] [test-3] [test.lox] if (age < 16) { print "eligible for driving: false"; }
[tester::#XJ4] [test-3] [test.lox] else if (age < 18) {
[tester::#XJ4] [test-3] [test.lox]     print "eligible for driving: learner's permit";
[tester::#XJ4] [test-3] [test.lox]     if (age < 17) { print "supervised driving required"; }
[tester::#XJ4] [test-3] [test.lox]     else { print "unsupervised driving allowed with restrictions"; }
[tester::#XJ4] [test-3] [test.lox] }
[tester::#XJ4] [test-3] [test.lox] else { print "eligible for driving: full license"; }
[tester::#XJ4] [test-3] [test.lox] 
[tester::#XJ4] [test-3] [test.lox] if (age < 21) { print "eligible for drinking (US): false"; }
[tester::#XJ4] [test-3] [test.lox] else {
[tester::#XJ4] [test-3] [test.lox]     print "eligible for drinking (US): true";
[tester::#XJ4] [test-3] [test.lox]     if (age < 25) { print "remember: drink responsibly!"; }
[tester::#XJ4] [test-3] [test.lox] }
[tester::#XJ4] [test-3] $ ./your_program.sh run test.lox
[your_program] adult
[your_program] evaluating var stage = unknown
[your_program] evaluating var age = 35.0
[your_program] evaluating (if ((< var age 18.0)) (block (if ((< var age 13.0)) (block (= var stage child)))))
[your_program] eligible for voting: true
[your_program] evaluating print var stage
[your_program] evaluating var isAdult = (>= var age 18.0)
[your_program] first-time voter: unlikely
[your_program] eligible for driving: full license
[your_program] eligible for drinking (US): true
[your_program] evaluating (if (var isAdult) (block print eligible for voting: true, (if ((< var age 25.0)) (block print first-time voter: likely))))
[your_program] evaluating (if ((< var age 16.0)) (block print eligible for driving: false))
[your_program] evaluating (if ((< var age 21.0)) (block print eligible for drinking (US): false))
[tester::#XJ4] [test-3] ✓ 5 line(s) match on stdout
[tester::#XJ4] [test-3] ✓ Received exit code 0.
[tester::#XJ4] [test-4] Running test case: 4
[tester::#XJ4] [test-4] Writing contents to ./test.lox:
[tester::#XJ4] [test-4] [test.lox] if (true) if (false) print "world"; else print "hello";
[tester::#XJ4] [test-4] $ ./your_program.sh run test.lox
[your_program] hello
[your_program] evaluating (if (true) (if (false) print world))
[tester::#XJ4] [test-4] ✓ 1 line(s) match on stdout
[tester::#XJ4] [test-4] ✓ Received exit code 0.
[tester::#XJ4] Test passed.

[tester::#WK8] Running tests for Stage #WK8 (Control Flow - Logical OR operator)
[tester::#WK8] [test-1] Running test case: 1
[tester::#WK8] [test-1] Writing contents to ./test.lox:
[tester::#WK8] [test-1] [test.lox] if (false or "ok") print "foo";
[tester::#WK8] [test-1] [test.lox] if (nil or "ok") print "foo";
[tester::#WK8] [test-1] [test.lox] 
[tester::#WK8] [test-1] [test.lox] if (false or false) print "baz";
[tester::#WK8] [test-1] [test.lox] if (true or "baz") print "baz";
[tester::#WK8] [test-1] [test.lox] 
[tester::#WK8] [test-1] [test.lox] if (38 or "bar") print "bar";
[tester::#WK8] [test-1] [test.lox] if ("bar" or "bar") print "bar";
[tester::#WK8] [test-1] [test.lox] 
[tester::#WK8] [test-1] $ ./your_program.sh run test.lox
[your_program] foo
[your_program] foo
[your_program] baz
[your_program] bar
[your_program] bar
[your_program] evaluating (if ((or false ok)) print foo)
[your_program] evaluating (if ((or nil ok)) print foo)
[your_program] evaluating (if ((or false false)) print baz)
[your_program] evaluating (if ((or true baz)) print baz)
[your_program] evaluating (if ((or 38.0 bar)) print bar)
[your_program] evaluating (if ((or bar bar)) print bar)
[tester::#WK8] [test-1] ✓ 5 line(s) match on stdout
[tester::#WK8] [test-1] ✓ Received exit code 0.
[tester::#WK8] [test-2] Running test case: 2
[tester::#WK8] [test-2] Writing contents to ./test.lox:
[tester::#WK8] [test-2] [test.lox] print 33 or true;
[tester::#WK8] [test-2] [test.lox] print false or 33;
[tester::#WK8] [test-2] [test.lox] print false or false or true;
[tester::#WK8] [test-2] [test.lox] 
[tester::#WK8] [test-2] [test.lox] print false or false;
[tester::#WK8] [test-2] [test.lox] print false or false or false;
[tester::#WK8] [test-2] [test.lox] print true or true or true or true;
[tester::#WK8] [test-2] $ ./your_program.sh run test.lox
[your_program] 33
[your_program] 33
[your_program] true
[your_program] false
[your_program] false
[your_program] true
[your_program] evaluating print (or 33.0 true)
[your_program] evaluating print (or false 33.0)
[your_program] evaluating print (or false (or false true))
[your_program] evaluating print (or false false)
[your_program] evaluating print (or false (or false false))
[your_program] evaluating print (or true (or true (or true true)))
[tester::#WK8] [test-2] ✓ 6 line(s) match on stdout
[tester::#WK8] [test-2] ✓ Received exit code 0.
[tester::#WK8] [test-3] Running test case: 3
[tester::#WK8] [test-3] Writing contents to ./test.lox:
[tester::#WK8] [test-3] [test.lox] var a = "world";
[tester::#WK8] [test-3] [test.lox] var b = "world";
[tester::#WK8] [test-3] [test.lox] (a = false) or (b = true) or (a = "world");
[tester::#WK8] [test-3] [test.lox] print a;
[tester::#WK8] [test-3] [test.lox] print b;
[tester::#WK8] [test-3] $ ./your_program.sh run test.lox
[your_program] false
[your_program] true
[your_program] evaluating var a = world
[your_program] evaluating var b = world
[your_program] evaluating (or (group (= var a false)) (or (group (= var b true)) (group (= var a world))))
[your_program] evaluating print var a
[your_program] evaluating print var b
[tester::#WK8] [test-3] ✓ 2 line(s) match on stdout
[tester::#WK8] [test-3] ✓ Received exit code 0.
[tester::#WK8] [test-4] Running test case: 4
[tester::#WK8] [test-4] Writing contents to ./test.lox:
[tester::#WK8] [test-4] [test.lox] var stage = "unknown";
[tester::#WK8] [test-4] [test.lox] var age = 53;
[tester::#WK8] [test-4] [test.lox] if (age < 18) { stage = "child"; }
[tester::#WK8] [test-4] [test.lox] if (age >= 18) { stage = "adult"; }
[tester::#WK8] [test-4] [test.lox] print stage;
[tester::#WK8] [test-4] [test.lox] 
[tester::#WK8] [test-4] [test.lox] var isAdult = age >= 18;
[tester::#WK8] [test-4] [test.lox] if (isAdult) { print "eligible for voting: true"; }
[tester::#WK8] [test-4] [test.lox] if (!isAdult) { print "eligible for voting: false"; }
[tester::#WK8] [test-4] $ ./your_program.sh run test.lox
[your_program] adult
[your_program] eligible for voting: true
[your_program] evaluating var stage = unknown
[your_program] evaluating var age = 53.0
[your_program] evaluating (if ((< var age 18.0)) (block (= var stage child)))
[your_program] evaluating (if ((>= var age 18.0)) (block (= var stage adult)))
[your_program] evaluating print var stage
[your_program] evaluating var isAdult = (>= var age 18.0)
[your_program] evaluating (if (var isAdult) (block print eligible for voting: true))
[your_program] evaluating (if ((! var isAdult)) (block print eligible for voting: false))
[tester::#WK8] [test-4] ✓ 2 line(s) match on stdout
[tester::#WK8] [test-4] ✓ Received exit code 0.
[tester::#WK8] Test passed.

[tester::#JX4] Running tests for Stage #JX4 (Control Flow - Logical AND operator)
[tester::#JX4] [test-1] Running test case: 1
[tester::#JX4] [test-1] Writing contents to ./test.lox:
[tester::#JX4] [test-1] [test.lox] if (false and "bad") print "bar";
[tester::#JX4] [test-1] [test.lox] if (nil and "bad") print "bar";
[tester::#JX4] [test-1] [test.lox] 
[tester::#JX4] [test-1] [test.lox] if (true and "quz") print "quz";
[tester::#JX4] [test-1] [test.lox] if (12 and "hello") print "hello";
[tester::#JX4] [test-1] [test.lox] if ("hello" and "hello") print "hello";
[tester::#JX4] [test-1] [test.lox] if ("" and "foo") print "foo";
[tester::#JX4] [test-1] $ ./your_program.sh run test.lox
[your_program] evaluating (if ((and false bad)) print bar)
[your_program] evaluating (if ((and nil bad)) print bar)
[your_program] evaluating (if ((and true quz)) print quz)
[your_program] evaluating (if ((and 12.0 hello)) print hello)
[your_program] evaluating (if ((and hello hello)) print hello)
[your_program] evaluating (if ((and  foo)) print foo)
[your_program] quz
[your_program] hello
[your_program] hello
[your_program] foo
[tester::#JX4] [test-1] ✓ 4 line(s) match on stdout
[tester::#JX4] [test-1] ✓ Received exit code 0.
[tester::#JX4] [test-2] Running test case: 2
[tester::#JX4] [test-2] Writing contents to ./test.lox:
[tester::#JX4] [test-2] [test.lox] print false and 1;
[tester::#JX4] [test-2] [test.lox] print true and 1;
[tester::#JX4] [test-2] [test.lox] print 65 and "world" and false;
[tester::#JX4] [test-2] [test.lox] 
[tester::#JX4] [test-2] [test.lox] print 65 and true;
[tester::#JX4] [test-2] [test.lox] print 65 and "world" and 65;
[tester::#JX4] [test-2] $ ./your_program.sh run test.lox
[your_program] evaluating print (and false 1.0)
[your_program] evaluating print (and true 1.0)
[your_program] evaluating print (and 65.0 (and world false))
[your_program] evaluating print (and 65.0 true)
[your_program] evaluating print (and 65.0 (and world 65.0))
[your_program] false
[your_program] 1
[your_program] false
[your_program] true
[your_program] 65
[tester::#JX4] [test-2] ✓ 5 line(s) match on stdout
[tester::#JX4] [test-2] ✓ Received exit code 0.
[tester::#JX4] [test-3] Running test case: 3
[tester::#JX4] [test-3] Writing contents to ./test.lox:
[tester::#JX4] [test-3] [test.lox] var a = "baz";
[tester::#JX4] [test-3] [test.lox] var b = "baz";
[tester::#JX4] [test-3] [test.lox] (a = true) and (b = false) and (a = "bad");
[tester::#JX4] [test-3] [test.lox] print a;
[tester::#JX4] [test-3] [test.lox] print b;
[tester::#JX4] [test-3] $ ./your_program.sh run test.lox
[your_program] true
[your_program] false
[your_program] evaluating var a = baz
[your_program] evaluating var b = baz
[your_program] evaluating (and (group (= var a true)) (and (group (= var b false)) (group (= var a bad))))
[your_program] evaluating print var a
[your_program] evaluating print var b
[tester::#JX4] [test-3] ✓ 2 line(s) match on stdout
[tester::#JX4] [test-3] ✓ Received exit code 0.
[tester::#JX4] [test-4] Running test case: 4
[tester::#JX4] [test-4] Writing contents to ./test.lox:
[tester::#JX4] [test-4] [test.lox] var stage = "unknown";
[tester::#JX4] [test-4] [test.lox] var age = 73;
[tester::#JX4] [test-4] [test.lox] if (age < 18) { stage = "child"; }
[tester::#JX4] [test-4] [test.lox] if (age >= 18) { stage = "adult"; }
[tester::#JX4] [test-4] [test.lox] print stage;
[tester::#JX4] [test-4] [test.lox] 
[tester::#JX4] [test-4] [test.lox] var isAdult = age >= 18;
[tester::#JX4] [test-4] [test.lox] if (isAdult) { print "eligible for voting: true"; }
[tester::#JX4] [test-4] [test.lox] if (!isAdult) { print "eligible for voting: false"; }
[tester::#JX4] [test-4] $ ./your_program.sh run test.lox
[your_program] evaluating var stage = unknown
[your_program] evaluating var age = 73.0
[your_program] evaluating (if ((< var age 18.0)) (block (= var stage child)))
[your_program] adult
[your_program] eligible for voting: true
[your_program] evaluating (if ((>= var age 18.0)) (block (= var stage adult)))
[your_program] evaluating print var stage
[your_program] evaluating var isAdult = (>= var age 18.0)
[your_program] evaluating (if (var isAdult) (block print eligible for voting: true))
[your_program] evaluating (if ((! var isAdult)) (block print eligible for voting: false))
[tester::#JX4] [test-4] ✓ 2 line(s) match on stdout
[tester::#JX4] [test-4] ✓ Received exit code 0.
[tester::#JX4] Test passed.

[tester::#QY3] Running tests for Stage #QY3 (Control Flow - While statements)
[tester::#QY3] [test-1] Running test case: 1
[tester::#QY3] [test-1] Writing contents to ./test.lox:
[tester::#QY3] [test-1] [test.lox] var hello = 0;
[tester::#QY3] [test-1] [test.lox] while (hello < 3) print hello = hello + 1;
[tester::#QY3] [test-1] $ ./your_program.sh run test.lox
[your_program] evaluating var hello = 0.0
[your_program] evaluating (while ((< var hello 3.0)) print (= var hello (+ var hello 1.0)))
[your_program] 1
[your_program] 2
[your_program] 3
[tester::#QY3] [test-1] ✓ 3 line(s) match on stdout
[tester::#QY3] [test-1] ✓ Received exit code 0.
[tester::#QY3] [test-2] Running test case: 2
[tester::#QY3] [test-2] Writing contents to ./test.lox:
[tester::#QY3] [test-2] [test.lox] var bar = 0;
[tester::#QY3] [test-2] [test.lox] while (bar < 3) {
[tester::#QY3] [test-2] [test.lox]   print bar;
[tester::#QY3] [test-2] [test.lox]   bar = bar + 1;
[tester::#QY3] [test-2] [test.lox] }
[tester::#QY3] [test-2] $ ./your_program.sh run test.lox
[your_program] 0
[your_program] 1
[your_program] evaluating var bar = 0.0
[your_program] evaluating (while ((< var bar 3.0)) (block print var bar, (= var bar (+ var bar 1.0))))
[your_program] 2
[tester::#QY3] [test-2] ✓ 3 line(s) match on stdout
[tester::#QY3] [test-2] ✓ Received exit code 0.
[tester::#QY3] [test-3] Running test case: 3
[tester::#QY3] [test-3] Writing contents to ./test.lox:
[tester::#QY3] [test-3] [test.lox] while (false) { print "should not print"; }
[tester::#QY3] [test-3] [test.lox] 
[tester::#QY3] [test-3] [test.lox] var product = 1;
[tester::#QY3] [test-3] [test.lox] var i = 1;
[tester::#QY3] [test-3] [test.lox] 
[tester::#QY3] [test-3] [test.lox] while (i <= 5) {
[tester::#QY3] [test-3] [test.lox]   product = product * i;
[tester::#QY3] [test-3] [test.lox]   i = i + 1;
[tester::#QY3] [test-3] [test.lox] }
[tester::#QY3] [test-3] [test.lox] 
[tester::#QY3] [test-3] [test.lox] print "Factorial of 5: "; print product;
[tester::#QY3] [test-3] [test.lox] 
[tester::#QY3] [test-3] $ ./your_program.sh run test.lox
[your_program] evaluating (while (false) (block print should not print))
[your_program] Factorial of 5: 
[your_program] 120
[your_program] evaluating var product = 1.0
[your_program] evaluating var i = 1.0
[your_program] evaluating (while ((<= var i 5.0)) (block (= var product (* var product var i)), (= var i (+ var i 1.0))))
[your_program] evaluating print Factorial of 5: 
[your_program] evaluating print var product
[tester::#QY3] [test-3] ✓ 2 line(s) match on stdout
[tester::#QY3] [test-3] ✓ Received exit code 0.
[tester::#QY3] [test-4] Running test case: 4
[tester::#QY3] [test-4] Writing contents to ./test.lox:
[tester::#QY3] [test-4] [test.lox] var n = 10;
[tester::#QY3] [test-4] [test.lox] var fm = 0;
[tester::#QY3] [test-4] [test.lox] var fn = 1;
[tester::#QY3] [test-4] [test.lox] var index = 0;
[tester::#QY3] [test-4] [test.lox] 
[tester::#QY3] [test-4] [test.lox] while (index < n) {
[tester::#QY3] [test-4] [test.lox]     print fm;
[tester::#QY3] [test-4] [test.lox]     var temp = fm;
[tester::#QY3] [test-4] [test.lox]     fm = fn;
[tester::#QY3] [test-4] [test.lox]     fn = temp + fn;
[tester::#QY3] [test-4] [test.lox]     index = index + 1;
[tester::#QY3] [test-4] [test.lox] }
[tester::#QY3] [test-4] $ ./your_program.sh run test.lox
[your_program] 0
[your_program] 1
[your_program] 1
[your_program] 2
[your_program] 3
[your_program] 5
[your_program] 8
[your_program] 13
[your_program] 21
[your_program] 34
[your_program] evaluating var n = 10.0
[your_program] evaluating var fm = 0.0
[your_program] evaluating var fn = 1.0
[your_program] evaluating var index = 0.0
[your_program] evaluating (while ((< var index var n)) (block print var fm, var temp = var fm, (= var fm var fn), (= var fn (+ var temp var fn)), (= var index (+ var index 1.0))))
[tester::#QY3] [test-4] ✓ 10 line(s) match on stdout
[tester::#QY3] [test-4] ✓ Received exit code 0.
[tester::#QY3] Test passed.

[tester::#BW6] Running tests for Stage #BW6 (Control Flow - For statements)
[tester::#BW6] [test-1] Running test case: 1
[tester::#BW6] [test-1] Writing contents to ./test.lox:
[tester::#BW6] [test-1] [test.lox] for (var foo = 0; foo < 3;) print foo = foo + 1;
[tester::#BW6] [test-1] $ ./your_program.sh run test.lox
[your_program] 1
[your_program] 2
[your_program] 3
[your_program] evaluating (for (var foo = 0.0; (< var foo 3.0); ) print (= var foo (+ var foo 1.0)))
[tester::#BW6] [test-1] ✓ 3 line(s) match on stdout
[tester::#BW6] [test-1] ✓ Received exit code 0.
[tester::#BW6] [test-2] Running test case: 2
[tester::#BW6] [test-2] Writing contents to ./test.lox:
[tester::#BW6] [test-2] [test.lox] for (var quz = 0; quz < 3; quz = quz + 1) {
[tester::#BW6] [test-2] [test.lox]   print quz;
[tester::#BW6] [test-2] [test.lox] }
[tester::#BW6] [test-2] $ ./your_program.sh run test.lox
[your_program] 0
[your_program] 1
[your_program] 2
[your_program] evaluating (for (var quz = 0.0; (< var quz 3.0); (= var quz (+ var quz 1.0))) (block print var quz))
[tester::#BW6] [test-2] ✓ 3 line(s) match on stdout
[tester::#BW6] [test-2] ✓ Received exit code 0.
[tester::#BW6] [test-3] Running test case: 3
[tester::#BW6] [test-3] Writing contents to ./test.lox:
[tester::#BW6] [test-3] [test.lox] var world = 0;
[tester::#BW6] [test-3] [test.lox] for (; world < 2; world = world + 1) print world;
[tester::#BW6] [test-3] [test.lox] 
[tester::#BW6] [test-3] [test.lox] for (var bar = 0; bar < 2;) {
[tester::#BW6] [test-3] [test.lox]   print bar;
[tester::#BW6] [test-3] [test.lox]   bar = bar + 1;
[tester::#BW6] [test-3] [test.lox] }
[tester::#BW6] [test-3] $ ./your_program.sh run test.lox
[your_program] 0
[your_program] 1
[your_program] 0
[your_program] 1
[your_program] evaluating var world = 0.0
[your_program] evaluating (for (; (< var world 2.0); (= var world (+ var world 1.0))) print var world)
[your_program] evaluating (for (var bar = 0.0; (< var bar 2.0); ) (block print var bar, (= var bar (+ var bar 1.0))))
[tester::#BW6] [test-3] ✓ 4 line(s) match on stdout
[tester::#BW6] [test-3] ✓ Received exit code 0.
[tester::#BW6] [test-4] Running test case: 4
[tester::#BW6] [test-4] Writing contents to ./test.lox:
[tester::#BW6] [test-4] [test.lox] var world = "after";
[tester::#BW6] [test-4] [test.lox] {
[tester::#BW6] [test-4] [test.lox]   var world = "before";
[tester::#BW6] [test-4] [test.lox] 
[tester::#BW6] [test-4] [test.lox]   for (var world = 0; world < 1; world = world + 1) {
[tester::#BW6] [test-4] [test.lox]     print world;
[tester::#BW6] [test-4] [test.lox]     var world = -1;
[tester::#BW6] [test-4] [test.lox]     print world;
[tester::#BW6] [test-4] [test.lox]   }
[tester::#BW6] [test-4] [test.lox] }
[tester::#BW6] [test-4] [test.lox] 
[tester::#BW6] [test-4] [test.lox] {
[tester::#BW6] [test-4] [test.lox]   for (var world = 0; world > 0; world = world + 1) {}
[tester::#BW6] [test-4] [test.lox] 
[tester::#BW6] [test-4] [test.lox]   var world = "after";
[tester::#BW6] [test-4] [test.lox]   print world;
[tester::#BW6] [test-4] [test.lox] 
[tester::#BW6] [test-4] [test.lox]   for (world = 0; world < 1; world = world + 1) {
[tester::#BW6] [test-4] [test.lox]     print world;
[tester::#BW6] [test-4] [test.lox]   }
[tester::#BW6] [test-4] [test.lox] }
[tester::#BW6] [test-4] $ ./your_program.sh run test.lox
[your_program] 0
[your_program] -1
[your_program] after
[your_program] 0
[your_program] evaluating var world = after
[your_program] evaluating (block var world = before, (for (var world = 0.0; (< var world 1.0); (= var world (+ var world 1.0))) (block print var world, var world = (- 1.0), print var world)))
[your_program] evaluating (block (for (var world = 0.0; (> var world 0.0); (= var world (+ var world 1.0))) (block )), var world = after, print var world, (for ((= var world 0.0); (< var world 1.0); (= var world (+ var world 1.0))) (block print var world)))
[tester::#BW6] [test-4] ✓ 4 line(s) match on stdout
[tester::#BW6] [test-4] ✓ Received exit code 0.
[tester::#BW6] Test passed.

[tester::#VT1] Running tests for Stage #VT1 (Control Flow - Syntactic errors)
[tester::#VT1] [test-1] Running test case: 1
[tester::#VT1] [test-1] Writing contents to ./test.lox:
[tester::#VT1] [test-1] [test.lox] for (;;) var foo;
[tester::#VT1] [test-1] $ ./your_program.sh run test.lox
[tester::#VT1] [test-1] ✓ 1 line(s) match on stdout
[tester::#VT1] [test-1] ✓ Received exit code 65.
[tester::#VT1] [test-2] Running test case: 2
[tester::#VT1] [test-2] Writing contents to ./test.lox:
[tester::#VT1] [test-2] [test.lox] // Invalid condition for condition
[tester::#VT1] [test-2] [test.lox] for (var a = 1; {}; a = a + 1) {}
[tester::#VT1] [test-2] $ ./your_program.sh run test.lox
[your_program] comment: //Invalid condition for condition
[your_program] BlockExpression cannot be used as condition for FOR expression
[tester::#VT1] [test-2] ✓ 1 line(s) match on stdout
[tester::#VT1] [test-2] ✓ Received exit code 65.
[tester::#VT1] [test-3] Running test case: 3
[tester::#VT1] [test-3] Writing contents to ./test.lox:
[tester::#VT1] [test-3] [test.lox] // Invalid condition for increment
[tester::#VT1] [test-3] [test.lox] for (var a = 1; a < 2; {}) {}
[tester::#VT1] [test-3] $ ./your_program.sh run test.lox
[your_program] comment: //Invalid condition for increment
[your_program] BlockExpression cannot be used as after for FOR expression
[tester::#VT1] [test-3] ✓ 1 line(s) match on stdout
[tester::#VT1] [test-3] ✓ Received exit code 65.
[tester::#VT1] [test-4] Running test case: 4
[tester::#VT1] [test-4] Writing contents to ./test.lox:
[tester::#VT1] [test-4] [test.lox] // Invalid condition for initialization
[tester::#VT1] [test-4] [test.lox] for ({}; a < 2; a = a + 1) {}
[tester::#VT1] [test-4] $ ./your_program.sh run test.lox
[your_program] comment: //Invalid condition for initialization
[your_program] BlockExpression cannot be used as init for FOR expression
[tester::#VT1] [test-4] ✓ 1 line(s) match on stdout
[tester::#VT1] [test-4] ✓ Received exit code 65.
[tester::#VT1] Test passed.

Test passed. Congrats!

Submit your changes to move to the next step:

$ codecrafters submit
